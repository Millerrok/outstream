!function(root,undefined){function EventManager(){this.events={}}function Wrapper(t,e,n,r,i){if(!t)throw new Error("Set aid");this.host=encodeURIComponent(window.location.href!=window.parent.location.href?document.referrer:window.location.href),this.cd=(new Date).getTime(),this.height=n||300,this.width=e||400,this.sid=r||0,this.aid=t,this.configUrl=i}function FlashClient(t){if(!getFlashVersion())throw new Error("Flash Player not installed!");this.id=Math.round((new Date).getTime()/1e4+1e7*Math.random()),this.unitSrc="//player.videe.tv/v2.1/resources/libs/videejs-player.swf",this.flashVersion="10.0.0",this.params={allowScriptAccess:"always",allowFullScreen:"true",wmode:"transparent"},this.methodsState=!1,this.proxyEvents=["loaded","error","complete","impression","started","resumed","paused","mute","unmute"],this.options=t}function JsClient(t){this.options=t,this.eventManager=new EventManager,this.methodsState=!1,this.proxyEvents=["loaded","error","complete","impression","started","paused","resize"]}function Outstream(t){return t?(this.options(t||{}),this.events={},void this.init()):void console.error("Create without options")}var root=root||window;root.console||(root.console={log:function(t){},error:function(t){}}),root.JSON||(root.JSON={parse:function(sJSON){return eval("("+sJSON+")")},stringify:function(){var t=Object.prototype.toString,e=Array.isArray||function(e){return"[object Array]"===t.call(e)},n={'"':'\\"',"\\":"\\\\","\b":"\\b","\f":"\\f","\n":"\\n","\r":"\\r","\t":"\\t"},r=function(t){return n[t]||"\\u"+(t.charCodeAt(0)+65536).toString(16).substr(1)},i=/[\\"\u0000-\u001F\u2028\u2029]/g;return function o(n){if(null==n)return"null";if("number"==typeof n)return isFinite(n)?n.toString():"null";if("boolean"==typeof n)return n.toString();if("object"==typeof n){if("function"==typeof n.toJSON)return o(n.toJSON());if(e(n)){for(var s="[",a=0;a<n.length;a++)s+=(a?", ":"")+o(n[a]);return s+"]"}if("[object Object]"===t.call(n)){var u=[];for(var l in n)n.hasOwnProperty(l)&&u.push(o(l)+": "+o(n[l]));return"{"+u.join(", ")+"}"}}return'"'+n.toString().replace(i,r)+'"'}}()}),Object.keys||(Object.keys=function(){"use strict";var t=Object.prototype.hasOwnProperty,e=!{toString:null}.propertyIsEnumerable("toString"),n=["toString","toLocaleString","valueOf","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","constructor"],r=n.length;return function(i){if("object"!=typeof i&&("function"!=typeof i||null===i))throw new TypeError("Object.keys called on non-object");var o,s,a=[];for(o in i)t.call(i,o)&&a.push(o);if(e)for(s=0;s<r;s++)t.call(i,n[s])&&a.push(n[s]);return a}}()),Array.isArray||(Array.isArray=function(t){return"[object Array]"===Object.prototype.toString.call(t)}),Function.prototype.bind||(Function.prototype.bind=function(t){if("function"!=typeof this)throw new TypeError("Function.prototype.bind - what is trying to be bound is not callable");var e=Array.prototype.slice.call(arguments,1),n=this,r=function(){},i=function(){return n.apply(this instanceof r?this:t,e.concat(Array.prototype.slice.call(arguments)))};return this.prototype&&(r.prototype=this.prototype),i.prototype=new r,i}),Array.prototype.indexOf||(Array.prototype.indexOf=function(t,e){var n;if(null==this)throw new TypeError('"this" is null or not defined');var r=Object(this),i=r.length>>>0;if(0===i)return-1;var o=+e||0;if(Math.abs(o)===1/0&&(o=0),o>=i)return-1;for(n=Math.max(o>=0?o:i-Math.abs(o),0);n<i;){if(n in r&&r[n]===t)return n;n++}return-1}),!function(t){if("object"==typeof exports&&"undefined"!=typeof module)module.exports=t();else if("function"==typeof define&&define.amd)define([],t);else{var e;"undefined"!=typeof window?e=window:"undefined"!=typeof global?e=global:"undefined"!=typeof self&&(e=self),e.Promise=t()}}(function(){var t,e,n;return function r(t,e,n){function i(s,a){if(!e[s]){if(!t[s]){var u="function"==typeof _dereq_&&_dereq_;if(!a&&u)return u(s,!0);if(o)return o(s,!0);var l=new Error("Cannot find module '"+s+"'");throw l.code="MODULE_NOT_FOUND",l}var c=e[s]={exports:{}};t[s][0].call(c.exports,function(e){var n=t[s][1][e];return i(n?n:e)},c,c.exports,r,t,e,n)}return e[s].exports}for(var o="function"==typeof _dereq_&&_dereq_,s=0;s<n.length;s++)i(n[s]);return i}({1:[function(t,e,n){"use strict";e.exports=function(t){function e(t){var e=new n(t),r=e.promise();return e.setHowMany(1),e.setUnwrap(),e.init(),r}var n=t._SomePromiseArray;t.any=function(t){return e(t)},t.prototype.any=function(){return e(this)}}},{}],2:[function(t,e,n){"use strict";function r(){this._customScheduler=!1,this._isTickUsed=!1,this._lateQueue=new c(16),this._normalQueue=new c(16),this._haveDrainedQueues=!1,this._trampolineEnabled=!0;var t=this;this.drainQueues=function(){t._drainQueues()},this._schedule=l}function i(t,e,n){this._lateQueue.push(t,e,n),this._queueTick()}function o(t,e,n){this._normalQueue.push(t,e,n),this._queueTick()}function s(t){this._normalQueue._pushOne(t),this._queueTick()}var a;try{throw new Error}catch(u){a=u}var l=t("./schedule"),c=t("./queue"),h=t("./util");r.prototype.setScheduler=function(t){var e=this._schedule;return this._schedule=t,this._customScheduler=!0,e},r.prototype.hasCustomScheduler=function(){return this._customScheduler},r.prototype.enableTrampoline=function(){this._trampolineEnabled=!0},r.prototype.disableTrampolineIfNecessary=function(){h.hasDevTools&&(this._trampolineEnabled=!1)},r.prototype.haveItemsQueued=function(){return this._isTickUsed||this._haveDrainedQueues},r.prototype.fatalError=function(t,e){e?(process.stderr.write("Fatal "+(t instanceof Error?t.stack:t)+"\n"),process.exit(2)):this.throwLater(t)},r.prototype.throwLater=function(t,e){if(1===arguments.length&&(e=t,t=function(){throw e}),"undefined"!=typeof setTimeout)setTimeout(function(){t(e)},0);else try{this._schedule(function(){t(e)})}catch(n){throw new Error("No async scheduler available\n\n    See http://goo.gl/MqrFmX\n")}},h.hasDevTools?(r.prototype.invokeLater=function(t,e,n){this._trampolineEnabled?i.call(this,t,e,n):this._schedule(function(){setTimeout(function(){t.call(e,n)},100)})},r.prototype.invoke=function(t,e,n){this._trampolineEnabled?o.call(this,t,e,n):this._schedule(function(){t.call(e,n)})},r.prototype.settlePromises=function(t){this._trampolineEnabled?s.call(this,t):this._schedule(function(){t._settlePromises()})}):(r.prototype.invokeLater=i,r.prototype.invoke=o,r.prototype.settlePromises=s),r.prototype.invokeFirst=function(t,e,n){this._normalQueue.unshift(t,e,n),this._queueTick()},r.prototype._drainQueue=function(t){for(;t.length()>0;){var e=t.shift();if("function"==typeof e){var n=t.shift(),r=t.shift();e.call(n,r)}else e._settlePromises()}},r.prototype._drainQueues=function(){this._drainQueue(this._normalQueue),this._reset(),this._haveDrainedQueues=!0,this._drainQueue(this._lateQueue)},r.prototype._queueTick=function(){this._isTickUsed||(this._isTickUsed=!0,this._schedule(this.drainQueues))},r.prototype._reset=function(){this._isTickUsed=!1},e.exports=r,e.exports.firstLineError=a},{"./queue":26,"./schedule":29,"./util":36}],3:[function(t,e,n){"use strict";e.exports=function(t,e,n,r){var i=!1,o=function(t,e){this._reject(e)},s=function(t,e){e.promiseRejectionQueued=!0,e.bindingPromise._then(o,o,null,this,t)},a=function(t,e){0===(50397184&this._bitField)&&this._resolveCallback(e.target)},u=function(t,e){e.promiseRejectionQueued||this._reject(t)};t.prototype.bind=function(o){i||(i=!0,t.prototype._propagateFrom=r.propagateFromFunction(),t.prototype._boundValue=r.boundValueFunction());var l=n(o),c=new t(e);c._propagateFrom(this,1);var h=this._target();if(c._setBoundTo(l),l instanceof t){var f={promiseRejectionQueued:!1,promise:c,target:h,bindingPromise:l};h._then(e,s,undefined,c,f),l._then(a,u,undefined,c,f),c._setOnCancel(l)}else c._resolveCallback(h);return c},t.prototype._setBoundTo=function(t){t!==undefined?(this._bitField=2097152|this._bitField,this._boundTo=t):this._bitField=this._bitField&-2097153},t.prototype._isBound=function(){return 2097152===(2097152&this._bitField)},t.bind=function(e,n){return t.resolve(n).bind(e)}}},{}],4:[function(t,e,n){"use strict";function r(){try{Promise===o&&(Promise=i)}catch(t){}return o}var i;"undefined"!=typeof Promise&&(i=Promise);var o=t("./promise")();o.noConflict=r,e.exports=o},{"./promise":22}],5:[function(t,e,n){"use strict";var r=Object.create;if(r){var i=r(null),o=r(null);i[" size"]=o[" size"]=0}e.exports=function(e){function n(t,n){var r;if(null!=t&&(r=t[n]),"function"!=typeof r){var i="Object "+a.classString(t)+" has no method '"+a.toString(n)+"'";throw new e.TypeError(i)}return r}function r(t){var e=this.pop(),r=n(t,e);return r.apply(t,this)}function i(t){return t[this]}function o(t){var e=+this;return e<0&&(e=Math.max(0,e+t.length)),t[e]}var s,a=t("./util"),u=a.canEvaluate;a.isIdentifier;e.prototype.call=function(t){var e=[].slice.call(arguments,1);return e.push(t),this._then(r,undefined,undefined,e,undefined)},e.prototype.get=function(t){var e,n="number"==typeof t;if(n)e=o;else if(u){var r=s(t);e=null!==r?r:i}else e=i;return this._then(e,undefined,undefined,t,undefined)}}},{"./util":36}],6:[function(t,e,n){"use strict";e.exports=function(e,n,r,i){var o=t("./util"),s=o.tryCatch,a=o.errorObj,u=e._async;e.prototype["break"]=e.prototype.cancel=function(){if(!i.cancellation())return this._warn("cancellation is disabled");for(var t=this,e=t;t._isCancellable();){if(!t._cancelBy(e)){e._isFollowing()?e._followee().cancel():e._cancelBranched();break}var n=t._cancellationParent;if(null==n||!n._isCancellable()){t._isFollowing()?t._followee().cancel():t._cancelBranched();break}t._isFollowing()&&t._followee().cancel(),t._setWillBeCancelled(),e=t,t=n}},e.prototype._branchHasCancelled=function(){this._branchesRemainingToCancel--},e.prototype._enoughBranchesHaveCancelled=function(){return this._branchesRemainingToCancel===undefined||this._branchesRemainingToCancel<=0},e.prototype._cancelBy=function(t){return t===this?(this._branchesRemainingToCancel=0,this._invokeOnCancel(),!0):(this._branchHasCancelled(),!!this._enoughBranchesHaveCancelled()&&(this._invokeOnCancel(),!0))},e.prototype._cancelBranched=function(){this._enoughBranchesHaveCancelled()&&this._cancel()},e.prototype._cancel=function(){this._isCancellable()&&(this._setCancelled(),u.invoke(this._cancelPromises,this,undefined))},e.prototype._cancelPromises=function(){this._length()>0&&this._settlePromises()},e.prototype._unsetOnCancel=function(){this._onCancelField=undefined},e.prototype._isCancellable=function(){return this.isPending()&&!this._isCancelled()},e.prototype.isCancellable=function(){return this.isPending()&&!this.isCancelled()},e.prototype._doInvokeOnCancel=function(t,e){if(o.isArray(t))for(var n=0;n<t.length;++n)this._doInvokeOnCancel(t[n],e);else if(t!==undefined)if("function"==typeof t){if(!e){var r=s(t).call(this._boundValue());r===a&&(this._attachExtraTrace(r.e),u.throwLater(r.e))}}else t._resultCancelled(this)},e.prototype._invokeOnCancel=function(){var t=this._onCancel();this._unsetOnCancel(),u.invoke(this._doInvokeOnCancel,this,t)},e.prototype._invokeInternalOnCancel=function(){this._isCancellable()&&(this._doInvokeOnCancel(this._onCancel(),!0),this._unsetOnCancel())},e.prototype._resultCancelled=function(){this.cancel()}}},{"./util":36}],7:[function(t,e,n){"use strict";e.exports=function(e){function n(t,n,a){return function(u){var l=a._boundValue();t:for(var c=0;c<t.length;++c){var h=t[c];if(h===Error||null!=h&&h.prototype instanceof Error){if(u instanceof h)return o(n).call(l,u)}else if("function"==typeof h){var f=o(h).call(l,u);if(f===s)return f;if(f)return o(n).call(l,u)}else if(r.isObject(u)){for(var p=i(h),d=0;d<p.length;++d){var _=p[d];if(h[_]!=u[_])continue t}return o(n).call(l,u)}}return e}}var r=t("./util"),i=t("./es5").keys,o=r.tryCatch,s=r.errorObj;return n}},{"./es5":13,"./util":36}],8:[function(t,e,n){"use strict";e.exports=function(t){function e(){this._trace=new e.CapturedTrace(r())}function n(){if(i)return new e}function r(){var t=o.length-1;return t>=0?o[t]:undefined}var i=!1,o=[];return t.prototype._promiseCreated=function(){},t.prototype._pushContext=function(){},t.prototype._popContext=function(){return null},t._peekContext=t.prototype._peekContext=function(){},e.prototype._pushContext=function(){this._trace!==undefined&&(this._trace._promiseCreated=null,o.push(this._trace))},e.prototype._popContext=function(){if(this._trace!==undefined){var t=o.pop(),e=t._promiseCreated;return t._promiseCreated=null,e}return null},e.CapturedTrace=null,e.create=n,e.deactivateLongStackTraces=function(){},e.activateLongStackTraces=function(){var n=t.prototype._pushContext,o=t.prototype._popContext,s=t._peekContext,a=t.prototype._peekContext,u=t.prototype._promiseCreated;e.deactivateLongStackTraces=function(){t.prototype._pushContext=n,t.prototype._popContext=o,t._peekContext=s,t.prototype._peekContext=a,t.prototype._promiseCreated=u,i=!1},i=!0,t.prototype._pushContext=e.prototype._pushContext,t.prototype._popContext=e.prototype._popContext,t._peekContext=t.prototype._peekContext=r,t.prototype._promiseCreated=function(){var t=this._peekContext();t&&null==t._promiseCreated&&(t._promiseCreated=this)}},e}},{}],9:[function(t,e,n){"use strict";e.exports=function(e,n){function r(t,e){return{promise:e}}function i(){return!1}function o(t,e,n){var r=this;try{t(e,n,function(t){if("function"!=typeof t)throw new TypeError("onCancel must be a function, got: "+M.toString(t));r._attachCancellationCallback(t)})}catch(i){return i}}function s(t){if(!this._isCancellable())return this;var e=this._onCancel();e!==undefined?M.isArray(e)?e.push(t):this._setOnCancel([e,t]):this._setOnCancel(t)}function a(){return this._onCancelField}function u(t){this._onCancelField=t}function l(){this._cancellationParent=undefined,this._onCancelField=undefined}function c(t,e){if(0!==(1&e)){this._cancellationParent=t;var n=t._branchesRemainingToCancel;n===undefined&&(n=0),t._branchesRemainingToCancel=n+1}0!==(2&e)&&t._isBound()&&this._setBoundTo(t._boundTo)}function h(t,e){0!==(2&e)&&t._isBound()&&this._setBoundTo(t._boundTo)}function f(){var t=this._boundTo;return t!==undefined&&t instanceof e?t.isFulfilled()?t.value():undefined:t}function p(){this._trace=new O(this._peekContext())}function d(t,e){if(N(t)){var n=this._trace;if(n!==undefined&&e&&(n=n._parent),n!==undefined)n.attachExtraTrace(t);else if(!t.__stackCleaned__){var r=E(t);M.notEnumerableProp(t,"stack",r.message+"\n"+r.stack.join("\n")),M.notEnumerableProp(t,"__stackCleaned__",!0)}}}function _(t,e,n,r,i){if(t===undefined&&null!==e&&J){if(i!==undefined&&i._returnedNonUndefined())return;if(0===(65535&r._bitField))return;n&&(n+=" ");var o="",s="";if(e._trace){for(var a=e._trace.stack.split("\n"),u=w(a),l=u.length-1;l>=0;--l){var c=u[l];if(!B.test(c)){var h=c.match(H);h&&(o="at "+h[1]+":"+h[2]+":"+h[3]+" ");break}}if(u.length>0)for(var f=u[0],l=0;l<a.length;++l)if(a[l]===f){l>0&&(s="\n"+a[l-1]);break}}var p="a promise was created in a "+n+"handler "+o+"but was not returned from it, see http://goo.gl/rRqMUw"+s;r._warn(p,!0,e)}}function y(t,e){var n=t+" is deprecated and will be removed in a future version.";return e&&(n+=" Use "+e+" instead."),v(n)}function v(t,n,r){if(ot.warnings){var i,o=new L(t);if(n)r._attachExtraTrace(o);else if(ot.longStackTraces&&(i=e._peekContext()))i.attachExtraTrace(o);else{var s=E(o);o.stack=s.message+"\n"+s.stack.join("\n")}tt("warning",o)||j(o,"",!0)}}function m(t,e){for(var n=0;n<e.length-1;++n)e[n].push("From previous event:"),e[n]=e[n].join("\n");return n<e.length&&(e[n]=e[n].join("\n")),t+"\n"+e.join("\n")}function g(t){for(var e=0;e<t.length;++e)(0===t[e].length||e+1<t.length&&t[e][0]===t[e+1][0])&&(t.splice(e,1),e--)}function b(t){for(var e=t[0],n=1;n<t.length;++n){for(var r=t[n],i=e.length-1,o=e[i],s=-1,a=r.length-1;a>=0;--a)if(r[a]===o){s=a;break}for(var a=s;a>=0;--a){var u=r[a];if(e[i]!==u)break;e.pop(),i--}e=r}}function w(t){for(var e=[],n=0;n<t.length;++n){var r=t[n],i="    (No stack trace)"===r||$.test(r),o=i&&nt(r);i&&!o&&(q&&" "!==r.charAt(0)&&(r="    "+r),e.push(r))}return e}function C(t){for(var e=t.stack.replace(/\s+$/g,"").split("\n"),n=0;n<e.length;++n){var r=e[n];if("    (No stack trace)"===r||$.test(r))break}return n>0&&(e=e.slice(n)),e}function E(t){var e=t.stack,n=t.toString();return e="string"==typeof e&&e.length>0?C(t):["    (No stack trace)"],{message:n,stack:w(e)}}function j(t,e,n){if("undefined"!=typeof console){var r;if(M.isObject(t)){var i=t.stack;r=e+W(i,t)}else r=e+String(t);"function"==typeof V?V(r,n):"function"!=typeof console.log&&"object"!=typeof console.log||console.log(r)}}function A(t,e,n,r){var i=!1;try{"function"==typeof e&&(i=!0,"rejectionHandled"===t?e(r):e(n,r))}catch(o){D.throwLater(o)}"unhandledRejection"===t?tt(t,n,r)||i||j(n,"Unhandled rejection "):tt(t,r)}function F(t){var e;if("function"==typeof t)e="[function "+(t.name||"anonymous")+"]";else{e=t&&"function"==typeof t.toString?t.toString():M.toString(t);var n=/\[object [a-zA-Z0-9$_]+\]/;if(n.test(e))try{var r=JSON.stringify(t);e=r}catch(i){}0===e.length&&(e="(empty array)")}return"(<"+k(e)+">, no stack trace)"}function k(t){var e=41;return t.length<e?t:t.substr(0,e-3)+"..."}function P(){return"function"==typeof it}function T(t){var e=t.match(rt);if(e)return{fileName:e[1],line:parseInt(e[2],10)}}function S(t,e){if(P()){for(var n,r,i=t.stack.split("\n"),o=e.stack.split("\n"),s=-1,a=-1,u=0;u<i.length;++u){var l=T(i[u]);if(l){n=l.fileName,s=l.line;break}}for(var u=0;u<o.length;++u){var l=T(o[u]);if(l){r=l.fileName,a=l.line;break}}s<0||a<0||!n||!r||n!==r||s>=a||(nt=function(t){if(U.test(t))return!0;var e=T(t);return!!(e&&e.fileName===n&&s<=e.line&&e.line<=a)})}}function O(t){this._parent=t,this._promisesCreated=0;var e=this._length=1+(t===undefined?0:t._length);it(this,O),e>32&&this.uncycle()}var x,R,V,I=e._getDomain,D=e._async,L=t("./errors").Warning,M=t("./util"),N=M.canAttachTrace,U=/[\\\/]bluebird[\\\/]js[\\\/](release|debug|instrumented)/,B=/\((?:timers\.js):\d+:\d+\)/,H=/[\/<\(](.+?):(\d+):(\d+)\)?\s*$/,$=null,W=null,q=!1,Q=!(0==M.env("BLUEBIRD_DEBUG")),X=!(0==M.env("BLUEBIRD_WARNINGS")||!Q&&!M.env("BLUEBIRD_WARNINGS")),z=!(0==M.env("BLUEBIRD_LONG_STACK_TRACES")||!Q&&!M.env("BLUEBIRD_LONG_STACK_TRACES")),J=0!=M.env("BLUEBIRD_W_FORGOTTEN_RETURN")&&(X||!!M.env("BLUEBIRD_W_FORGOTTEN_RETURN"));e.prototype.suppressUnhandledRejections=function(){var t=this._target();t._bitField=t._bitField&-1048577|524288},e.prototype._ensurePossibleRejectionHandled=function(){0===(524288&this._bitField)&&(this._setRejectionIsUnhandled(),D.invokeLater(this._notifyUnhandledRejection,this,undefined))},e.prototype._notifyUnhandledRejectionIsHandled=function(){A("rejectionHandled",x,undefined,this)},e.prototype._setReturnedNonUndefined=function(){this._bitField=268435456|this._bitField},e.prototype._returnedNonUndefined=function(){return 0!==(268435456&this._bitField)},e.prototype._notifyUnhandledRejection=function(){if(this._isRejectionUnhandled()){var t=this._settledValue();this._setUnhandledRejectionIsNotified(),A("unhandledRejection",R,t,this)}},e.prototype._setUnhandledRejectionIsNotified=function(){this._bitField=262144|this._bitField},e.prototype._unsetUnhandledRejectionIsNotified=function(){this._bitField=this._bitField&-262145},e.prototype._isUnhandledRejectionNotified=function(){return(262144&this._bitField)>0},e.prototype._setRejectionIsUnhandled=function(){this._bitField=1048576|this._bitField},e.prototype._unsetRejectionIsUnhandled=function(){this._bitField=this._bitField&-1048577,this._isUnhandledRejectionNotified()&&(this._unsetUnhandledRejectionIsNotified(),this._notifyUnhandledRejectionIsHandled())},e.prototype._isRejectionUnhandled=function(){return(1048576&this._bitField)>0},e.prototype._warn=function(t,e,n){return v(t,e,n||this)},e.onPossiblyUnhandledRejection=function(t){var e=I();R="function"==typeof t?null===e?t:M.domainBind(e,t):undefined},e.onUnhandledRejectionHandled=function(t){var e=I();x="function"==typeof t?null===e?t:M.domainBind(e,t):undefined};var G=function(){};e.longStackTraces=function(){if(D.haveItemsQueued()&&!ot.longStackTraces)throw new Error("cannot enable long stack traces after promises have been created\n\n    See http://goo.gl/MqrFmX\n");if(!ot.longStackTraces&&P()){var t=e.prototype._captureStackTrace,r=e.prototype._attachExtraTrace;ot.longStackTraces=!0,G=function(){if(D.haveItemsQueued()&&!ot.longStackTraces)throw new Error("cannot enable long stack traces after promises have been created\n\n    See http://goo.gl/MqrFmX\n");e.prototype._captureStackTrace=t,e.prototype._attachExtraTrace=r,n.deactivateLongStackTraces(),D.enableTrampoline(),ot.longStackTraces=!1},e.prototype._captureStackTrace=p,e.prototype._attachExtraTrace=d,n.activateLongStackTraces(),D.disableTrampolineIfNecessary()}},e.hasLongStackTraces=function(){return ot.longStackTraces&&P()};var K=function(){try{if("function"==typeof CustomEvent){var t=new CustomEvent("CustomEvent");return M.global.dispatchEvent(t),function(t,e){var n=new CustomEvent(t.toLowerCase(),{detail:e,cancelable:!0});return!M.global.dispatchEvent(n)}}if("function"==typeof Event){var t=new Event("CustomEvent");return M.global.dispatchEvent(t),function(t,e){var n=new Event(t.toLowerCase(),{cancelable:!0});return n.detail=e,!M.global.dispatchEvent(n)}}var t=document.createEvent("CustomEvent");return t.initCustomEvent("testingtheevent",!1,!0,{}),M.global.dispatchEvent(t),function(t,e){var n=document.createEvent("CustomEvent");return n.initCustomEvent(t.toLowerCase(),!1,!0,e),!M.global.dispatchEvent(n)}}catch(e){}return function(){return!1}}(),Y=function(){return M.isNode?function(){return process.emit.apply(process,arguments)}:M.global?function(t){var e="on"+t.toLowerCase(),n=M.global[e];return!!n&&(n.apply(M.global,[].slice.call(arguments,1)),!0)}:function(){return!1}}(),Z={promiseCreated:r,promiseFulfilled:r,promiseRejected:r,promiseResolved:r,promiseCancelled:r,promiseChained:function(t,e,n){return{promise:e,child:n}},warning:function(t,e){return{warning:e}},unhandledRejection:function(t,e,n){return{reason:e,promise:n}},rejectionHandled:r},tt=function(t){var e=!1;try{e=Y.apply(null,arguments)}catch(n){D.throwLater(n),e=!0}var r=!1;try{r=K(t,Z[t].apply(null,arguments))}catch(n){D.throwLater(n),r=!0}return r||e};e.config=function(t){if(t=Object(t),"longStackTraces"in t&&(t.longStackTraces?e.longStackTraces():!t.longStackTraces&&e.hasLongStackTraces()&&G()),"warnings"in t){var n=t.warnings;ot.warnings=!!n,J=ot.warnings,M.isObject(n)&&"wForgottenReturn"in n&&(J=!!n.wForgottenReturn)}if("cancellation"in t&&t.cancellation&&!ot.cancellation){if(D.haveItemsQueued())throw new Error("cannot enable cancellation after promises are in use");e.prototype._clearCancellationData=l,e.prototype._propagateFrom=c,e.prototype._onCancel=a,e.prototype._setOnCancel=u,e.prototype._attachCancellationCallback=s,e.prototype._execute=o,et=c,ot.cancellation=!0}"monitoring"in t&&(t.monitoring&&!ot.monitoring?(ot.monitoring=!0,e.prototype._fireEvent=tt):!t.monitoring&&ot.monitoring&&(ot.monitoring=!1,e.prototype._fireEvent=i))},e.prototype._fireEvent=i,e.prototype._execute=function(t,e,n){try{t(e,n)}catch(r){return r}},e.prototype._onCancel=function(){},e.prototype._setOnCancel=function(t){},e.prototype._attachCancellationCallback=function(t){},e.prototype._captureStackTrace=function(){},e.prototype._attachExtraTrace=function(){},e.prototype._clearCancellationData=function(){},e.prototype._propagateFrom=function(t,e){};var et=h,nt=function(){return!1},rt=/[\/<\(]([^:\/]+):(\d+):(?:\d+)\)?\s*$/;M.inherits(O,Error),n.CapturedTrace=O,O.prototype.uncycle=function(){var t=this._length;if(!(t<2)){for(var e=[],n={},r=0,i=this;i!==undefined;++r)e.push(i),i=i._parent;t=this._length=r;for(var r=t-1;r>=0;--r){var o=e[r].stack;n[o]===undefined&&(n[o]=r)}for(var r=0;r<t;++r){var s=e[r].stack,a=n[s];if(a!==undefined&&a!==r){a>0&&(e[a-1]._parent=undefined,e[a-1]._length=1),e[r]._parent=undefined,e[r]._length=1;var u=r>0?e[r-1]:this;a<t-1?(u._parent=e[a+1],u._parent.uncycle(),u._length=u._parent._length+1):(u._parent=undefined,u._length=1);for(var l=u._length+1,c=r-2;c>=0;--c)e[c]._length=l,l++;return}}}},O.prototype.attachExtraTrace=function(t){if(!t.__stackCleaned__){this.uncycle();for(var e=E(t),n=e.message,r=[e.stack],i=this;i!==undefined;)r.push(w(i.stack.split("\n"))),i=i._parent;b(r),g(r),M.notEnumerableProp(t,"stack",m(n,r)),M.notEnumerableProp(t,"__stackCleaned__",!0)}};var it=function(){var t=/^\s*at\s*/,e=function(t,e){return"string"==typeof t?t:e.name!==undefined&&e.message!==undefined?e.toString():F(e)};if("number"==typeof Error.stackTraceLimit&&"function"==typeof Error.captureStackTrace){Error.stackTraceLimit+=6,$=t,W=e;var n=Error.captureStackTrace;return nt=function(t){return U.test(t)},function(t,e){Error.stackTraceLimit+=6,n(t,e),Error.stackTraceLimit-=6}}var r=new Error;if("string"==typeof r.stack&&r.stack.split("\n")[0].indexOf("stackDetection@")>=0)return $=/@/,W=e,q=!0,function(t){t.stack=(new Error).stack};var i;try{throw new Error}catch(o){i="stack"in o}return"stack"in r||!i||"number"!=typeof Error.stackTraceLimit?(W=function(t,e){return"string"==typeof t?t:"object"!=typeof e&&"function"!=typeof e||e.name===undefined||e.message===undefined?F(e):e.toString()},null):($=t,W=e,function(t){Error.stackTraceLimit+=6;try{throw new Error}catch(e){t.stack=e.stack}Error.stackTraceLimit-=6})}([]);"undefined"!=typeof console&&"undefined"!=typeof console.warn&&(V=function(t){console.warn(t)},M.isNode&&process.stderr.isTTY?V=function(t,e){var n=e?"[33m":"[31m";console.warn(n+t+"[0m\n")}:M.isNode||"string"!=typeof(new Error).stack||(V=function(t,e){console.warn("%c"+t,e?"color: darkorange":"color: red")}));var ot={warnings:X,longStackTraces:!1,cancellation:!1,monitoring:!1};return z&&e.longStackTraces(),{longStackTraces:function(){return ot.longStackTraces},warnings:function(){return ot.warnings},cancellation:function(){return ot.cancellation},monitoring:function(){return ot.monitoring},propagateFromFunction:function(){return et},boundValueFunction:function(){return f},checkForgottenReturns:_,setBounds:S,warn:v,deprecated:y,CapturedTrace:O,fireDomEvent:K,fireGlobalEvent:Y}}},{"./errors":12,"./util":36}],10:[function(t,e,n){"use strict";e.exports=function(t){function e(){return this.value}function n(){throw this.reason}t.prototype["return"]=t.prototype.thenReturn=function(n){return n instanceof t&&n.suppressUnhandledRejections(),this._then(e,undefined,undefined,{value:n},undefined)},t.prototype["throw"]=t.prototype.thenThrow=function(t){return this._then(n,undefined,undefined,{reason:t},undefined)},t.prototype.catchThrow=function(t){if(arguments.length<=1)return this._then(undefined,n,undefined,{reason:t},undefined);var e=arguments[1],r=function(){throw e};return this.caught(t,r)},t.prototype.catchReturn=function(n){if(arguments.length<=1)return n instanceof t&&n.suppressUnhandledRejections(),this._then(undefined,e,undefined,{value:n},undefined);var r=arguments[1];r instanceof t&&r.suppressUnhandledRejections();var i=function(){return r};return this.caught(n,i)}}},{}],11:[function(t,e,n){"use strict";e.exports=function(t,e){function n(){return o(this)}function r(t,n){return i(t,n,e,e)}var i=t.reduce,o=t.all;t.prototype.each=function(t){return i(this,t,e,0)._then(n,undefined,undefined,this,undefined)},t.prototype.mapSeries=function(t){return i(this,t,e,e)},t.each=function(t,r){return i(t,r,e,0)._then(n,undefined,undefined,t,undefined)},t.mapSeries=r}},{}],12:[function(t,e,n){"use strict";function r(t,e){function n(r){return this instanceof n?(h(this,"message","string"==typeof r?r:e),h(this,"name",t),void(Error.captureStackTrace?Error.captureStackTrace(this,this.constructor):Error.call(this))):new n(r)}return c(n,Error),n}function i(t){return this instanceof i?(h(this,"name","OperationalError"),h(this,"message",t),this.cause=t,this.isOperational=!0,void(t instanceof Error?(h(this,"message",t.message),h(this,"stack",t.stack)):Error.captureStackTrace&&Error.captureStackTrace(this,this.constructor))):new i(t)}var o,s,a=t("./es5"),u=a.freeze,l=t("./util"),c=l.inherits,h=l.notEnumerableProp,f=r("Warning","warning"),p=r("CancellationError","cancellation error"),d=r("TimeoutError","timeout error"),_=r("AggregateError","aggregate error");try{o=TypeError,s=RangeError}catch(y){o=r("TypeError","type error"),s=r("RangeError","range error")}for(var v="join pop push shift unshift slice filter forEach some every map indexOf lastIndexOf reduce reduceRight sort reverse".split(" "),m=0;m<v.length;++m)"function"==typeof Array.prototype[v[m]]&&(_.prototype[v[m]]=Array.prototype[v[m]]);a.defineProperty(_.prototype,"length",{value:0,configurable:!1,writable:!0,enumerable:!0}),_.prototype.isOperational=!0;var g=0;_.prototype.toString=function(){var t=Array(4*g+1).join(" "),e="\n"+t+"AggregateError of:\n";g++,t=Array(4*g+1).join(" ");for(var n=0;n<this.length;++n){for(var r=this[n]===this?"[Circular AggregateError]":this[n]+"",i=r.split("\n"),o=0;o<i.length;++o)i[o]=t+i[o];r=i.join("\n"),e+=r+"\n"}return g--,e},c(i,Error);var b=Error.__BluebirdErrorTypes__;b||(b=u({CancellationError:p,TimeoutError:d,OperationalError:i,RejectionError:i,AggregateError:_}),a.defineProperty(Error,"__BluebirdErrorTypes__",{value:b,writable:!1,enumerable:!1,configurable:!1})),e.exports={Error:Error,TypeError:o,RangeError:s,CancellationError:b.CancellationError,OperationalError:b.OperationalError,TimeoutError:b.TimeoutError,AggregateError:b.AggregateError,Warning:f}},{"./es5":13,"./util":36}],13:[function(t,e,n){var r=function(){"use strict";return this===undefined}();if(r)e.exports={freeze:Object.freeze,defineProperty:Object.defineProperty,getDescriptor:Object.getOwnPropertyDescriptor,keys:Object.keys,names:Object.getOwnPropertyNames,getPrototypeOf:Object.getPrototypeOf,isArray:Array.isArray,isES5:r,propertyIsWritable:function(t,e){var n=Object.getOwnPropertyDescriptor(t,e);return!(n&&!n.writable&&!n.set)}};else{var i={}.hasOwnProperty,o={}.toString,s={}.constructor.prototype,a=function(t){var e=[];for(var n in t)i.call(t,n)&&e.push(n);return e},u=function(t,e){return{value:t[e]}},l=function(t,e,n){return t[e]=n.value,t},c=function(t){return t},h=function(t){try{return Object(t).constructor.prototype}catch(e){return s}},f=function(t){try{return"[object Array]"===o.call(t)}catch(e){return!1}};e.exports={isArray:f,keys:a,names:a,defineProperty:l,getDescriptor:u,freeze:c,getPrototypeOf:h,isES5:r,propertyIsWritable:function(){return!0}}}},{}],14:[function(t,e,n){"use strict";e.exports=function(t,e){var n=t.map;t.prototype.filter=function(t,r){return n(this,t,r,e)},t.filter=function(t,r,i){return n(t,r,i,e)}}},{}],15:[function(t,e,n){"use strict";e.exports=function(e,n){function r(t,e,n){this.promise=t,this.type=e,this.handler=n,this.called=!1,this.cancelPromise=null}function i(t){this.finallyHandler=t}function o(t,e){return null!=t.cancelPromise&&(arguments.length>1?t.cancelPromise._reject(e):t.cancelPromise._cancel(),t.cancelPromise=null,!0)}function s(){return u.call(this,this.promise._target()._settledValue())}function a(t){if(!o(this,t))return h.e=t,h}function u(t){var r=this.promise,u=this.handler;if(!this.called){this.called=!0;var l=this.isFinallyHandler()?u.call(r._boundValue()):u.call(r._boundValue(),t);if(l!==undefined){r._setReturnedNonUndefined();var f=n(l,r);if(f instanceof e){if(null!=this.cancelPromise){if(f._isCancelled()){var p=new c("late cancellation observer");return r._attachExtraTrace(p),h.e=p,h}f.isPending()&&f._attachCancellationCallback(new i(this))}return f._then(s,a,undefined,this,undefined)}}}return r.isRejected()?(o(this),h.e=t,h):(o(this),t)}var l=t("./util"),c=e.CancellationError,h=l.errorObj;return r.prototype.isFinallyHandler=function(){return 0===this.type},i.prototype._resultCancelled=function(){o(this.finallyHandler)},e.prototype._passThrough=function(t,e,n,i){return"function"!=typeof t?this.then():this._then(n,i,undefined,new r(this,e,t),undefined)},e.prototype.lastly=e.prototype["finally"]=function(t){return this._passThrough(t,0,u,u)},e.prototype.tap=function(t){
return this._passThrough(t,1,u)},r}},{"./util":36}],16:[function(t,e,n){"use strict";e.exports=function(e,n,r,i,o,s){function a(t,n,r){for(var o=0;o<n.length;++o){r._pushContext();var s=p(n[o])(t);if(r._popContext(),s===f){r._pushContext();var a=e.reject(f.e);return r._popContext(),a}var u=i(s,r);if(u instanceof e)return u}return null}function u(t,n,i,o){if(s.cancellation()){var a=new e(r),u=this._finallyPromise=new e(r);this._promise=a.lastly(function(){return u}),a._captureStackTrace(),a._setOnCancel(this)}else{var l=this._promise=new e(r);l._captureStackTrace()}this._stack=o,this._generatorFunction=t,this._receiver=n,this._generator=undefined,this._yieldHandlers="function"==typeof i?[i].concat(d):d,this._yieldedPromise=null,this._cancellationPhase=!1}var l=t("./errors"),c=l.TypeError,h=t("./util"),f=h.errorObj,p=h.tryCatch,d=[];h.inherits(u,o),u.prototype._isResolved=function(){return null===this._promise},u.prototype._cleanup=function(){this._promise=this._generator=null,s.cancellation()&&null!==this._finallyPromise&&(this._finallyPromise._fulfill(),this._finallyPromise=null)},u.prototype._promiseCancelled=function(){if(!this._isResolved()){var t,n="undefined"!=typeof this._generator["return"];if(n)this._promise._pushContext(),t=p(this._generator["return"]).call(this._generator,undefined),this._promise._popContext();else{var r=new e.CancellationError("generator .return() sentinel");e.coroutine.returnSentinel=r,this._promise._attachExtraTrace(r),this._promise._pushContext(),t=p(this._generator["throw"]).call(this._generator,r),this._promise._popContext()}this._cancellationPhase=!0,this._yieldedPromise=null,this._continue(t)}},u.prototype._promiseFulfilled=function(t){this._yieldedPromise=null,this._promise._pushContext();var e=p(this._generator.next).call(this._generator,t);this._promise._popContext(),this._continue(e)},u.prototype._promiseRejected=function(t){this._yieldedPromise=null,this._promise._attachExtraTrace(t),this._promise._pushContext();var e=p(this._generator["throw"]).call(this._generator,t);this._promise._popContext(),this._continue(e)},u.prototype._resultCancelled=function(){if(this._yieldedPromise instanceof e){var t=this._yieldedPromise;this._yieldedPromise=null,t.cancel()}},u.prototype.promise=function(){return this._promise},u.prototype._run=function(){this._generator=this._generatorFunction.call(this._receiver),this._receiver=this._generatorFunction=undefined,this._promiseFulfilled(undefined)},u.prototype._continue=function(t){var n=this._promise;if(t===f)return this._cleanup(),this._cancellationPhase?n.cancel():n._rejectCallback(t.e,!1);var r=t.value;if(t.done===!0)return this._cleanup(),this._cancellationPhase?n.cancel():n._resolveCallback(r);var o=i(r,this._promise);if(!(o instanceof e)&&(o=a(o,this._yieldHandlers,this._promise),null===o))return void this._promiseRejected(new c("A value %s was yielded that could not be treated as a promise\n\n    See http://goo.gl/MqrFmX\n\n".replace("%s",r)+"From coroutine:\n"+this._stack.split("\n").slice(1,-7).join("\n")));o=o._target();var s=o._bitField;0===(50397184&s)?(this._yieldedPromise=o,o._proxy(this,null)):0!==(33554432&s)?e._async.invoke(this._promiseFulfilled,this,o._value()):0!==(16777216&s)?e._async.invoke(this._promiseRejected,this,o._reason()):this._promiseCancelled()},e.coroutine=function(t,e){if("function"!=typeof t)throw new c("generatorFunction must be a function\n\n    See http://goo.gl/MqrFmX\n");var n=Object(e).yieldHandler,r=u,i=(new Error).stack;return function(){var e=t.apply(this,arguments),o=new r(undefined,undefined,n,i),s=o.promise();return o._generator=e,o._promiseFulfilled(undefined),s}},e.coroutine.addYieldHandler=function(t){if("function"!=typeof t)throw new c("expecting a function but got "+h.classString(t));d.push(t)},e.spawn=function(t){if(s.deprecated("Promise.spawn()","Promise.coroutine()"),"function"!=typeof t)return n("generatorFunction must be a function\n\n    See http://goo.gl/MqrFmX\n");var r=new u(t,this),i=r.promise();return r._run(e.spawn),i}}},{"./errors":12,"./util":36}],17:[function(t,e,n){"use strict";e.exports=function(e,n,r,i,o,s){var a=t("./util");a.canEvaluate,a.tryCatch,a.errorObj;e.join=function(){var t,e=arguments.length-1;if(e>0&&"function"==typeof arguments[e]){t=arguments[e];var r}var i=[].slice.call(arguments);t&&i.pop();var r=new n(i).promise();return t!==undefined?r.spread(t):r}}},{"./util":36}],18:[function(t,e,n){"use strict";e.exports=function(e,n,r,i,o,s){function a(t,e,n,r){this.constructor$(t),this._promise._captureStackTrace();var i=l();this._callback=null===i?e:c.domainBind(i,e),this._preservedValues=r===o?new Array(this.length()):null,this._limit=n,this._inFlight=0,this._queue=[],p.invoke(this._asyncInit,this,undefined)}function u(t,n,i,o){if("function"!=typeof n)return r("expecting a function but got "+c.classString(n));var s=0;if(i!==undefined){if("object"!=typeof i||null===i)return e.reject(new TypeError("options argument must be an object but it is "+c.classString(i)));if("number"!=typeof i.concurrency)return e.reject(new TypeError("'concurrency' must be a number but it is "+c.classString(i.concurrency)));s=i.concurrency}return s="number"==typeof s&&isFinite(s)&&s>=1?s:0,new a(t,n,s,o).promise()}var l=e._getDomain,c=t("./util"),h=c.tryCatch,f=c.errorObj,p=e._async;c.inherits(a,n),a.prototype._asyncInit=function(){this._init$(undefined,-2)},a.prototype._init=function(){},a.prototype._promiseFulfilled=function(t,n){var r=this._values,o=this.length(),a=this._preservedValues,u=this._limit;if(n<0){if(n=n*-1-1,r[n]=t,u>=1&&(this._inFlight--,this._drainQueue(),this._isResolved()))return!0}else{if(u>=1&&this._inFlight>=u)return r[n]=t,this._queue.push(n),!1;null!==a&&(a[n]=t);var l=this._promise,c=this._callback,p=l._boundValue();l._pushContext();var d=h(c).call(p,t,n,o),_=l._popContext();if(s.checkForgottenReturns(d,_,null!==a?"Promise.filter":"Promise.map",l),d===f)return this._reject(d.e),!0;var y=i(d,this._promise);if(y instanceof e){y=y._target();var v=y._bitField;if(0===(50397184&v))return u>=1&&this._inFlight++,r[n]=y,y._proxy(this,(n+1)*-1),!1;if(0===(33554432&v))return 0!==(16777216&v)?(this._reject(y._reason()),!0):(this._cancel(),!0);d=y._value()}r[n]=d}var m=++this._totalResolved;return m>=o&&(null!==a?this._filter(r,a):this._resolve(r),!0)},a.prototype._drainQueue=function(){for(var t=this._queue,e=this._limit,n=this._values;t.length>0&&this._inFlight<e;){if(this._isResolved())return;var r=t.pop();this._promiseFulfilled(n[r],r)}},a.prototype._filter=function(t,e){for(var n=e.length,r=new Array(n),i=0,o=0;o<n;++o)t[o]&&(r[i++]=e[o]);r.length=i,this._resolve(r)},a.prototype.preservedValues=function(){return this._preservedValues},e.prototype.map=function(t,e){return u(this,t,e,null)},e.map=function(t,e,n,r){return u(t,e,n,r)}}},{"./util":36}],19:[function(t,e,n){"use strict";e.exports=function(e,n,r,i,o){var s=t("./util"),a=s.tryCatch;e.method=function(t){if("function"!=typeof t)throw new e.TypeError("expecting a function but got "+s.classString(t));return function(){var r=new e(n);r._captureStackTrace(),r._pushContext();var i=a(t).apply(this,arguments),s=r._popContext();return o.checkForgottenReturns(i,s,"Promise.method",r),r._resolveFromSyncValue(i),r}},e.attempt=e["try"]=function(t){if("function"!=typeof t)return i("expecting a function but got "+s.classString(t));var r=new e(n);r._captureStackTrace(),r._pushContext();var u;if(arguments.length>1){o.deprecated("calling Promise.try with more than 1 argument");var l=arguments[1],c=arguments[2];u=s.isArray(l)?a(t).apply(c,l):a(t).call(c,l)}else u=a(t)();var h=r._popContext();return o.checkForgottenReturns(u,h,"Promise.try",r),r._resolveFromSyncValue(u),r},e.prototype._resolveFromSyncValue=function(t){t===s.errorObj?this._rejectCallback(t.e,!1):this._resolveCallback(t,!0)}}},{"./util":36}],20:[function(t,e,n){"use strict";function r(t){return t instanceof Error&&c.getPrototypeOf(t)===Error.prototype}function i(t){var e;if(r(t)){e=new l(t),e.name=t.name,e.message=t.message,e.stack=t.stack;for(var n=c.keys(t),i=0;i<n.length;++i){var o=n[i];h.test(o)||(e[o]=t[o])}return e}return s.markAsOriginatingFromRejection(t),t}function o(t,e){return function(n,r){if(null!==t){if(n){var o=i(a(n));t._attachExtraTrace(o),t._reject(o)}else if(e){var s=[].slice.call(arguments,1);t._fulfill(s)}else t._fulfill(r);t=null}}}var s=t("./util"),a=s.maybeWrapAsError,u=t("./errors"),l=u.OperationalError,c=t("./es5"),h=/^(?:name|message|stack|cause)$/;e.exports=o},{"./errors":12,"./es5":13,"./util":36}],21:[function(t,e,n){"use strict";e.exports=function(e){function n(t,e){var n=this;if(!o.isArray(t))return r.call(n,t,e);var i=a(e).apply(n._boundValue(),[null].concat(t));i===u&&s.throwLater(i.e)}function r(t,e){var n=this,r=n._boundValue(),i=t===undefined?a(e).call(r,null):a(e).call(r,null,t);i===u&&s.throwLater(i.e)}function i(t,e){var n=this;if(!t){var r=new Error(t+"");r.cause=t,t=r}var i=a(e).call(n._boundValue(),t);i===u&&s.throwLater(i.e)}var o=t("./util"),s=e._async,a=o.tryCatch,u=o.errorObj;e.prototype.asCallback=e.prototype.nodeify=function(t,e){if("function"==typeof t){var o=r;e!==undefined&&Object(e).spread&&(o=n),this._then(o,i,undefined,this,t)}return this}}},{"./util":36}],22:[function(t,e,n){"use strict";e.exports=function(){function n(){}function r(t,e){if("function"!=typeof e)throw new m("expecting a function but got "+p.classString(e));if(t.constructor!==i)throw new m("the promise constructor cannot be invoked directly\n\n    See http://goo.gl/MqrFmX\n")}function i(t){this._bitField=0,this._fulfillmentHandler0=undefined,this._rejectionHandler0=undefined,this._promise0=undefined,this._receiver0=undefined,t!==b&&(r(this,t),this._resolveFromExecutor(t)),this._promiseCreated(),this._fireEvent("promiseCreated",this)}function o(t){this.promise._resolveCallback(t)}function s(t){this.promise._rejectCallback(t,!1)}function a(t){var e=new i(b);e._fulfillmentHandler0=t,e._rejectionHandler0=t,e._promise0=t,e._receiver0=t}var u,l=function(){return new m("circular promise resolution chain\n\n    See http://goo.gl/MqrFmX\n")},c=function(){return new i.PromiseInspection(this._target())},h=function(t){return i.reject(new m(t))},f={},p=t("./util");u=p.isNode?function(){var t=process.domain;return t===undefined&&(t=null),t}:function(){return null},p.notEnumerableProp(i,"_getDomain",u);var d=t("./es5"),_=t("./async"),y=new _;d.defineProperty(i,"_async",{value:y});var v=t("./errors"),m=i.TypeError=v.TypeError;i.RangeError=v.RangeError;var g=i.CancellationError=v.CancellationError;i.TimeoutError=v.TimeoutError,i.OperationalError=v.OperationalError,i.RejectionError=v.OperationalError,i.AggregateError=v.AggregateError;var b=function(){},w={},C={},E=t("./thenables")(i,b),j=t("./promise_array")(i,b,E,h,n),A=t("./context")(i),F=A.create,k=t("./debuggability")(i,A),P=(k.CapturedTrace,t("./finally")(i,E)),T=t("./catch_filter")(C),S=t("./nodeback"),O=p.errorObj,x=p.tryCatch;return i.prototype.toString=function(){return"[object Promise]"},i.prototype.caught=i.prototype["catch"]=function(t){var e=arguments.length;if(e>1){var n,r=new Array(e-1),i=0;for(n=0;n<e-1;++n){var o=arguments[n];if(!p.isObject(o))return h("expecting an object but got A catch statement predicate "+p.classString(o));r[i++]=o}return r.length=i,t=arguments[n],this.then(undefined,T(r,t,this))}return this.then(undefined,t)},i.prototype.reflect=function(){return this._then(c,c,undefined,this,undefined)},i.prototype.then=function(t,e){if(k.warnings()&&arguments.length>0&&"function"!=typeof t&&"function"!=typeof e){var n=".then() only accepts functions but was passed: "+p.classString(t);arguments.length>1&&(n+=", "+p.classString(e)),this._warn(n)}return this._then(t,e,undefined,undefined,undefined)},i.prototype.done=function(t,e){var n=this._then(t,e,undefined,undefined,undefined);n._setIsFinal()},i.prototype.spread=function(t){return"function"!=typeof t?h("expecting a function but got "+p.classString(t)):this.all()._then(t,undefined,undefined,w,undefined)},i.prototype.toJSON=function(){var t={isFulfilled:!1,isRejected:!1,fulfillmentValue:undefined,rejectionReason:undefined};return this.isFulfilled()?(t.fulfillmentValue=this.value(),t.isFulfilled=!0):this.isRejected()&&(t.rejectionReason=this.reason(),t.isRejected=!0),t},i.prototype.all=function(){return arguments.length>0&&this._warn(".all() was passed arguments but it does not take any"),new j(this).promise()},i.prototype.error=function(t){return this.caught(p.originatesFromRejection,t)},i.getNewLibraryCopy=e.exports,i.is=function(t){return t instanceof i},i.fromNode=i.fromCallback=function(t){var e=new i(b);e._captureStackTrace();var n=arguments.length>1&&!!Object(arguments[1]).multiArgs,r=x(t)(S(e,n));return r===O&&e._rejectCallback(r.e,!0),e._isFateSealed()||e._setAsyncGuaranteed(),e},i.all=function(t){return new j(t).promise()},i.cast=function(t){var e=E(t);return e instanceof i||(e=new i(b),e._captureStackTrace(),e._setFulfilled(),e._rejectionHandler0=t),e},i.resolve=i.fulfilled=i.cast,i.reject=i.rejected=function(t){var e=new i(b);return e._captureStackTrace(),e._rejectCallback(t,!0),e},i.setScheduler=function(t){if("function"!=typeof t)throw new m("expecting a function but got "+p.classString(t));return y.setScheduler(t)},i.prototype._then=function(t,e,n,r,o){var s=o!==undefined,a=s?o:new i(b),l=this._target(),c=l._bitField;s||(a._propagateFrom(this,3),a._captureStackTrace(),r===undefined&&0!==(2097152&this._bitField)&&(r=0!==(50397184&c)?this._boundValue():l===this?undefined:this._boundTo),this._fireEvent("promiseChained",this,a));var h=u();if(0!==(50397184&c)){var f,d,_=l._settlePromiseCtx;0!==(33554432&c)?(d=l._rejectionHandler0,f=t):0!==(16777216&c)?(d=l._fulfillmentHandler0,f=e,l._unsetRejectionIsUnhandled()):(_=l._settlePromiseLateCancellationObserver,d=new g("late cancellation observer"),l._attachExtraTrace(d),f=e),y.invoke(_,l,{handler:null===h?f:"function"==typeof f&&p.domainBind(h,f),promise:a,receiver:r,value:d})}else l._addCallbacks(t,e,a,r,h);return a},i.prototype._length=function(){return 65535&this._bitField},i.prototype._isFateSealed=function(){return 0!==(117506048&this._bitField)},i.prototype._isFollowing=function(){return 67108864===(67108864&this._bitField)},i.prototype._setLength=function(t){this._bitField=this._bitField&-65536|65535&t},i.prototype._setFulfilled=function(){this._bitField=33554432|this._bitField,this._fireEvent("promiseFulfilled",this)},i.prototype._setRejected=function(){this._bitField=16777216|this._bitField,this._fireEvent("promiseRejected",this)},i.prototype._setFollowing=function(){this._bitField=67108864|this._bitField,this._fireEvent("promiseResolved",this)},i.prototype._setIsFinal=function(){this._bitField=4194304|this._bitField},i.prototype._isFinal=function(){return(4194304&this._bitField)>0},i.prototype._unsetCancelled=function(){this._bitField=this._bitField&-65537},i.prototype._setCancelled=function(){this._bitField=65536|this._bitField,this._fireEvent("promiseCancelled",this)},i.prototype._setWillBeCancelled=function(){this._bitField=8388608|this._bitField},i.prototype._setAsyncGuaranteed=function(){y.hasCustomScheduler()||(this._bitField=134217728|this._bitField)},i.prototype._receiverAt=function(t){var e=0===t?this._receiver0:this[4*t-4+3];return e===f?undefined:e===undefined&&this._isBound()?this._boundValue():e},i.prototype._promiseAt=function(t){return this[4*t-4+2]},i.prototype._fulfillmentHandlerAt=function(t){return this[4*t-4+0]},i.prototype._rejectionHandlerAt=function(t){return this[4*t-4+1]},i.prototype._boundValue=function(){},i.prototype._migrateCallback0=function(t){var e=(t._bitField,t._fulfillmentHandler0),n=t._rejectionHandler0,r=t._promise0,i=t._receiverAt(0);i===undefined&&(i=f),this._addCallbacks(e,n,r,i,null)},i.prototype._migrateCallbackAt=function(t,e){var n=t._fulfillmentHandlerAt(e),r=t._rejectionHandlerAt(e),i=t._promiseAt(e),o=t._receiverAt(e);o===undefined&&(o=f),this._addCallbacks(n,r,i,o,null)},i.prototype._addCallbacks=function(t,e,n,r,i){var o=this._length();if(o>=65531&&(o=0,this._setLength(0)),0===o)this._promise0=n,this._receiver0=r,"function"==typeof t&&(this._fulfillmentHandler0=null===i?t:p.domainBind(i,t)),"function"==typeof e&&(this._rejectionHandler0=null===i?e:p.domainBind(i,e));else{var s=4*o-4;this[s+2]=n,this[s+3]=r,"function"==typeof t&&(this[s+0]=null===i?t:p.domainBind(i,t)),"function"==typeof e&&(this[s+1]=null===i?e:p.domainBind(i,e))}return this._setLength(o+1),o},i.prototype._proxy=function(t,e){this._addCallbacks(undefined,undefined,e,t,null)},i.prototype._resolveCallback=function(t,e){if(0===(117506048&this._bitField)){if(t===this)return this._rejectCallback(l(),!1);var n=E(t,this);if(!(n instanceof i))return this._fulfill(t);e&&this._propagateFrom(n,2);var r=n._target();if(r===this)return void this._reject(l());var o=r._bitField;if(0===(50397184&o)){var s=this._length();s>0&&r._migrateCallback0(this);for(var a=1;a<s;++a)r._migrateCallbackAt(this,a);this._setFollowing(),this._setLength(0),this._setFollowee(r)}else if(0!==(33554432&o))this._fulfill(r._value());else if(0!==(16777216&o))this._reject(r._reason());else{var u=new g("late cancellation observer");r._attachExtraTrace(u),this._reject(u)}}},i.prototype._rejectCallback=function(t,e,n){var r=p.ensureErrorObject(t),i=r===t;if(!i&&!n&&k.warnings()){var o="a promise was rejected with a non-error: "+p.classString(t);this._warn(o,!0)}this._attachExtraTrace(r,!!e&&i),this._reject(t)},i.prototype._resolveFromExecutor=function(t){var e=this;this._captureStackTrace(),this._pushContext();var n=!0,r=this._execute(t,function(t){e._resolveCallback(t)},function(t){e._rejectCallback(t,n)});n=!1,this._popContext(),r!==undefined&&e._rejectCallback(r,!0)},i.prototype._settlePromiseFromHandler=function(t,e,n,r){var i=r._bitField;if(0===(65536&i)){r._pushContext();var o;e===w?n&&"number"==typeof n.length?o=x(t).apply(this._boundValue(),n):(o=O,o.e=new m("cannot .spread() a non-array: "+p.classString(n))):o=x(t).call(e,n);var s=r._popContext();i=r._bitField,0===(65536&i)&&(o===C?r._reject(n):o===O?r._rejectCallback(o.e,!1):(k.checkForgottenReturns(o,s,"",r,this),r._resolveCallback(o)))}},i.prototype._target=function(){for(var t=this;t._isFollowing();)t=t._followee();return t},i.prototype._followee=function(){return this._rejectionHandler0},i.prototype._setFollowee=function(t){this._rejectionHandler0=t},i.prototype._settlePromise=function(t,e,r,o){var s=t instanceof i,a=this._bitField,u=0!==(134217728&a);0!==(65536&a)?(s&&t._invokeInternalOnCancel(),r instanceof P&&r.isFinallyHandler()?(r.cancelPromise=t,x(e).call(r,o)===O&&t._reject(O.e)):e===c?t._fulfill(c.call(r)):r instanceof n?r._promiseCancelled(t):s||t instanceof j?t._cancel():r.cancel()):"function"==typeof e?s?(u&&t._setAsyncGuaranteed(),this._settlePromiseFromHandler(e,r,o,t)):e.call(r,o,t):r instanceof n?r._isResolved()||(0!==(33554432&a)?r._promiseFulfilled(o,t):r._promiseRejected(o,t)):s&&(u&&t._setAsyncGuaranteed(),0!==(33554432&a)?t._fulfill(o):t._reject(o))},i.prototype._settlePromiseLateCancellationObserver=function(t){var e=t.handler,n=t.promise,r=t.receiver,o=t.value;"function"==typeof e?n instanceof i?this._settlePromiseFromHandler(e,r,o,n):e.call(r,o,n):n instanceof i&&n._reject(o)},i.prototype._settlePromiseCtx=function(t){this._settlePromise(t.promise,t.handler,t.receiver,t.value)},i.prototype._settlePromise0=function(t,e,n){var r=this._promise0,i=this._receiverAt(0);this._promise0=undefined,this._receiver0=undefined,this._settlePromise(r,t,i,e)},i.prototype._clearCallbackDataAtIndex=function(t){var e=4*t-4;this[e+2]=this[e+3]=this[e+0]=this[e+1]=undefined},i.prototype._fulfill=function(t){var e=this._bitField;if(!((117506048&e)>>>16)){if(t===this){var n=l();return this._attachExtraTrace(n),this._reject(n)}this._setFulfilled(),this._rejectionHandler0=t,(65535&e)>0&&(0!==(134217728&e)?this._settlePromises():y.settlePromises(this))}},i.prototype._reject=function(t){var e=this._bitField;if(!((117506048&e)>>>16))return this._setRejected(),this._fulfillmentHandler0=t,this._isFinal()?y.fatalError(t,p.isNode):void((65535&e)>0?y.settlePromises(this):this._ensurePossibleRejectionHandled())},i.prototype._fulfillPromises=function(t,e){for(var n=1;n<t;n++){var r=this._fulfillmentHandlerAt(n),i=this._promiseAt(n),o=this._receiverAt(n);this._clearCallbackDataAtIndex(n),this._settlePromise(i,r,o,e)}},i.prototype._rejectPromises=function(t,e){for(var n=1;n<t;n++){var r=this._rejectionHandlerAt(n),i=this._promiseAt(n),o=this._receiverAt(n);this._clearCallbackDataAtIndex(n),this._settlePromise(i,r,o,e)}},i.prototype._settlePromises=function(){var t=this._bitField,e=65535&t;if(e>0){if(0!==(16842752&t)){var n=this._fulfillmentHandler0;this._settlePromise0(this._rejectionHandler0,n,t),this._rejectPromises(e,n)}else{var r=this._rejectionHandler0;this._settlePromise0(this._fulfillmentHandler0,r,t),this._fulfillPromises(e,r)}this._setLength(0)}this._clearCancellationData()},i.prototype._settledValue=function(){var t=this._bitField;return 0!==(33554432&t)?this._rejectionHandler0:0!==(16777216&t)?this._fulfillmentHandler0:void 0},i.defer=i.pending=function(){k.deprecated("Promise.defer","new Promise");var t=new i(b);return{promise:t,resolve:o,reject:s}},p.notEnumerableProp(i,"_makeSelfResolutionError",l),t("./method")(i,b,E,h,k),t("./bind")(i,b,E,k),t("./cancel")(i,j,h,k),t("./direct_resolve")(i),t("./synchronous_inspection")(i),t("./join")(i,j,E,b,y,u),i.Promise=i,i.version="3.4.6",t("./map.js")(i,j,h,E,b,k),t("./call_get.js")(i),t("./using.js")(i,h,E,F,b,k),t("./timers.js")(i,b,k),t("./generators.js")(i,h,b,E,n,k),t("./nodeify.js")(i),t("./promisify.js")(i,b),t("./props.js")(i,j,E,h),t("./race.js")(i,b,E,h),t("./reduce.js")(i,j,h,E,b,k),t("./settle.js")(i,j,k),t("./some.js")(i,j,h),t("./filter.js")(i,b),t("./each.js")(i,b),t("./any.js")(i),p.toFastProperties(i),p.toFastProperties(i.prototype),a({a:1}),a({b:2}),a({c:3}),a(1),a(function(){}),a(undefined),a(!1),a(new i(b)),k.setBounds(_.firstLineError,p.lastLineError),i}},{"./any.js":1,"./async":2,"./bind":3,"./call_get.js":5,"./cancel":6,"./catch_filter":7,"./context":8,"./debuggability":9,"./direct_resolve":10,"./each.js":11,"./errors":12,"./es5":13,"./filter.js":14,"./finally":15,"./generators.js":16,"./join":17,"./map.js":18,"./method":19,"./nodeback":20,"./nodeify.js":21,"./promise_array":23,"./promisify.js":24,"./props.js":25,"./race.js":27,"./reduce.js":28,"./settle.js":30,"./some.js":31,"./synchronous_inspection":32,"./thenables":33,"./timers.js":34,"./using.js":35,"./util":36}],23:[function(t,e,n){"use strict";e.exports=function(e,n,r,i,o){function s(t){switch(t){case-2:return[];case-3:return{}}}function a(t){var r=this._promise=new e(n);t instanceof e&&r._propagateFrom(t,3),r._setOnCancel(this),this._values=t,this._length=0,this._totalResolved=0,this._init(undefined,-2)}var u=t("./util");u.isArray;return u.inherits(a,o),a.prototype.length=function(){return this._length},a.prototype.promise=function(){return this._promise},a.prototype._init=function l(t,n){var o=r(this._values,this._promise);if(o instanceof e){o=o._target();var a=o._bitField;if(this._values=o,0===(50397184&a))return this._promise._setAsyncGuaranteed(),o._then(l,this._reject,undefined,this,n);if(0===(33554432&a))return 0!==(16777216&a)?this._reject(o._reason()):this._cancel();o=o._value()}if(o=u.asArray(o),null===o){var c=i("expecting an array or an iterable object but got "+u.classString(o)).reason();return void this._promise._rejectCallback(c,!1)}return 0===o.length?void(n===-5?this._resolveEmptyArray():this._resolve(s(n))):void this._iterate(o)},a.prototype._iterate=function(t){var n=this.getActualLength(t.length);this._length=n,this._values=this.shouldCopyValues()?new Array(n):this._values;for(var i=this._promise,o=!1,s=null,a=0;a<n;++a){var u=r(t[a],i);u instanceof e?(u=u._target(),s=u._bitField):s=null,o?null!==s&&u.suppressUnhandledRejections():null!==s?0===(50397184&s)?(u._proxy(this,a),this._values[a]=u):o=0!==(33554432&s)?this._promiseFulfilled(u._value(),a):0!==(16777216&s)?this._promiseRejected(u._reason(),a):this._promiseCancelled(a):o=this._promiseFulfilled(u,a)}o||i._setAsyncGuaranteed()},a.prototype._isResolved=function(){return null===this._values},a.prototype._resolve=function(t){this._values=null,this._promise._fulfill(t)},a.prototype._cancel=function(){!this._isResolved()&&this._promise._isCancellable()&&(this._values=null,this._promise._cancel())},a.prototype._reject=function(t){this._values=null,this._promise._rejectCallback(t,!1)},a.prototype._promiseFulfilled=function(t,e){this._values[e]=t;var n=++this._totalResolved;return n>=this._length&&(this._resolve(this._values),!0)},a.prototype._promiseCancelled=function(){return this._cancel(),!0},a.prototype._promiseRejected=function(t){return this._totalResolved++,this._reject(t),!0},a.prototype._resultCancelled=function(){if(!this._isResolved()){var t=this._values;if(this._cancel(),t instanceof e)t.cancel();else for(var n=0;n<t.length;++n)t[n]instanceof e&&t[n].cancel()}},a.prototype.shouldCopyValues=function(){return!0},a.prototype.getActualLength=function(t){return t},a}},{"./util":36}],24:[function(t,e,n){"use strict";e.exports=function(e,n){function r(t){return!C.test(t)}function i(t){try{return t.__isPromisified__===!0}catch(e){return!1}}function o(t,e,n){var r=p.getDataPropertyOrDefault(t,e+n,b);return!!r&&i(r)}function s(t,e,n){for(var r=0;r<t.length;r+=2){var i=t[r];if(n.test(i))for(var o=i.replace(n,""),s=0;s<t.length;s+=2)if(t[s]===o)throw new m("Cannot promisify an API that has normal methods with '%s'-suffix\n\n    See http://goo.gl/MqrFmX\n".replace("%s",e))}}function a(t,e,n,r){for(var a=p.inheritedDataKeys(t),u=[],l=0;l<a.length;++l){var c=a[l],h=t[c],f=r===E||E(c,h,t);"function"!=typeof h||i(h)||o(t,c,e)||!r(c,h,t,f)||u.push(c,h)}return s(u,e,n),u}function u(t,r,i,o,s,a){function u(){var i=r;r===f&&(i=this);var o=new e(n);o._captureStackTrace();var s="string"==typeof c&&this!==l?this[c]:t,u=d(o,a);try{s.apply(i,_(arguments,u))}catch(h){o._rejectCallback(y(h),!0,!0)}return o._isFateSealed()||o._setAsyncGuaranteed(),o}var l=function(){return this}(),c=t;return"string"==typeof c&&(t=o),p.notEnumerableProp(u,"__isPromisified__",!0),u}function l(t,e,n,r,i){for(var o=new RegExp(j(e)+"$"),s=a(t,e,o,n),u=0,l=s.length;u<l;u+=2){var c=s[u],h=s[u+1],d=c+e;if(r===A)t[d]=A(c,f,c,h,e,i);else{var _=r(h,function(){return A(c,f,c,h,e,i)});p.notEnumerableProp(_,"__isPromisified__",!0),t[d]=_}}return p.toFastProperties(t),t}function c(t,e,n){return A(t,e,undefined,t,null,n)}var h,f={},p=t("./util"),d=t("./nodeback"),_=p.withAppended,y=p.maybeWrapAsError,v=p.canEvaluate,m=t("./errors").TypeError,g="Async",b={__isPromisified__:!0},w=["arity","length","name","arguments","caller","callee","prototype","__isPromisified__"],C=new RegExp("^(?:"+w.join("|")+")$"),E=function(t){return p.isIdentifier(t)&&"_"!==t.charAt(0)&&"constructor"!==t},j=function(t){return t.replace(/([$])/,"\\$")},A=v?h:u;e.promisify=function(t,e){if("function"!=typeof t)throw new m("expecting a function but got "+p.classString(t));if(i(t))return t;e=Object(e);var n=e.context===undefined?f:e.context,o=!!e.multiArgs,s=c(t,n,o);return p.copyDescriptors(t,s,r),s},e.promisifyAll=function(t,e){if("function"!=typeof t&&"object"!=typeof t)throw new m("the target of promisifyAll must be an object or a function\n\n    See http://goo.gl/MqrFmX\n");e=Object(e);var n=!!e.multiArgs,r=e.suffix;"string"!=typeof r&&(r=g);var i=e.filter;"function"!=typeof i&&(i=E);var o=e.promisifier;if("function"!=typeof o&&(o=A),!p.isIdentifier(r))throw new RangeError("suffix must be a valid identifier\n\n    See http://goo.gl/MqrFmX\n");for(var s=p.inheritedDataKeys(t),a=0;a<s.length;++a){var u=t[s[a]];"constructor"!==s[a]&&p.isClass(u)&&(l(u.prototype,r,i,o,n),l(u,r,i,o,n))}return l(t,r,i,o,n)}}},{"./errors":12,"./nodeback":20,"./util":36}],25:[function(t,e,n){"use strict";e.exports=function(e,n,r,i){function o(t){var e,n=!1;if(a!==undefined&&t instanceof a)e=h(t),n=!0;else{var r=c.keys(t),i=r.length;e=new Array(2*i);for(var o=0;o<i;++o){var s=r[o];e[o]=t[s],e[o+i]=s}}this.constructor$(e),this._isMap=n,this._init$(undefined,-3)}function s(t){var n,s=r(t);return l(s)?(n=s instanceof e?s._then(e.props,undefined,undefined,undefined,undefined):new o(s).promise(),s instanceof e&&n._propagateFrom(s,2),n):i("cannot await properties of a non-object\n\n    See http://goo.gl/MqrFmX\n")}var a,u=t("./util"),l=u.isObject,c=t("./es5");"function"==typeof Map&&(a=Map);var h=function(){function t(t,r){this[e]=t,this[e+n]=r,e++}var e=0,n=0;return function(r){n=r.size,e=0;var i=new Array(2*r.size);return r.forEach(t,i),i}}(),f=function(t){for(var e=new a,n=t.length/2|0,r=0;r<n;++r){var i=t[n+r],o=t[r];e.set(i,o)}return e};u.inherits(o,n),o.prototype._init=function(){},o.prototype._promiseFulfilled=function(t,e){this._values[e]=t;var n=++this._totalResolved;if(n>=this._length){var r;if(this._isMap)r=f(this._values);else{r={};for(var i=this.length(),o=0,s=this.length();o<s;++o)r[this._values[o+i]]=this._values[o]}return this._resolve(r),!0}return!1},o.prototype.shouldCopyValues=function(){return!1},o.prototype.getActualLength=function(t){return t>>1},e.prototype.props=function(){return s(this)},e.props=function(t){return s(t)}}},{"./es5":13,"./util":36}],26:[function(t,e,n){"use strict";function r(t,e,n,r,i){for(var o=0;o<i;++o)n[o+r]=t[o+e],t[o+e]=void 0}function i(t){this._capacity=t,this._length=0,this._front=0}i.prototype._willBeOverCapacity=function(t){return this._capacity<t},i.prototype._pushOne=function(t){var e=this.length();this._checkCapacity(e+1);var n=this._front+e&this._capacity-1;this[n]=t,this._length=e+1},i.prototype._unshiftOne=function(t){var e=this._capacity;this._checkCapacity(this.length()+1);var n=this._front,r=(n-1&e-1^e)-e;this[r]=t,this._front=r,this._length=this.length()+1},i.prototype.unshift=function(t,e,n){this._unshiftOne(n),this._unshiftOne(e),this._unshiftOne(t)},i.prototype.push=function(t,e,n){var r=this.length()+3;if(this._willBeOverCapacity(r))return this._pushOne(t),this._pushOne(e),void this._pushOne(n);var i=this._front+r-3;this._checkCapacity(r);var o=this._capacity-1;this[i+0&o]=t,this[i+1&o]=e,this[i+2&o]=n,this._length=r},i.prototype.shift=function(){var t=this._front,e=this[t];return this[t]=undefined,this._front=t+1&this._capacity-1,this._length--,e},i.prototype.length=function(){return this._length},i.prototype._checkCapacity=function(t){this._capacity<t&&this._resizeTo(this._capacity<<1)},i.prototype._resizeTo=function(t){var e=this._capacity;this._capacity=t;var n=this._front,i=this._length,o=n+i&e-1;r(this,0,this,e,o)},e.exports=i},{}],27:[function(t,e,n){"use strict";e.exports=function(e,n,r,i){function o(t,o){var u=r(t);if(u instanceof e)return a(u);if(t=s.asArray(t),null===t)return i("expecting an array or an iterable object but got "+s.classString(t));var l=new e(n);o!==undefined&&l._propagateFrom(o,3);for(var c=l._fulfill,h=l._reject,f=0,p=t.length;f<p;++f){var d=t[f];(d!==undefined||f in t)&&e.cast(d)._then(c,h,undefined,l,null)}return l}var s=t("./util"),a=function(t){return t.then(function(e){return o(e,t)})};e.race=function(t){return o(t,undefined)},e.prototype.race=function(){return o(this,undefined)}}},{"./util":36}],28:[function(t,e,n){"use strict";e.exports=function(e,n,r,i,o,s){function a(t,n,r,i){this.constructor$(t);var s=f();this._fn=null===s?n:p.domainBind(s,n),r!==undefined&&(r=e.resolve(r),r._attachCancellationCallback(this)),this._initialValue=r,this._currentCancellable=null,i===o?this._eachValues=Array(this._length):0===i?this._eachValues=null:this._eachValues=undefined,this._promise._captureStackTrace(),this._init$(undefined,-5)}function u(t,e){this.isFulfilled()?e._resolve(t):e._reject(t)}function l(t,e,n,i){if("function"!=typeof e)return r("expecting a function but got "+p.classString(e));var o=new a(t,e,n,i);return o.promise()}function c(t){this.accum=t,this.array._gotAccum(t);var n=i(this.value,this.array._promise);return n instanceof e?(this.array._currentCancellable=n,
n._then(h,undefined,undefined,this,undefined)):h.call(this,n)}function h(t){var n=this.array,r=n._promise,i=d(n._fn);r._pushContext();var o;o=n._eachValues!==undefined?i.call(r._boundValue(),t,this.index,this.length):i.call(r._boundValue(),this.accum,t,this.index,this.length),o instanceof e&&(n._currentCancellable=o);var a=r._popContext();return s.checkForgottenReturns(o,a,n._eachValues!==undefined?"Promise.each":"Promise.reduce",r),o}var f=e._getDomain,p=t("./util"),d=p.tryCatch;p.inherits(a,n),a.prototype._gotAccum=function(t){this._eachValues!==undefined&&null!==this._eachValues&&t!==o&&this._eachValues.push(t)},a.prototype._eachComplete=function(t){return null!==this._eachValues&&this._eachValues.push(t),this._eachValues},a.prototype._init=function(){},a.prototype._resolveEmptyArray=function(){this._resolve(this._eachValues!==undefined?this._eachValues:this._initialValue)},a.prototype.shouldCopyValues=function(){return!1},a.prototype._resolve=function(t){this._promise._resolveCallback(t),this._values=null},a.prototype._resultCancelled=function(t){return t===this._initialValue?this._cancel():void(this._isResolved()||(this._resultCancelled$(),this._currentCancellable instanceof e&&this._currentCancellable.cancel(),this._initialValue instanceof e&&this._initialValue.cancel()))},a.prototype._iterate=function(t){this._values=t;var n,r,i=t.length;if(this._initialValue!==undefined?(n=this._initialValue,r=0):(n=e.resolve(t[0]),r=1),this._currentCancellable=n,!n.isRejected())for(;r<i;++r){var o={accum:null,value:t[r],index:r,length:i,array:this};n=n._then(c,undefined,undefined,o,undefined)}this._eachValues!==undefined&&(n=n._then(this._eachComplete,undefined,undefined,this,undefined)),n._then(u,u,undefined,n,this)},e.prototype.reduce=function(t,e){return l(this,t,e,null)},e.reduce=function(t,e,n,r){return l(t,e,n,r)}}},{"./util":36}],29:[function(t,e,n){"use strict";var r,i=t("./util"),o=function(){throw new Error("No async scheduler available\n\n    See http://goo.gl/MqrFmX\n")},s=i.getNativePromise();if(i.isNode&&"undefined"==typeof MutationObserver){var a=global.setImmediate,u=process.nextTick;r=i.isRecentNode?function(t){a.call(global,t)}:function(t){u.call(process,t)}}else if("function"==typeof s&&"function"==typeof s.resolve){var l=s.resolve();r=function(t){l.then(t)}}else r="undefined"==typeof MutationObserver||"undefined"!=typeof window&&window.navigator&&(window.navigator.standalone||window.cordova)?"undefined"!=typeof setImmediate?function(t){setImmediate(t)}:"undefined"!=typeof setTimeout?function(t){setTimeout(t,0)}:o:function(){var t=document.createElement("div"),e={attributes:!0},n=!1,r=document.createElement("div"),i=new MutationObserver(function(){t.classList.toggle("foo"),n=!1});i.observe(r,e);var o=function(){n||(n=!0,r.classList.toggle("foo"))};return function(n){var r=new MutationObserver(function(){r.disconnect(),n()});r.observe(t,e),o()}}();e.exports=r},{"./util":36}],30:[function(t,e,n){"use strict";e.exports=function(e,n,r){function i(t){this.constructor$(t)}var o=e.PromiseInspection,s=t("./util");s.inherits(i,n),i.prototype._promiseResolved=function(t,e){this._values[t]=e;var n=++this._totalResolved;return n>=this._length&&(this._resolve(this._values),!0)},i.prototype._promiseFulfilled=function(t,e){var n=new o;return n._bitField=33554432,n._settledValueField=t,this._promiseResolved(e,n)},i.prototype._promiseRejected=function(t,e){var n=new o;return n._bitField=16777216,n._settledValueField=t,this._promiseResolved(e,n)},e.settle=function(t){return r.deprecated(".settle()",".reflect()"),new i(t).promise()},e.prototype.settle=function(){return e.settle(this)}}},{"./util":36}],31:[function(t,e,n){"use strict";e.exports=function(e,n,r){function i(t){this.constructor$(t),this._howMany=0,this._unwrap=!1,this._initialized=!1}function o(t,e){if((0|e)!==e||e<0)return r("expecting a positive integer\n\n    See http://goo.gl/MqrFmX\n");var n=new i(t),o=n.promise();return n.setHowMany(e),n.init(),o}var s=t("./util"),a=t("./errors").RangeError,u=t("./errors").AggregateError,l=s.isArray,c={};s.inherits(i,n),i.prototype._init=function(){if(this._initialized){if(0===this._howMany)return void this._resolve([]);this._init$(undefined,-5);var t=l(this._values);!this._isResolved()&&t&&this._howMany>this._canPossiblyFulfill()&&this._reject(this._getRangeError(this.length()))}},i.prototype.init=function(){this._initialized=!0,this._init()},i.prototype.setUnwrap=function(){this._unwrap=!0},i.prototype.howMany=function(){return this._howMany},i.prototype.setHowMany=function(t){this._howMany=t},i.prototype._promiseFulfilled=function(t){return this._addFulfilled(t),this._fulfilled()===this.howMany()&&(this._values.length=this.howMany(),1===this.howMany()&&this._unwrap?this._resolve(this._values[0]):this._resolve(this._values),!0)},i.prototype._promiseRejected=function(t){return this._addRejected(t),this._checkOutcome()},i.prototype._promiseCancelled=function(){return this._values instanceof e||null==this._values?this._cancel():(this._addRejected(c),this._checkOutcome())},i.prototype._checkOutcome=function(){if(this.howMany()>this._canPossiblyFulfill()){for(var t=new u,e=this.length();e<this._values.length;++e)this._values[e]!==c&&t.push(this._values[e]);return t.length>0?this._reject(t):this._cancel(),!0}return!1},i.prototype._fulfilled=function(){return this._totalResolved},i.prototype._rejected=function(){return this._values.length-this.length()},i.prototype._addRejected=function(t){this._values.push(t)},i.prototype._addFulfilled=function(t){this._values[this._totalResolved++]=t},i.prototype._canPossiblyFulfill=function(){return this.length()-this._rejected()},i.prototype._getRangeError=function(t){var e="Input array must contain at least "+this._howMany+" items but contains only "+t+" items";return new a(e)},i.prototype._resolveEmptyArray=function(){this._reject(this._getRangeError(0))},e.some=function(t,e){return o(t,e)},e.prototype.some=function(t){return o(this,t)},e._SomePromiseArray=i}},{"./errors":12,"./util":36}],32:[function(t,e,n){"use strict";e.exports=function(t){function e(t){t!==undefined?(t=t._target(),this._bitField=t._bitField,this._settledValueField=t._isFateSealed()?t._settledValue():undefined):(this._bitField=0,this._settledValueField=undefined)}e.prototype._settledValue=function(){return this._settledValueField};var n=e.prototype.value=function(){if(!this.isFulfilled())throw new TypeError("cannot get fulfillment value of a non-fulfilled promise\n\n    See http://goo.gl/MqrFmX\n");return this._settledValue()},r=e.prototype.error=e.prototype.reason=function(){if(!this.isRejected())throw new TypeError("cannot get rejection reason of a non-rejected promise\n\n    See http://goo.gl/MqrFmX\n");return this._settledValue()},i=e.prototype.isFulfilled=function(){return 0!==(33554432&this._bitField)},o=e.prototype.isRejected=function(){return 0!==(16777216&this._bitField)},s=e.prototype.isPending=function(){return 0===(50397184&this._bitField)},a=e.prototype.isResolved=function(){return 0!==(50331648&this._bitField)};e.prototype.isCancelled=function(){return 0!==(8454144&this._bitField)},t.prototype.__isCancelled=function(){return 65536===(65536&this._bitField)},t.prototype._isCancelled=function(){return this._target().__isCancelled()},t.prototype.isCancelled=function(){return 0!==(8454144&this._target()._bitField)},t.prototype.isPending=function(){return s.call(this._target())},t.prototype.isRejected=function(){return o.call(this._target())},t.prototype.isFulfilled=function(){return i.call(this._target())},t.prototype.isResolved=function(){return a.call(this._target())},t.prototype.value=function(){return n.call(this._target())},t.prototype.reason=function(){var t=this._target();return t._unsetRejectionIsUnhandled(),r.call(t)},t.prototype._value=function(){return this._settledValue()},t.prototype._reason=function(){return this._unsetRejectionIsUnhandled(),this._settledValue()},t.PromiseInspection=e}},{}],33:[function(t,e,n){"use strict";e.exports=function(e,n){function r(t,r){if(c(t)){if(t instanceof e)return t;var i=o(t);if(i===l){r&&r._pushContext();var u=e.reject(i.e);return r&&r._popContext(),u}if("function"==typeof i){if(s(t)){var u=new e(n);return t._then(u._fulfill,u._reject,undefined,u,null),u}return a(t,i,r)}}return t}function i(t){return t.then}function o(t){try{return i(t)}catch(e){return l.e=e,l}}function s(t){try{return h.call(t,"_promise0")}catch(e){return!1}}function a(t,r,i){function o(t){a&&(a._resolveCallback(t),a=null)}function s(t){a&&(a._rejectCallback(t,h,!0),a=null)}var a=new e(n),c=a;i&&i._pushContext(),a._captureStackTrace(),i&&i._popContext();var h=!0,f=u.tryCatch(r).call(t,o,s);return h=!1,a&&f===l&&(a._rejectCallback(f.e,!0,!0),a=null),c}var u=t("./util"),l=u.errorObj,c=u.isObject,h={}.hasOwnProperty;return r}},{"./util":36}],34:[function(t,e,n){"use strict";e.exports=function(e,n,r){function i(t){this.handle=t}function o(t){return clearTimeout(this.handle),t}function s(t){throw clearTimeout(this.handle),t}var a=t("./util"),u=e.TimeoutError;i.prototype._resultCancelled=function(){clearTimeout(this.handle)};var l=function(t){return c(+this).thenReturn(t)},c=e.delay=function(t,o){var s,a;return o!==undefined?(s=e.resolve(o)._then(l,null,null,t,undefined),r.cancellation()&&o instanceof e&&s._setOnCancel(o)):(s=new e(n),a=setTimeout(function(){s._fulfill()},+t),r.cancellation()&&s._setOnCancel(new i(a)),s._captureStackTrace()),s._setAsyncGuaranteed(),s};e.prototype.delay=function(t){return c(t,this)};var h=function(t,e,n){var r;r="string"!=typeof e?e instanceof Error?e:new u("operation timed out"):new u(e),a.markAsOriginatingFromRejection(r),t._attachExtraTrace(r),t._reject(r),null!=n&&n.cancel()};e.prototype.timeout=function(t,e){t=+t;var n,a,u=new i(setTimeout(function(){n.isPending()&&h(n,e,a)},t));return r.cancellation()?(a=this.then(),n=a._then(o,s,undefined,u,undefined),n._setOnCancel(u)):n=this._then(o,s,undefined,u,undefined),n}}},{"./util":36}],35:[function(t,e,n){"use strict";e.exports=function(e,n,r,i,o,s){function a(t){setTimeout(function(){throw t},0)}function u(t){var e=r(t);return e!==t&&"function"==typeof t._isDisposable&&"function"==typeof t._getDisposer&&t._isDisposable()&&e._setDisposable(t._getDisposer()),e}function l(t,n){function i(){if(s>=l)return c._fulfill();var o=u(t[s++]);if(o instanceof e&&o._isDisposable()){try{o=r(o._getDisposer().tryDispose(n),t.promise)}catch(h){return a(h)}if(o instanceof e)return o._then(i,a,null,null,null)}i()}var s=0,l=t.length,c=new e(o);return i(),c}function c(t,e,n){this._data=t,this._promise=e,this._context=n}function h(t,e,n){this.constructor$(t,e,n)}function f(t){return c.isDisposer(t)?(this.resources[this.index]._setDisposable(t),t.promise()):t}function p(t){this.length=t,this.promise=null,this[t-1]=null}var d=t("./util"),_=t("./errors").TypeError,y=t("./util").inherits,v=d.errorObj,m=d.tryCatch,g={};c.prototype.data=function(){return this._data},c.prototype.promise=function(){return this._promise},c.prototype.resource=function(){return this.promise().isFulfilled()?this.promise().value():g},c.prototype.tryDispose=function(t){var e=this.resource(),n=this._context;n!==undefined&&n._pushContext();var r=e!==g?this.doDispose(e,t):null;return n!==undefined&&n._popContext(),this._promise._unsetDisposable(),this._data=null,r},c.isDisposer=function(t){return null!=t&&"function"==typeof t.resource&&"function"==typeof t.tryDispose},y(h,c),h.prototype.doDispose=function(t,e){var n=this.data();return n.call(t,t,e)},p.prototype._resultCancelled=function(){for(var t=this.length,n=0;n<t;++n){var r=this[n];r instanceof e&&r.cancel()}},e.using=function(){var t=arguments.length;if(t<2)return n("you must pass at least 2 arguments to Promise.using");var i=arguments[t-1];if("function"!=typeof i)return n("expecting a function but got "+d.classString(i));var o,a=!0;2===t&&Array.isArray(arguments[0])?(o=arguments[0],t=o.length,a=!1):(o=arguments,t--);for(var u=new p(t),h=0;h<t;++h){var _=o[h];if(c.isDisposer(_)){var y=_;_=_.promise(),_._setDisposable(y)}else{var g=r(_);g instanceof e&&(_=g._then(f,null,null,{resources:u,index:h},undefined))}u[h]=_}for(var b=new Array(u.length),h=0;h<b.length;++h)b[h]=e.resolve(u[h]).reflect();var w=e.all(b).then(function(t){for(var e=0;e<t.length;++e){var n=t[e];if(n.isRejected())return v.e=n.error(),v;if(!n.isFulfilled())return void w.cancel();t[e]=n.value()}C._pushContext(),i=m(i);var r=a?i.apply(undefined,t):i(t),o=C._popContext();return s.checkForgottenReturns(r,o,"Promise.using",C),r}),C=w.lastly(function(){var t=new e.PromiseInspection(w);return l(u,t)});return u.promise=C,C._setOnCancel(u),C},e.prototype._setDisposable=function(t){this._bitField=131072|this._bitField,this._disposer=t},e.prototype._isDisposable=function(){return(131072&this._bitField)>0},e.prototype._getDisposer=function(){return this._disposer},e.prototype._unsetDisposable=function(){this._bitField=this._bitField&-131073,this._disposer=undefined},e.prototype.disposer=function(t){if("function"==typeof t)return new h(t,this,i());throw new _}}},{"./errors":12,"./util":36}],36:[function(t,e,n){"use strict";function r(){try{var t=T;return T=null,t.apply(this,arguments)}catch(e){return P.e=e,P}}function i(t){return T=t,r}function o(t){return null==t||t===!0||t===!1||"string"==typeof t||"number"==typeof t}function s(t){return"function"==typeof t||"object"==typeof t&&null!==t}function a(t){return o(t)?new Error(y(t)):t}function u(t,e){var n,r=t.length,i=new Array(r+1);for(n=0;n<r;++n)i[n]=t[n];return i[n]=e,i}function l(t,e,n){if(!F.isES5)return{}.hasOwnProperty.call(t,e)?t[e]:undefined;var r=Object.getOwnPropertyDescriptor(t,e);return null!=r?null==r.get&&null==r.set?r.value:n:void 0}function c(t,e,n){if(o(t))return t;var r={value:n,configurable:!0,enumerable:!1,writable:!0};return F.defineProperty(t,e,r),t}function h(t){throw t}function f(t){try{if("function"==typeof t){var e=F.names(t.prototype),n=F.isES5&&e.length>1,r=e.length>0&&!(1===e.length&&"constructor"===e[0]),i=R.test(t+"")&&F.names(t).length>0;if(n||r||i)return!0}return!1}catch(o){return!1}}function p(t){function e(){}e.prototype=t;for(var n=8;n--;)new e;return t}function d(t){return V.test(t)}function _(t,e,n){for(var r=new Array(t),i=0;i<t;++i)r[i]=e+i+n;return r}function y(t){try{return t+""}catch(e){return"[no string representation]"}}function v(t){return null!==t&&"object"==typeof t&&"string"==typeof t.message&&"string"==typeof t.name}function m(t){try{c(t,"isOperational",!0)}catch(e){}}function g(t){return null!=t&&(t instanceof Error.__BluebirdErrorTypes__.OperationalError||t.isOperational===!0)}function b(t){return v(t)&&F.propertyIsWritable(t,"stack")}function w(t){return{}.toString.call(t)}function C(t,e,n){for(var r=F.names(t),i=0;i<r.length;++i){var o=r[i];if(n(o))try{F.defineProperty(e,o,F.getDescriptor(t,o))}catch(s){}}}function E(t,e){return M?process.env[t]:e}function j(){if("function"==typeof Promise)try{var t=new Promise(function(){});if("[object Promise]"==={}.toString.call(t))return Promise}catch(e){}}function A(t,e){return t.bind(e)}var F=t("./es5"),k="undefined"==typeof navigator,P={e:{}},T,S="undefined"!=typeof self?self:"undefined"!=typeof window?window:"undefined"!=typeof global?global:this!==undefined?this:null,O=function(t,e){function n(){this.constructor=t,this.constructor$=e;for(var n in e.prototype)r.call(e.prototype,n)&&"$"!==n.charAt(n.length-1)&&(this[n+"$"]=e.prototype[n])}var r={}.hasOwnProperty;return n.prototype=e.prototype,t.prototype=new n,t.prototype},x=function(){var t=[Array.prototype,Object.prototype,Function.prototype],e=function(e){for(var n=0;n<t.length;++n)if(t[n]===e)return!0;return!1};if(F.isES5){var n=Object.getOwnPropertyNames;return function(t){for(var r=[],i=Object.create(null);null!=t&&!e(t);){var o;try{o=n(t)}catch(s){return r}for(var a=0;a<o.length;++a){var u=o[a];if(!i[u]){i[u]=!0;var l=Object.getOwnPropertyDescriptor(t,u);null!=l&&null==l.get&&null==l.set&&r.push(u)}}t=F.getPrototypeOf(t)}return r}}var r={}.hasOwnProperty;return function(n){if(e(n))return[];var i=[];t:for(var o in n)if(r.call(n,o))i.push(o);else{for(var s=0;s<t.length;++s)if(r.call(t[s],o))continue t;i.push(o)}return i}}(),R=/this\s*\.\s*\S+\s*=/,V=/^[a-z$_][a-z$_0-9]*$/i,I=function(){return"stack"in new Error?function(t){return b(t)?t:new Error(y(t))}:function(t){if(b(t))return t;try{throw new Error(y(t))}catch(e){return e}}}(),D=function(t){return F.isArray(t)?t:null};if("undefined"!=typeof Symbol&&Symbol.iterator){var L="function"==typeof Array.from?function(t){return Array.from(t)}:function(t){for(var e,n=[],r=t[Symbol.iterator]();!(e=r.next()).done;)n.push(e.value);return n};D=function(t){return F.isArray(t)?t:null!=t&&"function"==typeof t[Symbol.iterator]?L(t):null}}var M="undefined"!=typeof process&&"[object process]"===w(process).toLowerCase(),N={isClass:f,isIdentifier:d,inheritedDataKeys:x,getDataPropertyOrDefault:l,thrower:h,isArray:F.isArray,asArray:D,notEnumerableProp:c,isPrimitive:o,isObject:s,isError:v,canEvaluate:k,errorObj:P,tryCatch:i,inherits:O,withAppended:u,maybeWrapAsError:a,toFastProperties:p,filledRange:_,toString:y,canAttachTrace:b,ensureErrorObject:I,originatesFromRejection:g,markAsOriginatingFromRejection:m,classString:w,copyDescriptors:C,hasDevTools:"undefined"!=typeof chrome&&chrome&&"function"==typeof chrome.loadTimes,isNode:M,env:E,global:S,getNativePromise:j,domainBind:A};N.isRecentNode=N.isNode&&function(){var t=process.versions.node.split(".").map(Number);return 0===t[0]&&t[1]>10||t[0]>0}(),N.isNode&&N.toFastProperties(process);try{throw new Error}catch(U){N.lastLineError=U}e.exports=N},{"./es5":13}]},{},[4])(4)}),"undefined"!=typeof window&&null!==window?window.P=window.Promise:"undefined"!=typeof self&&null!==self&&(self.P=self.Promise);var getFlashVersion=function(){var t,e,n="Shockwave",r="Flash",i=n+" "+r,o=n+r+"."+n+r,s="application/x-shockwave-flash",a=navigator,u=parseFloat,l=a.plugins,c=a.mimeTypes;if(l&&"object"==typeof l[i]){if(t=l[i].description,t&&(!c||!c[s]||c[s].enabledPlugin))return u(t.replace(/^.*\s+(\S+)\s+\S+$/,"$1"))}else if(window.ActiveXObject)try{if(e=new ActiveXObject(o),e&&(t=e.GetVariable("$version")))return u(t.replace(/^\S+\s+(\d+),(\d+).*$/i,"$1.$2"))}catch(h){}return-1},swfobject=function(){function t(){if(!q&&document.getElementsByTagName("body")[0]){try{var t,e=v("span");e.style.display="none",t=M.getElementsByTagName("body")[0].appendChild(e),t.parentNode.removeChild(t),t=null,e=null}catch(n){return}q=!0;for(var r=B.length,i=0;i<r;i++)B[i]()}}function e(t){q?t():B[B.length]=t}function n(t){if(typeof L.addEventListener!=S)L.addEventListener("load",t,!1);else if(typeof M.addEventListener!=S)M.addEventListener("load",t,!1);else if(typeof L.attachEvent!=S)g(L,"onload",t);else if("function"==typeof L.onload){var e=L.onload;L.onload=function(){e(),t()}}else L.onload=t}function r(){var t=M.getElementsByTagName("body")[0],e=v(O);e.setAttribute("style","visibility: hidden;"),e.setAttribute("type",V);var n=t.appendChild(e);if(n){var r=0;!function o(){if(typeof n.GetVariable!=S)try{var s=n.GetVariable("$version");s&&(s=s.split(" ")[1].split(","),J.pv=[m(s[0]),m(s[1]),m(s[2])])}catch(a){J.pv=[8,0,0]}else if(r<10)return r++,void setTimeout(o,10);t.removeChild(e),n=null,i()}()}else i()}function i(){var t=H.length;if(t>0)for(var e=0;e<t;e++){var n=H[e].id,r=H[e].callbackFn,i={success:!1,id:n};if(J.pv[0]>0){var l=y(n);if(l)if(!b(H[e].swfVersion)||J.wk&&J.wk<312)if(H[e].expressInstall&&s()){var c={};c.data=H[e].expressInstall,c.width=l.getAttribute("width")||"0",c.height=l.getAttribute("height")||"0",l.getAttribute("class")&&(c.styleclass=l.getAttribute("class")),l.getAttribute("align")&&(c.align=l.getAttribute("align"));for(var h={},f=l.getElementsByTagName("param"),p=f.length,d=0;d<p;d++)"movie"!=f[d].getAttribute("name").toLowerCase()&&(h[f[d].getAttribute("name")]=f[d].getAttribute("value"));a(c,h,n,r)}else u(l),r&&r(i);else C(n,!0),r&&(i.success=!0,i.ref=o(n),i.id=n,r(i))}else if(C(n,!0),r){var _=o(n);_&&typeof _.SetVariable!=S&&(i.success=!0,i.ref=_,i.id=_.id),r(i)}}}function o(t){var e=null,n=y(t);return n&&"OBJECT"===n.nodeName.toUpperCase()&&(e=typeof n.SetVariable!==S?n:n.getElementsByTagName(O)[0]||n),e}function s(){return!Q&&b("6.0.65")&&(J.win||J.mac)&&!(J.wk&&J.wk<312)}function a(t,e,n,r){var i=y(n);if(n=_(n),Q=!0,F=r||null,k={success:!1,id:n},i){"OBJECT"==i.nodeName.toUpperCase()?(j=l(i),A=null):(j=i,A=n),t.id=I,(typeof t.width==S||!/%$/.test(t.width)&&m(t.width)<310)&&(t.width="310"),(typeof t.height==S||!/%$/.test(t.height)&&m(t.height)<137)&&(t.height="137");var o=J.ie?"ActiveX":"PlugIn",s="MMredirectURL="+encodeURIComponent(L.location.toString().replace(/&/g,"%26"))+"&MMplayerType="+o+"&MMdoctitle="+encodeURIComponent(M.title.slice(0,47)+" - Flash Player Installation");if(typeof e.flashvars!=S?e.flashvars+="&"+s:e.flashvars=s,J.ie&&4!=i.readyState){var a=v("div");n+="SWFObjectNew",a.setAttribute("id",n),i.parentNode.insertBefore(a,i),i.style.display="none",p(i)}h(t,e,n)}}function u(t){if(J.ie&&4!=t.readyState){t.style.display="none";var e=v("div");t.parentNode.insertBefore(e,t),e.parentNode.replaceChild(l(t),e),p(t)}else t.parentNode.replaceChild(l(t),t)}function l(t){var e=v("div");if(J.win&&J.ie)e.innerHTML=t.innerHTML;else{var n=t.getElementsByTagName(O)[0];if(n){var r=n.childNodes;if(r)for(var i=r.length,o=0;o<i;o++)1==r[o].nodeType&&"PARAM"==r[o].nodeName||8==r[o].nodeType||e.appendChild(r[o].cloneNode(!0))}}return e}function c(t,e){var n=v("div");return n.innerHTML="<object classid='clsid:D27CDB6E-AE6D-11cf-96B8-444553540000'><param name='movie' value='"+t+"'>"+e+"</object>",n.firstChild}function h(t,e,n){var r,i=y(n);if(n=_(n),J.wk&&J.wk<312)return r;if(i){var o,s,a,u=v(J.ie?"div":O);typeof t.id==S&&(t.id=n);for(a in e)e.hasOwnProperty(a)&&"movie"!==a.toLowerCase()&&f(u,a,e[a]);J.ie&&(u=c(t.data,u.innerHTML));for(o in t)t.hasOwnProperty(o)&&(s=o.toLowerCase(),"styleclass"===s?u.setAttribute("class",t[o]):"classid"!==s&&"data"!==s&&u.setAttribute(o,t[o]));J.ie?$[$.length]=t.id:(u.setAttribute("type",V),u.setAttribute("data",t.data)),i.parentNode.replaceChild(u,i),r=u}return r}function f(t,e,n){var r=v("param");r.setAttribute("name",e),r.setAttribute("value",n),t.appendChild(r)}function p(t){var e=y(t);e&&"OBJECT"==e.nodeName.toUpperCase()&&(J.ie?(e.style.display="none",function n(){if(4==e.readyState){for(var t in e)"function"==typeof e[t]&&(e[t]=null);e.parentNode.removeChild(e)}else setTimeout(n,10)}()):e.parentNode.removeChild(e))}function d(t){return t&&t.nodeType&&1===t.nodeType}function _(t){return d(t)?t.id:t}function y(t){if(d(t))return t;var e=null;try{e=M.getElementById(t)}catch(n){}return e}function v(t){return M.createElement(t)}function m(t){return parseInt(t,10)}function g(t,e,n){t.attachEvent(e,n),W[W.length]=[t,e,n]}function b(t){t+="";var e=J.pv,n=t.split(".");return n[0]=m(n[0]),n[1]=m(n[1])||0,n[2]=m(n[2])||0,e[0]>n[0]||e[0]==n[0]&&e[1]>n[1]||e[0]==n[0]&&e[1]==n[1]&&e[2]>=n[2]}function w(t,e,n,r){var i=M.getElementsByTagName("head")[0];if(i){var o="string"==typeof n?n:"screen";if(r&&(P=null,T=null),!P||T!=o){var s=v("style");s.setAttribute("type","text/css"),s.setAttribute("media",o),P=i.appendChild(s),J.ie&&typeof M.styleSheets!=S&&M.styleSheets.length>0&&(P=M.styleSheets[M.styleSheets.length-1]),T=o}P&&(typeof P.addRule!=S?P.addRule(t,e):typeof M.createTextNode!=S&&P.appendChild(M.createTextNode(t+" {"+e+"}")))}}function C(t,e){if(X){var n=e?"visible":"hidden",r=y(t);q&&r?r.style.visibility=n:"string"==typeof t&&w("#"+t,"visibility:"+n)}}function E(t){var e=/[\\\"<>\.;]/,n=null!=e.exec(t);return n&&typeof encodeURIComponent!=S?encodeURIComponent(t):t}var j,A,F,k,P,T,S="undefined",O="object",x="Shockwave Flash",R="ShockwaveFlash.ShockwaveFlash",V="application/x-shockwave-flash",I="SWFObjectExprInst",D="onreadystatechange",L=window,M=document,N=navigator,U=!1,B=[],H=[],$=[],W=[],q=!1,Q=!1,X=!0,z=!1,J=function(){var t=typeof M.getElementById!=S&&typeof M.getElementsByTagName!=S&&typeof M.createElement!=S,e=N.userAgent.toLowerCase(),n=N.platform.toLowerCase(),r=n?/win/.test(n):/win/.test(e),i=n?/mac/.test(n):/mac/.test(e),o=!!/webkit/.test(e)&&parseFloat(e.replace(/^.*webkit\/(\d+(\.\d+)?).*$/,"$1")),s="Microsoft Internet Explorer"===N.appName,a=[0,0,0],u=null;if(typeof N.plugins!=S&&typeof N.plugins[x]==O)u=N.plugins[x].description,u&&typeof N.mimeTypes!=S&&N.mimeTypes[V]&&N.mimeTypes[V].enabledPlugin&&(U=!0,s=!1,u=u.replace(/^.*\s+(\S+\s+\S+$)/,"$1"),a[0]=m(u.replace(/^(.*)\..*$/,"$1")),a[1]=m(u.replace(/^.*\.(.*)\s.*$/,"$1")),a[2]=/[a-zA-Z]/.test(u)?m(u.replace(/^.*[a-zA-Z]+(.*)$/,"$1")):0);else if(typeof L.ActiveXObject!=S)try{var l=new ActiveXObject(R);l&&(u=l.GetVariable("$version"),u&&(s=!0,u=u.split(" ")[1].split(","),a=[m(u[0]),m(u[1]),m(u[2])]))}catch(c){}return{w3:t,pv:a,wk:o,ie:s,win:r,mac:i}}();(function(){J.w3&&((typeof M.readyState!=S&&("complete"===M.readyState||"interactive"===M.readyState)||typeof M.readyState==S&&(M.getElementsByTagName("body")[0]||M.body))&&t(),q||(typeof M.addEventListener!=S&&M.addEventListener("DOMContentLoaded",t,!1),J.ie&&(M.attachEvent(D,function e(){"complete"==M.readyState&&(M.detachEvent(D,e),t())}),L==top&&!function n(){if(!q){try{M.documentElement.doScroll("left")}catch(e){return void setTimeout(n,0)}t()}}()),J.wk&&!function r(){if(!q)return/loaded|complete/.test(M.readyState)?void t():void setTimeout(r,0)}()))})();B[0]=function(){U?r():i()};(function(){J.ie&&window.attachEvent("onunload",function(){for(var t=W.length,e=0;e<t;e++)W[e][0].detachEvent(W[e][1],W[e][2]);for(var n=$.length,r=0;r<n;r++)p($[r]);for(var i in J)J[i]=null;J=null;for(var o in swfobject)swfobject[o]=null;swfobject=null})})();return{registerObject:function(t,e,n,r){if(J.w3&&t&&e){var i={};i.id=t,i.swfVersion=e,i.expressInstall=n,i.callbackFn=r,H[H.length]=i,C(t,!1)}else r&&r({success:!1,id:t})},getObjectById:function(t){if(J.w3)return o(t)},embedSWF:function(t,n,r,i,o,u,l,c,f,p){var d=_(n),y={success:!1,id:d};J.w3&&!(J.wk&&J.wk<312)&&t&&n&&r&&i&&o?(C(d,!1),e(function(){r+="",i+="";var e={};if(f&&typeof f===O)for(var _ in f)e[_]=f[_];e.data=t,e.width=r,e.height=i;var v={};if(c&&typeof c===O)for(var m in c)v[m]=c[m];if(l&&typeof l===O)for(var g in l)if(l.hasOwnProperty(g)){var w=z?encodeURIComponent(g):g,E=z?encodeURIComponent(l[g]):l[g];typeof v.flashvars!=S?v.flashvars+="&"+w+"="+E:v.flashvars=w+"="+E}if(b(o)){var j=h(e,v,n);e.id==d&&C(d,!0),y.success=!0,y.ref=j,y.id=j.id}else{if(u&&s())return e.data=u,void a(e,v,n,p);C(d,!0)}p&&p(y)})):p&&p(y)},switchOffAutoHideShow:function(){X=!1},enableUriEncoding:function(t){z=typeof t===S||t},ua:J,getFlashPlayerVersion:function(){return{major:J.pv[0],minor:J.pv[1],release:J.pv[2]}},hasFlashPlayerVersion:b,createSWF:function(t,e,n){return J.w3?h(t,e,n):undefined},showExpressInstall:function(t,e,n,r){J.w3&&s()&&a(t,e,n,r)},removeSWF:function(t){J.w3&&p(t)},createCSS:function(t,e,n,r){J.w3&&w(t,e,n,r)},addDomLoadEvent:e,addLoadEvent:n,getQueryParamValue:function(t){var e=M.location.search||M.location.hash;if(e){if(/\?/.test(e)&&(e=e.split("?")[1]),null==t)return E(e);for(var n=e.split("&"),r=0;r<n.length;r++)if(n[r].substring(0,n[r].indexOf("="))==t)return E(n[r].substring(n[r].indexOf("=")+1))}return""},expressInstallCallback:function(){if(Q){var t=y(I);t&&j&&(t.parentNode.replaceChild(j,t),A&&(C(A,!0),J.ie&&(j.style.display="block")),F&&F(k)),Q=!1}},version:"2.3"}}();EventManager.prototype.on=function(t,e){this.events[t+""]=this.events[t+""]||[],this.events[t+""].push(e)},EventManager.prototype.trigger=function(t,e){var n;if(this.events[t]&&this.events[t].length){if(n=this.events[t].length,1==n)return void this.events[t][0].call(null,e);if(n>1)for(var r=0;r<n;r++)this.events[t][r].call(null,e)}},Wrapper.prototype.wrap=function(t){var e=this.getConfig(t),n=new EventManager,r=this.width,i=this.height;return window.VpaidflashWrappers||(window.VpaidflashWrappers={}),window.VpaidflashWrappers[t]={},window.VpaidflashWrappers[t]={adLoadedClosure:function(){n.trigger("loaded"),window["SdkIntegration"+t].startAd()},adErrorClosure:function(){n.trigger("error")},adCompleteClosure:function(){n.trigger("complete")},pausedClosure:function(){n.trigger("paused")},resumedClosure:function(){n.trigger("resumed")},muteClosure:function(){n.trigger("mute")},unmuteClosure:function(){n.trigger("unmute")},impressionClosure:function(){n.trigger("impression")},adStartedClosure:function(){n.trigger("started")},startFlashWrapper:function(){n.trigger("ready");var o=window["SdkIntegration"+t];o.width=r,o.height=i,o.loadAd(e)}},n},Wrapper.prototype.getConfig=function(t){var e="window.VpaidflashWrappers["+t+"]";return JSON.stringify({impressionClosure:e+".impressionClosure",adCompleteClosure:e+".adCompleteClosure",adStartedClosure:e+".adStartedClosure",adLoadedClosure:e+".adLoadedClosure",adErrorClosure:e+".adErrorClosure",resumedClosure:e+".resumedClosure",pausedClosure:e+".pausedClosure",unmuteClosure:e+".unmuteClosure",muteClosure:e+".muteClosure",volume:1,width:this.width,height:this.height,vastUrl:this.getVastUrl()})},Wrapper.prototype.getVastUrl=function(){return this.configUrl||"//vast.videe.tv/vast-proxy/?aid="+this.aid+"&content_page_url="+this.host+"&player_height="+this.height+"&player_width="+this.width+"&sid="+this.sid+"&cb="+this.cd},FlashClient.prototype.init=function(t,e,n){if(t&&!this.checkUnitSource(t))throw new Error("unit not SWF");this.addWrapperEl(),this.initWrapper(n),this.embedSWF()},FlashClient.prototype.checkUnitSource=function(t){return t.indexOf(".swf")!=-1},FlashClient.prototype.embedSWF=function(){try{swfobject.embedSWF(this.unitSrc,this.sdkUnique,this.options.width,this.options.height,this.flashVersion,undefined,this.flashvars(),this.params,{})}catch(t){console.error(t)}},FlashClient.prototype.initEvents=function(){this.eventManager.on("ready",function(){this.VPAID=document.getElementById(this.sdkUnique),this.methodsState=!0}.bind(this))},FlashClient.prototype.initWrapper=function(t){try{this.eventManager=new Wrapper(this.options.aid,this.options.width,this.options.height,this.options.sid,t).wrap(this.id)}catch(e){console.error(e)}this.initEvents()},FlashClient.prototype.addWrapperEl=function(){var t=document.createElement("div");this.sdkUnique="SdkIntegration"+this.id,t.className="flash-blocker",t.innerHTML='<div id="'+this.sdkUnique+'"></div>',this.options.containerEl.appendChild(t)},FlashClient.prototype.flashvars=function(){return{onReady:"window.VpaidflashWrappers["+this.id+"].startFlashWrapper"}},JsClient.prototype.embed=function(){return[new Promise(function(t,e){this.iframe().addEventListener("load",function(){this.iFwindow=this.iframe().contentWindow,this.videoAdLayer().appendChild(this.videoTag()),this.iFwindow.document.body.appendChild(this.videoAdLayer()),this.iFwindow.document.body.appendChild(this.script()),this.iFwindow.document.body.style.margin=0,t()}.bind(this))}.bind(this)),new Promise(function(t,e){this.script().addEventListener("load",function(){t()},!1)}.bind(this))]},JsClient.prototype.init=function(t,e){if(!t||!e)throw new Error("Set correct options");if(!this.videoTag().canPlayType)throw new Error("HTML5 video not support");this.VpaidSource=t,this.configUrl=e,Promise.all(this.embed()).then(function(){this.VPAID=this.iFwindow.getVPAIDAd(),this.initVPAID()}.bind(this)).caught(function(t){console.error(t)}),this.options.containerEl.appendChild(this.iframe())},JsClient.prototype.initVPAID=function(){var t=this.eventManager;this.VPAID.subscribe(function(){this.VPAID.startAd(),t.trigger("loaded")}.bind(this),"AdLoaded"),this.VPAID.subscribe(function(){this.methodsState=!0,t.trigger("started")}.bind(this),"AdStarted"),this.VPAID.subscribe(function(){t.trigger("paused")},"AdPaused"),this.VPAID.subscribe(function(e){t.trigger("error",e)},"AdError"),this.VPAID.subscribe(function(){t.trigger("playing")},"AdPlaying"),this.VPAID.subscribe(function(){t.trigger("impression")},"AdImpression"),this.VPAID.subscribe(function(){t.trigger("stopped"),this.destroy()}.bind(this),"AdStopped"),
this.VPAID.subscribe(function(){t.trigger("resize")},"AdSizeChange"),this.VPAID.subscribe(function(){t.trigger("complete"),this.VPAID.stopAd()}.bind(this),"AdVideoComplete"),this.VPAID.handshakeVersion(2),this.VPAID.initAd(this.options.width,this.options.height,"normal",0,this.configUrl,{videoSlotCanAutoPlay:!0,videoSlot:this.videoTag(),slot:this.videoAdLayer()})},JsClient.prototype.videoTag=function(){return this._videoTag?this._videoTag:(this._videoTag=document.createElement("video"),this._videoTag.setAttribute("width","100%"),this._videoTag.setAttribute("height","100%"),this._videoTag.style.position="absolute",this._videoTag)},JsClient.prototype.videoAdLayer=function(){return this._videoAdLayer?this._videoAdLayer:(this._videoAdLayer=document.createElement("div"),this._videoAdLayer.setAttribute("width",this.options.width),this._videoAdLayer.setAttribute("height",this.options.height),this._videoAdLayer)},JsClient.prototype.script=function(){return this._scriptTag?this._scriptTag:(this._scriptTag=document.createElement("script"),this._scriptTag.setAttribute("type","text/javascript"),this._scriptTag.setAttribute("src",this.VpaidSource),this._scriptTag.setAttribute("async",""),this._scriptTag)},JsClient.prototype.iframe=function(){return this._iFrame?this._iFrame:(this._iFrame=document.createElement("iFrame"),this._iFrame.setAttribute("allowfullscreen","true"),this._iFrame.src="about:blank",this._iFrame.width=this.options.width,this._iFrame.height=this.options.height,this._iFrame.style.border="none",this._iFrame)},JsClient.prototype.destroy=function(){delete this.VPAID,this._iFrame.parentNode.removeChild(this._iFrame),delete this._videoAdLayer,delete this._scriptTag,delete this._videoTag,delete this._iFrame},Outstream.prototype.parseAndSaveConfig=function(t){function e(){try{var e=new DOMParser}catch(n){}if(e)return e.parseFromString(t,"text/xml");var r=new ActiveXObject("Microsoft.XMLDOM");if(r.loadXML(t),0!=r.parseError.errorCode){var i=r.parseError;return void console.error("You have error "+i.reason)}return r}t=e(),this.VpaidSource=t.getElementsByTagName("MediaFile")[0].childNodes[0].nodeValue,this.configUrl=t.getElementsByTagName("AdParameters")[0].childNodes[0].nodeValue},Outstream.prototype.loadConfig=function(){var t=this.getConfigUrl();return new Promise(function(e){try{var n=new XDomainRequest}catch(r){}if(XMLHttpRequest&&!n){var i=new XMLHttpRequest;i.onreadystatechange=function(){4==i.readyState&&200==i.status&&e(i.responseText)},i.open("GET",t,!0),i.send()}else n.onload=function(){e(n.responseText)},n.open("get",t,!0),setTimeout(function(){n.send()},0)})},Outstream.prototype.options=function(t){function e(){return Array.isArray(t.VPAIDMode)&&t.VPAIDMode.length?t.VPAIDMode:["flash","js"]}return this._options||!t?this._options:"object"!=typeof t?void console.error("Please set correct options"):(t.VPAIDMode=e(),this._options=t)},Outstream.prototype.init=function(){this.createVPAID(),this.loadConfig().then(function(t){this.parseAndSaveConfig(t),this.initVPAID()}.bind(this)).caught(function(t){console.error(t),this.initVPAID()}.bind(this))},Outstream.prototype.initVPAID=function(){try{this.VPAIDClient.init(this.VpaidSource,this.configUrl,this.getConfigUrl())}catch(t){var e=this.options().VPAIDMode,n=e.indexOf(this.mode);return void(n!=-1&&(e.splice(n,1),console.log("Switch VPAIdType , ERROR: "+t.message),this.init()))}this.initEventListener(this.VPAIDClient.eventManager)},Outstream.prototype.getConfigUrl=function(){var t=this.options().isSSP?"vast.vertamedia.com/":"vast.videe.tv/",e="//"+t+"?aid="+this.options().aid+"&content_page_url="+encodeURIComponent(window.location.href!=window.parent.location.href?document.referrer:window.location.href)+"&player_width="+this.options().width+"&player_height="+this.options().height+"&cd="+(new Date).getTime();return"js"==this.mode&&(e+="&vpaid_type=2"),e},Outstream.prototype.createVPAID=function(){var t=this.options().VPAIDMode;for(var e in t)if(this.useMode(t[e]))return void(this.mode=t[e])},Outstream.prototype.useMode=function(t){var e={flash:function(t){return new FlashClient(t)},js:function(t){return new JsClient(t)}};t=t in e?t:"flash";try{this.VPAIDClient=new e[t](this.options())}catch(n){return console.error(t+" init ERROR: "+n),!1}return!!this.VPAIDClient},Outstream.prototype.initEventListener=function(t){function e(e){t.on(e,function(t){n.trigger(e,t)})}var n=this,r=this.VPAIDClient.proxyEvents;for(var i in r)e(r[i])},Outstream.prototype.on=function(t,e){return this.events[t+""]=this.events[t+""]||[],this.events[t+""].push(e),this},Outstream.prototype.off=function(t){return delete this.events[t+""],this},Outstream.prototype.trigger=function(t,e){var n;if(this.events[t]&&this.events[t].length){if(n=this.events[t].length,1==n)return void this.events[t][0].call(null,e);if(n>1)for(var r=0;r<n;r++)this.events[t][r].call(null,e)}},Outstream.prototype.destroy=function(){this.options.containerEl.innerHTML=""},Outstream.prototype.callMethod=function(t,e){return t="flash"==this.mode?"videe_"+t:t,this.isVPAIDReady()?this.VPAIDClient.VPAID[t](e):void this.on("started",function(){this.VPAIDClient.VPAID[t](e)}.bind(this))},Outstream.prototype.startAd=function(){return this.callMethod("startAd"),this},Outstream.prototype.stopAd=function(){return this.callMethod("stopAd"),this},Outstream.prototype.skipAd=function(){return this.callMethod("skipAd"),this},Outstream.prototype.mute=function(){function t(){var t="flash"==this.mode?"videe_getAdVolume":"getAdVolume";this.savedVolume=this.VPAIDClient.VPAID[t](),t="flash"==this.mode?"videe_setAdVolume":"setAdVolume",this.VPAIDClient.VPAID[t](0)}return this.isVPAIDReady()?void t.call(this):(this.on("started",function(){t.call(this)}.bind(this)),this)},Outstream.prototype.unmute=function(){return this.callMethod("setAdVolume",this.savedVolume||1),this},Outstream.prototype.setAdVolume=function(t){if("number"==typeof t&&t==t)return this.callMethod("setAdVolume",t),this},Outstream.prototype.getAdVolume=function(){return this.callMethod("getAdVolume")},Outstream.prototype.pauseAd=function(){return this.callMethod("pauseAd"),this},Outstream.prototype.resumeAd=function(){return this.callMethod("resumeAd"),this},Outstream.prototype.isVPAIDReady=function(){return this.VPAIDClient&&this.VPAIDClient.methodsState&&this.VPAIDClient.VPAID},Outstream.prototype.resizeAd=function(){var t=Array.prototype.slice.call(arguments),e="flash"==this.mode?"videe_resizeAd":"resizeAd";return this.isVPAIDReady()?(this.VPAIDClient.VPAID[e].apply(null,t),this):(this.on("started",function(){this.VPAIDClient.VPAID[e].apply(null,t)}.bind(this)),this)};var root=root||window;root.Outstream=Outstream;var onload=function(){function t(t){new Outstream({aid:t.aid,isSSP:t.isSSP,VPAIDMode:t.VPAIDMode,width:e(t.width)?400:t.width,height:e(t.height)?300:t.height,containerEl:t.containerEl})}function e(t){return t!=t}function n(t){var e=document.createElement("div"),n=t.parentNode;return"HEAD"==n.tagName.toUpperCase()?(document.body.appendChild(e),e):(n.insertBefore(e,t),e)}var r={number:function(t,e){var n=this.parse(t,e);return parseInt(n)},array:function(t,e){var n=this.parse(t,e);return n?n.split(" "):n},bool:function(t,e){var n=this.parse(t,e);try{n=JSON.parse(n)}catch(r){n=!1}return!!n},parse:function(t,e){var n;try{n=t.getAttribute("data-outstream-"+e)}catch(r){return undefined}return n}};!function(){var i=document.getElementsByTagName("script");for(var o in i){var s=r.number(i[o],"aid");s&&!e(s)&&t({width:r.number(i[o],"width"),height:r.number(i[o],"height"),isSSP:r.bool(i[o],"SSP"),VPAIDMode:r.array(i[o],"mode"),aid:s,containerEl:n(i[o])})}}()};window!==top?onload():window.onload=onload}(window);
//# sourceMappingURL=data:application/json;base64,

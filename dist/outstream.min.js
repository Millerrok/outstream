!function(root,undefined){function EventManager(){this.events={}}function Outstream(e){return e?(this.options(e||{}),this.events={},void this.init()):void console.error("Create without options")}function FlashClient(e){if(!getFlashVersion())throw new Error("Flash Player not installed!");this.eventManager,this.sdkUnique=null,this.id=Math.round((new Date).getTime()/1e4+1e7*Math.random()),this.unitSrc="//player.videe.tv/v2.1/resources/libs/videejs-player.swf",this.flashVersion="10.0.0",this.params={allowScriptAccess:"always",allowFullScreen:"true",wmode:"transparent"},this.proxyEvents=["loaded","error","complete","started","resumed","paused","mute","unmute"],this.options=e}function Wrapper(e,t,n,r,i){if(!e)throw new Error("Set aid");this.host=encodeURIComponent(window.location.host),this.cd=(new Date).getTime(),this.height=n||300,this.width=t||400,this.sid=r||0,this.aid=e,this.configUrl=i}function JsClient(e){this.options=e,this.eventManager=new EventManager,this.proxyEvents=["loaded","error","complete","started","paused"]}var root=root||window;root.console||(root.console={log:function(e){},error:function(e){}}),root.JSON||(root.JSON={parse:function(sJSON){return eval("("+sJSON+")")},stringify:function(){var e=Object.prototype.toString,t=Array.isArray||function(t){return"[object Array]"===e.call(t)},n={'"':'\\"',"\\":"\\\\","\b":"\\b","\f":"\\f","\n":"\\n","\r":"\\r","	":"\\t"},r=function(e){return n[e]||"\\u"+(e.charCodeAt(0)+65536).toString(16).substr(1)},i=/[\\"\u0000-\u001F\u2028\u2029]/g;return function o(n){if(null==n)return"null";if("number"==typeof n)return isFinite(n)?n.toString():"null";if("boolean"==typeof n)return n.toString();if("object"==typeof n){if("function"==typeof n.toJSON)return o(n.toJSON());if(t(n)){for(var s="[",a=0;a<n.length;a++)s+=(a?", ":"")+o(n[a]);return s+"]"}if("[object Object]"===e.call(n)){var u=[];for(var c in n)n.hasOwnProperty(c)&&u.push(o(c)+": "+o(n[c]));return"{"+u.join(", ")+"}"}}return'"'+n.toString().replace(i,r)+'"'}}()}),Object.keys||(Object.keys=function(){"use strict";var e=Object.prototype.hasOwnProperty,t=!{toString:null}.propertyIsEnumerable("toString"),n=["toString","toLocaleString","valueOf","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","constructor"],r=n.length;return function(i){if("object"!=typeof i&&("function"!=typeof i||null===i))throw new TypeError("Object.keys called on non-object");var o,s,a=[];for(o in i)e.call(i,o)&&a.push(o);if(t)for(s=0;r>s;s++)e.call(i,n[s])&&a.push(n[s]);return a}}()),Array.isArray||(Array.isArray=function(e){return"[object Array]"===Object.prototype.toString.call(e)}),Function.prototype.bind||(Function.prototype.bind=function(e){if("function"!=typeof this)throw new TypeError("Function.prototype.bind - what is trying to be bound is not callable");var t=Array.prototype.slice.call(arguments,1),n=this,r=function(){},i=function(){return n.apply(this instanceof r?this:e,t.concat(Array.prototype.slice.call(arguments)))};return this.prototype&&(r.prototype=this.prototype),i.prototype=new r,i}),Array.prototype.indexOf||(Array.prototype.indexOf=function(e,t){var n;if(null==this)throw new TypeError('"this" is null or not defined');var r=Object(this),i=r.length>>>0;if(0===i)return-1;var o=+t||0;if(Math.abs(o)===1/0&&(o=0),o>=i)return-1;for(n=Math.max(o>=0?o:i-Math.abs(o),0);i>n;){if(n in r&&r[n]===e)return n;n++}return-1}),EventManager.prototype.on=function(e,t){this.events[e+""]=t},EventManager.prototype.trigger=function(e,t){var n=this.events[e];n&&n.call(null,t)},window.onload=function(){function e(e){new Outstream({aid:e.aid,isSSP:e.isSSP,VPAIDMode:e.VPAIDMode,width:t(e.width)?400:e.width,height:t(e.height)?300:e.height,containerEl:e.containerEl})}function t(e){return e!=e}function n(e){var t=document.createElement("div"),n=e.parentNode;return"HEAD"==n.tagName.toUpperCase()?(document.body.appendChild(t),t):(n.insertBefore(t,e),t)}var r={number:function(e,t){var n=this.parse(e,t);return parseInt(n)},array:function(e,t){var n=this.parse(e,t);return n?n.split(" "):n},bool:function(e,t){var n=this.parse(e,t);try{n=JSON.parse(n)}catch(r){n=!1}return!!n},parse:function(e,t){var n;try{n=e.getAttribute("data-outstream-"+t)}catch(r){return undefined}return n}};!function(){var i=document.getElementsByTagName("script");for(var o in i){var s=r.number(i[o],"aid");s&&!t(s)&&e({width:r.number(i[o],"width"),height:r.number(i[o],"height"),isSSP:r.bool(i[o],"SSP"),VPAIDMode:r.array(i[o],"mode"),aid:s,containerEl:n(i[o])})}}()},Outstream.prototype.parseAndSaveConfig=function(e){function t(){try{var t=new DOMParser}catch(n){}if(t)return t.parseFromString(e,"text/xml");var r=new ActiveXObject("Microsoft.XMLDOM");if(r.loadXML(e),0!=r.parseError.errorCode){var i=r.parseError;return void console.error("You have error "+i.reason)}return r}e=t(),this.VpaidSource=e.getElementsByTagName("MediaFile")[0].childNodes[0].nodeValue,this.configUrl=e.getElementsByTagName("AdParameters")[0].childNodes[0].nodeValue},Outstream.prototype.loadConfig=function(){var e=this.getConfigUrl();return new Promise(function(t,n){try{var r=new XDomainRequest}catch(i){}if(XMLHttpRequest&&!r){var o=new XMLHttpRequest;o.onreadystatechange=function(){4==o.readyState&&200==o.status&&t(o.responseText)},o.open("GET",e,!0),o.send()}else r.onload=function(){t(r.responseText)},r.open("get",e,!0),setTimeout(function(){r.send()},0)})},Outstream.prototype.options=function(e){function t(){return Array.isArray(e.VPAIDMode)&&e.VPAIDMode.length?e.VPAIDMode:["flash","js"]}return this._options||!e?this._options:"object"!=typeof e?void console.error("Please set correct options"):(e.VPAIDMode=t(),this._options=e)},Outstream.prototype.init=function(){this.createVPAID(),this.loadConfig().then(function(e){this.parseAndSaveConfig(e),this.initVPAID()}.bind(this)).caught(function(e){console.error(e),this.initVPAID()}.bind(this))},Outstream.prototype.initVPAID=function(){try{this.VPAID.init(this.VpaidSource,this.configUrl,this.getConfigUrl())}catch(e){var t=this.options().VPAIDMode,n=t.indexOf(this.mode);return void(-1!=n&&(t.splice(n,1),console.log("Switch VPAIdType , ERROR: "+e.message),this.init()))}this.initEventListener(this.VPAID.eventManager)},Outstream.prototype.getConfigUrl=function(){var e=this.options().isSSP?"vast.vertamedia.com/":"vast.videe.tv/",t="//"+e+"?aid="+this.options().aid+"&content_page_url="+encodeURIComponent(window.location.href)+"&player_width="+this.options().width+"&player_height="+this.options().height+"&cd="+(new Date).getTime();return"js"==this.mode&&(t+="&vpaid_type=2"),t},Outstream.prototype.createVPAID=function(){var e=this.options().VPAIDMode;for(var t in e)if(this.useMode(e[t]))return void(this.mode=e[t])},Outstream.prototype.useMode=function(e){var t={flash:function(e){return new FlashClient(e)},js:function(e){return new JsClient(e)}};e=e in t?e:"flash";try{this.VPAID=new t[e](this.options())}catch(n){return console.error(e+" init ERROR: "+n),!1}return!!this.VPAID},Outstream.prototype.initEventListener=function(e){function t(t){e.on(t,function(e){n.trigger(t,e)})}var n=this,r=this.VPAID.proxyEvents;for(var i in r)t(r[i])},Outstream.prototype.on=function(e,t){return this.events[e+""]=t,this},Outstream.prototype.off=function(e){return delete this.events[e+""],this},Outstream.prototype.trigger=function(e,t){var n=this.events[e];n&&n.call(this,t)},Outstream.prototype.destroy=function(){this.options.containerEl.innerHTML=""};var root=root||window;root.Outstream=Outstream,!function(e){if("object"==typeof exports&&"undefined"!=typeof module)module.exports=e();else if("function"==typeof define&&define.amd)define([],e);else{var t;"undefined"!=typeof window?t=window:"undefined"!=typeof global?t=global:"undefined"!=typeof self&&(t=self),t.Promise=e()}}(function(){var e,t,n;return function r(e,t,n){function i(s,a){if(!t[s]){if(!e[s]){var u="function"==typeof _dereq_&&_dereq_;if(!a&&u)return u(s,!0);if(o)return o(s,!0);var c=new Error("Cannot find module '"+s+"'");throw c.code="MODULE_NOT_FOUND",c}var l=t[s]={exports:{}};e[s][0].call(l.exports,function(t){var n=e[s][1][t];return i(n?n:t)},l,l.exports,r,e,t,n)}return t[s].exports}for(var o="function"==typeof _dereq_&&_dereq_,s=0;s<n.length;s++)i(n[s]);return i}({1:[function(e,t,n){"use strict";t.exports=function(e){function t(e){var t=new n(e),r=t.promise();return t.setHowMany(1),t.setUnwrap(),t.init(),r}var n=e._SomePromiseArray;e.any=function(e){return t(e)},e.prototype.any=function(){return t(this)}}},{}],2:[function(e,t,n){"use strict";function r(){this._customScheduler=!1,this._isTickUsed=!1,this._lateQueue=new l(16),this._normalQueue=new l(16),this._haveDrainedQueues=!1,this._trampolineEnabled=!0;var e=this;this.drainQueues=function(){e._drainQueues()},this._schedule=c}function i(e,t,n){this._lateQueue.push(e,t,n),this._queueTick()}function o(e,t,n){this._normalQueue.push(e,t,n),this._queueTick()}function s(e){this._normalQueue._pushOne(e),this._queueTick()}var a;try{throw new Error}catch(u){a=u}var c=e("./schedule"),l=e("./queue"),f=e("./util");r.prototype.setScheduler=function(e){var t=this._schedule;return this._schedule=e,this._customScheduler=!0,t},r.prototype.hasCustomScheduler=function(){return this._customScheduler},r.prototype.enableTrampoline=function(){this._trampolineEnabled=!0},r.prototype.disableTrampolineIfNecessary=function(){f.hasDevTools&&(this._trampolineEnabled=!1)},r.prototype.haveItemsQueued=function(){return this._isTickUsed||this._haveDrainedQueues},r.prototype.fatalError=function(e,t){t?(process.stderr.write("Fatal "+(e instanceof Error?e.stack:e)+"\n"),process.exit(2)):this.throwLater(e)},r.prototype.throwLater=function(e,t){if(1===arguments.length&&(t=e,e=function(){throw t}),"undefined"!=typeof setTimeout)setTimeout(function(){e(t)},0);else try{this._schedule(function(){e(t)})}catch(n){throw new Error("No async scheduler available\n\n    See http://goo.gl/MqrFmX\n")}},f.hasDevTools?(r.prototype.invokeLater=function(e,t,n){this._trampolineEnabled?i.call(this,e,t,n):this._schedule(function(){setTimeout(function(){e.call(t,n)},100)})},r.prototype.invoke=function(e,t,n){this._trampolineEnabled?o.call(this,e,t,n):this._schedule(function(){e.call(t,n)})},r.prototype.settlePromises=function(e){this._trampolineEnabled?s.call(this,e):this._schedule(function(){e._settlePromises()})}):(r.prototype.invokeLater=i,r.prototype.invoke=o,r.prototype.settlePromises=s),r.prototype.invokeFirst=function(e,t,n){this._normalQueue.unshift(e,t,n),this._queueTick()},r.prototype._drainQueue=function(e){for(;e.length()>0;){var t=e.shift();if("function"==typeof t){var n=e.shift(),r=e.shift();t.call(n,r)}else t._settlePromises()}},r.prototype._drainQueues=function(){this._drainQueue(this._normalQueue),this._reset(),this._haveDrainedQueues=!0,this._drainQueue(this._lateQueue)},r.prototype._queueTick=function(){this._isTickUsed||(this._isTickUsed=!0,this._schedule(this.drainQueues))},r.prototype._reset=function(){this._isTickUsed=!1},t.exports=r,t.exports.firstLineError=a},{"./queue":26,"./schedule":29,"./util":36}],3:[function(e,t,n){"use strict";t.exports=function(e,t,n,r){var i=!1,o=function(e,t){this._reject(t)},s=function(e,t){t.promiseRejectionQueued=!0,t.bindingPromise._then(o,o,null,this,e)},a=function(e,t){0===(50397184&this._bitField)&&this._resolveCallback(t.target)},u=function(e,t){t.promiseRejectionQueued||this._reject(e)};e.prototype.bind=function(o){i||(i=!0,e.prototype._propagateFrom=r.propagateFromFunction(),e.prototype._boundValue=r.boundValueFunction());var c=n(o),l=new e(t);l._propagateFrom(this,1);var f=this._target();if(l._setBoundTo(c),c instanceof e){var p={promiseRejectionQueued:!1,promise:l,target:f,bindingPromise:c};f._then(t,s,undefined,l,p),c._then(a,u,undefined,l,p),l._setOnCancel(c)}else l._resolveCallback(f);return l},e.prototype._setBoundTo=function(e){e!==undefined?(this._bitField=2097152|this._bitField,this._boundTo=e):this._bitField=-2097153&this._bitField},e.prototype._isBound=function(){return 2097152===(2097152&this._bitField)},e.bind=function(t,n){return e.resolve(n).bind(t)}}},{}],4:[function(e,t,n){"use strict";function r(){try{Promise===o&&(Promise=i)}catch(e){}return o}var i;"undefined"!=typeof Promise&&(i=Promise);var o=e("./promise")();o.noConflict=r,t.exports=o},{"./promise":22}],5:[function(e,t,n){"use strict";var r=Object.create;if(r){var i=r(null),o=r(null);i[" size"]=o[" size"]=0}t.exports=function(t){function n(e,n){var r;if(null!=e&&(r=e[n]),"function"!=typeof r){var i="Object "+a.classString(e)+" has no method '"+a.toString(n)+"'";throw new t.TypeError(i)}return r}function r(e){var t=this.pop(),r=n(e,t);return r.apply(e,this)}function i(e){return e[this]}function o(e){var t=+this;return 0>t&&(t=Math.max(0,t+e.length)),e[t]}var s,a=e("./util"),u=a.canEvaluate;a.isIdentifier;t.prototype.call=function(e){var t=[].slice.call(arguments,1);return t.push(e),this._then(r,undefined,undefined,t,undefined)},t.prototype.get=function(e){var t,n="number"==typeof e;if(n)t=o;else if(u){var r=s(e);t=null!==r?r:i}else t=i;return this._then(t,undefined,undefined,e,undefined)}}},{"./util":36}],6:[function(e,t,n){"use strict";t.exports=function(t,n,r,i){var o=e("./util"),s=o.tryCatch,a=o.errorObj,u=t._async;t.prototype["break"]=t.prototype.cancel=function(){if(!i.cancellation())return this._warn("cancellation is disabled");for(var e=this,t=e;e.isCancellable();){if(!e._cancelBy(t)){t._isFollowing()?t._followee().cancel():t._cancelBranched();break}var n=e._cancellationParent;if(null==n||!n.isCancellable()){e._isFollowing()?e._followee().cancel():e._cancelBranched();break}e._isFollowing()&&e._followee().cancel(),t=e,e=n}},t.prototype._branchHasCancelled=function(){this._branchesRemainingToCancel--},t.prototype._enoughBranchesHaveCancelled=function(){return this._branchesRemainingToCancel===undefined||this._branchesRemainingToCancel<=0},t.prototype._cancelBy=function(e){return e===this?(this._branchesRemainingToCancel=0,this._invokeOnCancel(),!0):(this._branchHasCancelled(),this._enoughBranchesHaveCancelled()?(this._invokeOnCancel(),!0):!1)},t.prototype._cancelBranched=function(){this._enoughBranchesHaveCancelled()&&this._cancel()},t.prototype._cancel=function(){this.isCancellable()&&(this._setCancelled(),u.invoke(this._cancelPromises,this,undefined))},t.prototype._cancelPromises=function(){this._length()>0&&this._settlePromises()},t.prototype._unsetOnCancel=function(){this._onCancelField=undefined},t.prototype.isCancellable=function(){return this.isPending()&&!this.isCancelled()},t.prototype._doInvokeOnCancel=function(e,t){if(o.isArray(e))for(var n=0;n<e.length;++n)this._doInvokeOnCancel(e[n],t);else if(e!==undefined)if("function"==typeof e){if(!t){var r=s(e).call(this._boundValue());r===a&&(this._attachExtraTrace(r.e),u.throwLater(r.e))}}else e._resultCancelled(this)},t.prototype._invokeOnCancel=function(){var e=this._onCancel();this._unsetOnCancel(),u.invoke(this._doInvokeOnCancel,this,e)},t.prototype._invokeInternalOnCancel=function(){this.isCancellable()&&(this._doInvokeOnCancel(this._onCancel(),!0),this._unsetOnCancel())},t.prototype._resultCancelled=function(){this.cancel()}}},{"./util":36}],7:[function(e,t,n){"use strict";t.exports=function(t){function n(e,n,a){return function(u){var c=a._boundValue();e:for(var l=0;l<e.length;++l){var f=e[l];if(f===Error||null!=f&&f.prototype instanceof Error){if(u instanceof f)return o(n).call(c,u)}else if("function"==typeof f){var p=o(f).call(c,u);if(p===s)return p;if(p)return o(n).call(c,u)}else if(r.isObject(u)){for(var h=i(f),d=0;d<h.length;++d){var _=h[d];if(f[_]!=u[_])continue e}return o(n).call(c,u)}}return t}}var r=e("./util"),i=e("./es5").keys,o=r.tryCatch,s=r.errorObj;return n}},{"./es5":13,"./util":36}],8:[function(e,t,n){"use strict";t.exports=function(e){function t(){this._trace=new t.CapturedTrace(r())}function n(){return i?new t:void 0}function r(){var e=o.length-1;return e>=0?o[e]:undefined}var i=!1,o=[];return e.prototype._promiseCreated=function(){},e.prototype._pushContext=function(){},e.prototype._popContext=function(){return null},e._peekContext=e.prototype._peekContext=function(){},t.prototype._pushContext=function(){this._trace!==undefined&&(this._trace._promiseCreated=null,o.push(this._trace))},t.prototype._popContext=function(){if(this._trace!==undefined){var e=o.pop(),t=e._promiseCreated;return e._promiseCreated=null,t}return null},t.CapturedTrace=null,t.create=n,t.deactivateLongStackTraces=function(){},t.activateLongStackTraces=function(){var n=e.prototype._pushContext,o=e.prototype._popContext,s=e._peekContext,a=e.prototype._peekContext,u=e.prototype._promiseCreated;t.deactivateLongStackTraces=function(){e.prototype._pushContext=n,e.prototype._popContext=o,e._peekContext=s,e.prototype._peekContext=a,e.prototype._promiseCreated=u,i=!1},i=!0,e.prototype._pushContext=t.prototype._pushContext,e.prototype._popContext=t.prototype._popContext,e._peekContext=e.prototype._peekContext=r,e.prototype._promiseCreated=function(){var e=this._peekContext();e&&null==e._promiseCreated&&(e._promiseCreated=this)}},t}},{}],9:[function(e,t,n){"use strict";t.exports=function(t,n){function r(e,t){return{promise:t}}function i(){return!1}function o(e,t,n){var r=this;try{e(t,n,function(e){if("function"!=typeof e)throw new TypeError("onCancel must be a function, got: "+N.toString(e));r._attachCancellationCallback(e)})}catch(i){return i}}function s(e){if(!this.isCancellable())return this;var t=this._onCancel();t!==undefined?N.isArray(t)?t.push(e):this._setOnCancel([t,e]):this._setOnCancel(e)}function a(){return this._onCancelField}function u(e){this._onCancelField=e}function c(){this._cancellationParent=undefined,this._onCancelField=undefined}function l(e,t){if(0!==(1&t)){this._cancellationParent=e;var n=e._branchesRemainingToCancel;n===undefined&&(n=0),e._branchesRemainingToCancel=n+1}0!==(2&t)&&e._isBound()&&this._setBoundTo(e._boundTo)}function f(e,t){0!==(2&t)&&e._isBound()&&this._setBoundTo(e._boundTo)}function p(){var e=this._boundTo;return e!==undefined&&e instanceof t?e.isFulfilled()?e.value():undefined:e}function h(){this._trace=new x(this._peekContext())}function d(e,t){if(M(e)){var n=this._trace;if(n!==undefined&&t&&(n=n._parent),n!==undefined)n.attachExtraTrace(e);else if(!e.__stackCleaned__){var r=E(e);N.notEnumerableProp(e,"stack",r.message+"\n"+r.stack.join("\n")),N.notEnumerableProp(e,"__stackCleaned__",!0)}}}function _(e,t,n,r,i){if(e===undefined&&null!==t&&X){if(i!==undefined&&i._returnedNonUndefined())return;if(0===(65535&r._bitField))return;n&&(n+=" ");var o="a promise was created in a "+n+"handler but was not returned from it";r._warn(o,!0,t)}}function y(e,t){var n=e+" is deprecated and will be removed in a future version.";return t&&(n+=" Use "+t+" instead."),v(n)}function v(e,n,r){if(re.warnings){var i,o=new L(e);if(n)r._attachExtraTrace(o);else if(re.longStackTraces&&(i=t._peekContext()))i.attachExtraTrace(o);else{var s=E(o);o.stack=s.message+"\n"+s.stack.join("\n")}Y("warning",o)||j(o,"",!0)}}function g(e,t){for(var n=0;n<t.length-1;++n)t[n].push("From previous event:"),t[n]=t[n].join("\n");return n<t.length&&(t[n]=t[n].join("\n")),e+"\n"+t.join("\n")}function m(e){for(var t=0;t<e.length;++t)(0===e[t].length||t+1<e.length&&e[t][0]===e[t+1][0])&&(e.splice(t,1),t--)}function b(e){for(var t=e[0],n=1;n<e.length;++n){for(var r=e[n],i=t.length-1,o=t[i],s=-1,a=r.length-1;a>=0;--a)if(r[a]===o){s=a;break}for(var a=s;a>=0;--a){var u=r[a];if(t[i]!==u)break;t.pop(),i--}t=r}}function w(e){for(var t=[],n=0;n<e.length;++n){var r=e[n],i="    (No stack trace)"===r||H.test(r),o=i&&ee(r);i&&!o&&($&&" "!==r.charAt(0)&&(r="    "+r),t.push(r))}return t}function C(e){for(var t=e.stack.replace(/\s+$/g,"").split("\n"),n=0;n<t.length;++n){var r=t[n];if("    (No stack trace)"===r||H.test(r))break}return n>0&&(t=t.slice(n)),t}function E(e){var t=e.stack,n=e.toString();return t="string"==typeof t&&t.length>0?C(e):["    (No stack trace)"],{message:n,stack:w(t)}}function j(e,t,n){if("undefined"!=typeof console){var r;if(N.isObject(e)){var i=e.stack;r=t+B(i,e)}else r=t+String(e);"function"==typeof V?V(r,n):"function"!=typeof console.log&&"object"!=typeof console.log||console.log(r)}}function F(e,t,n,r){var i=!1;try{"function"==typeof t&&(i=!0,"rejectionHandled"===e?t(r):t(n,r))}catch(o){D.throwLater(o)}"unhandledRejection"===e?Y(e,n,r)||i||j(n,"Unhandled rejection "):Y(e,r)}function k(e){var t;if("function"==typeof e)t="[function "+(e.name||"anonymous")+"]";else{t=e&&"function"==typeof e.toString?e.toString():N.toString(e);var n=/\[object [a-zA-Z0-9$_]+\]/;if(n.test(t))try{var r=JSON.stringify(e);t=r}catch(i){}0===t.length&&(t="(empty array)")}return"(<"+T(t)+">, no stack trace)"}function T(e){var t=41;return e.length<t?e:e.substr(0,t-3)+"..."}function S(){return"function"==typeof ne}function A(e){var t=e.match(te);return t?{fileName:t[1],line:parseInt(t[2],10)}:void 0}function P(e,t){if(S()){for(var n,r,i=e.stack.split("\n"),o=t.stack.split("\n"),s=-1,a=-1,u=0;u<i.length;++u){var c=A(i[u]);if(c){n=c.fileName,s=c.line;break}}for(var u=0;u<o.length;++u){var c=A(o[u]);if(c){r=c.fileName,a=c.line;break}}0>s||0>a||!n||!r||n!==r||s>=a||(ee=function(e){if(U.test(e))return!0;var t=A(e);return!!(t&&t.fileName===n&&s<=t.line&&t.line<=a)})}}function x(e){this._parent=e,this._promisesCreated=0;var t=this._length=1+(e===undefined?0:e._length);ne(this,x),t>32&&this.uncycle()}var O,R,V,I=t._getDomain,D=t._async,L=e("./errors").Warning,N=e("./util"),M=N.canAttachTrace,U=/[\\\/]bluebird[\\\/]js[\\\/](release|debug|instrumented)/,H=null,B=null,$=!1,W=!(0==N.env("BLUEBIRD_DEBUG")),q=!(0==N.env("BLUEBIRD_WARNINGS")||!W&&!N.env("BLUEBIRD_WARNINGS")),Q=!(0==N.env("BLUEBIRD_LONG_STACK_TRACES")||!W&&!N.env("BLUEBIRD_LONG_STACK_TRACES")),X=0!=N.env("BLUEBIRD_W_FORGOTTEN_RETURN")&&(q||!!N.env("BLUEBIRD_W_FORGOTTEN_RETURN"));t.prototype.suppressUnhandledRejections=function(){var e=this._target();e._bitField=-1048577&e._bitField|524288},t.prototype._ensurePossibleRejectionHandled=function(){0===(524288&this._bitField)&&(this._setRejectionIsUnhandled(),D.invokeLater(this._notifyUnhandledRejection,this,undefined))},t.prototype._notifyUnhandledRejectionIsHandled=function(){F("rejectionHandled",O,undefined,this)},t.prototype._setReturnedNonUndefined=function(){this._bitField=268435456|this._bitField},t.prototype._returnedNonUndefined=function(){return 0!==(268435456&this._bitField)},t.prototype._notifyUnhandledRejection=function(){if(this._isRejectionUnhandled()){var e=this._settledValue();this._setUnhandledRejectionIsNotified(),F("unhandledRejection",R,e,this)}},t.prototype._setUnhandledRejectionIsNotified=function(){this._bitField=262144|this._bitField},t.prototype._unsetUnhandledRejectionIsNotified=function(){this._bitField=-262145&this._bitField},t.prototype._isUnhandledRejectionNotified=function(){return(262144&this._bitField)>0},t.prototype._setRejectionIsUnhandled=function(){this._bitField=1048576|this._bitField},t.prototype._unsetRejectionIsUnhandled=function(){this._bitField=-1048577&this._bitField,this._isUnhandledRejectionNotified()&&(this._unsetUnhandledRejectionIsNotified(),this._notifyUnhandledRejectionIsHandled())},t.prototype._isRejectionUnhandled=function(){return(1048576&this._bitField)>0},t.prototype._warn=function(e,t,n){return v(e,t,n||this)},t.onPossiblyUnhandledRejection=function(e){var t=I();R="function"==typeof e?null===t?e:t.bind(e):undefined},t.onUnhandledRejectionHandled=function(e){var t=I();O="function"==typeof e?null===t?e:t.bind(e):undefined};var J=function(){};t.longStackTraces=function(){if(D.haveItemsQueued()&&!re.longStackTraces)throw new Error("cannot enable long stack traces after promises have been created\n\n    See http://goo.gl/MqrFmX\n");if(!re.longStackTraces&&S()){var e=t.prototype._captureStackTrace,r=t.prototype._attachExtraTrace;re.longStackTraces=!0,J=function(){if(D.haveItemsQueued()&&!re.longStackTraces)throw new Error("cannot enable long stack traces after promises have been created\n\n    See http://goo.gl/MqrFmX\n");t.prototype._captureStackTrace=e,t.prototype._attachExtraTrace=r,n.deactivateLongStackTraces(),D.enableTrampoline(),re.longStackTraces=!1},t.prototype._captureStackTrace=h,t.prototype._attachExtraTrace=d,n.activateLongStackTraces(),D.disableTrampolineIfNecessary()}},t.hasLongStackTraces=function(){return re.longStackTraces&&S()};var G=function(){try{var e=document.createEvent("CustomEvent");return e.initCustomEvent("testingtheevent",!1,!0,{}),N.global.dispatchEvent(e),function(e,t){var n=document.createEvent("CustomEvent");return n.initCustomEvent(e.toLowerCase(),!1,!0,t),!N.global.dispatchEvent(n)}}catch(t){}return function(){return!1}}(),z=function(){return N.isNode?function(){return process.emit.apply(process,arguments)}:N.global?function(e){var t="on"+e.toLowerCase(),n=N.global[t];return n?(n.apply(N.global,[].slice.call(arguments,1)),!0):!1}:function(){return!1}}(),K={promiseCreated:r,promiseFulfilled:r,promiseRejected:r,promiseResolved:r,promiseCancelled:r,promiseChained:function(e,t,n){return{promise:t,child:n}},warning:function(e,t){return{warning:t}},unhandledRejection:function(e,t,n){return{reason:t,promise:n}},rejectionHandled:r},Y=function(e){var t=!1;try{t=z.apply(null,arguments)}catch(n){D.throwLater(n),t=!0}var r=!1;try{r=G(e,K[e].apply(null,arguments))}catch(n){D.throwLater(n),r=!0}return r||t};t.config=function(e){if(e=Object(e),"longStackTraces"in e&&(e.longStackTraces?t.longStackTraces():!e.longStackTraces&&t.hasLongStackTraces()&&J()),"warnings"in e){var n=e.warnings;re.warnings=!!n,X=re.warnings,N.isObject(n)&&"wForgottenReturn"in n&&(X=!!n.wForgottenReturn)}if("cancellation"in e&&e.cancellation&&!re.cancellation){if(D.haveItemsQueued())throw new Error("cannot enable cancellation after promises are in use");t.prototype._clearCancellationData=c,t.prototype._propagateFrom=l,t.prototype._onCancel=a,t.prototype._setOnCancel=u,t.prototype._attachCancellationCallback=s,t.prototype._execute=o,Z=l,re.cancellation=!0}"monitoring"in e&&(e.monitoring&&!re.monitoring?(re.monitoring=!0,t.prototype._fireEvent=Y):!e.monitoring&&re.monitoring&&(re.monitoring=!1,t.prototype._fireEvent=i))},t.prototype._fireEvent=i,t.prototype._execute=function(e,t,n){try{e(t,n)}catch(r){return r}},t.prototype._onCancel=function(){},t.prototype._setOnCancel=function(e){},t.prototype._attachCancellationCallback=function(e){},t.prototype._captureStackTrace=function(){},t.prototype._attachExtraTrace=function(){},t.prototype._clearCancellationData=function(){},t.prototype._propagateFrom=function(e,t){};var Z=f,ee=function(){return!1},te=/[\/<\(]([^:\/]+):(\d+):(?:\d+)\)?\s*$/;N.inherits(x,Error),n.CapturedTrace=x,x.prototype.uncycle=function(){var e=this._length;if(!(2>e)){for(var t=[],n={},r=0,i=this;i!==undefined;++r)t.push(i),i=i._parent;e=this._length=r;for(var r=e-1;r>=0;--r){var o=t[r].stack;n[o]===undefined&&(n[o]=r)}for(var r=0;e>r;++r){var s=t[r].stack,a=n[s];if(a!==undefined&&a!==r){a>0&&(t[a-1]._parent=undefined,t[a-1]._length=1),t[r]._parent=undefined,t[r]._length=1;var u=r>0?t[r-1]:this;e-1>a?(u._parent=t[a+1],u._parent.uncycle(),u._length=u._parent._length+1):(u._parent=undefined,u._length=1);for(var c=u._length+1,l=r-2;l>=0;--l)t[l]._length=c,c++;return}}}},x.prototype.attachExtraTrace=function(e){if(!e.__stackCleaned__){this.uncycle();for(var t=E(e),n=t.message,r=[t.stack],i=this;i!==undefined;)r.push(w(i.stack.split("\n"))),i=i._parent;b(r),m(r),N.notEnumerableProp(e,"stack",g(n,r)),N.notEnumerableProp(e,"__stackCleaned__",!0)}};var ne=function(){var e=/^\s*at\s*/,t=function(e,t){return"string"==typeof e?e:t.name!==undefined&&t.message!==undefined?t.toString():k(t)};if("number"==typeof Error.stackTraceLimit&&"function"==typeof Error.captureStackTrace){Error.stackTraceLimit+=6,H=e,B=t;var n=Error.captureStackTrace;return ee=function(e){return U.test(e)},function(e,t){Error.stackTraceLimit+=6,n(e,t),Error.stackTraceLimit-=6}}var r=new Error;if("string"==typeof r.stack&&r.stack.split("\n")[0].indexOf("stackDetection@")>=0)return H=/@/,B=t,$=!0,function(e){e.stack=(new Error).stack};var i;try{throw new Error}catch(o){i="stack"in o}return"stack"in r||!i||"number"!=typeof Error.stackTraceLimit?(B=function(e,t){return"string"==typeof e?e:"object"!=typeof t&&"function"!=typeof t||t.name===undefined||t.message===undefined?k(t):t.toString()},null):(H=e,B=t,function(e){Error.stackTraceLimit+=6;try{throw new Error}catch(t){e.stack=t.stack}Error.stackTraceLimit-=6})}([]);"undefined"!=typeof console&&"undefined"!=typeof console.warn&&(V=function(e){console.warn(e)},N.isNode&&process.stderr.isTTY?V=function(e,t){var n=t?"[33m":"[31m";console.warn(n+e+"[0m\n")}:N.isNode||"string"!=typeof(new Error).stack||(V=function(e,t){console.warn("%c"+e,t?"color: darkorange":"color: red")}));var re={warnings:q,longStackTraces:!1,cancellation:!1,monitoring:!1};return Q&&t.longStackTraces(),{longStackTraces:function(){return re.longStackTraces},warnings:function(){return re.warnings},cancellation:function(){return re.cancellation},monitoring:function(){return re.monitoring},propagateFromFunction:function(){return Z},boundValueFunction:function(){return p},checkForgottenReturns:_,setBounds:P,warn:v,deprecated:y,CapturedTrace:x,fireDomEvent:G,fireGlobalEvent:z}}},{"./errors":12,"./util":36}],10:[function(e,t,n){"use strict";t.exports=function(e){function t(){return this.value}function n(){throw this.reason}e.prototype["return"]=e.prototype.thenReturn=function(n){return n instanceof e&&n.suppressUnhandledRejections(),this._then(t,undefined,undefined,{value:n},undefined)},e.prototype["throw"]=e.prototype.thenThrow=function(e){return this._then(n,undefined,undefined,{reason:e},undefined)},e.prototype.catchThrow=function(e){if(arguments.length<=1)return this._then(undefined,n,undefined,{reason:e},undefined);var t=arguments[1],r=function(){throw t};return this.caught(e,r)},e.prototype.catchReturn=function(n){if(arguments.length<=1)return n instanceof e&&n.suppressUnhandledRejections(),this._then(undefined,t,undefined,{value:n},undefined);var r=arguments[1];r instanceof e&&r.suppressUnhandledRejections();var i=function(){return r};return this.caught(n,i)}}},{}],11:[function(e,t,n){"use strict";t.exports=function(e,t){function n(){return o(this)}function r(e,n){return i(e,n,t,t)}var i=e.reduce,o=e.all;e.prototype.each=function(e){return this.mapSeries(e)._then(n,undefined,undefined,this,undefined)},e.prototype.mapSeries=function(e){return i(this,e,t,t)},e.each=function(e,t){return r(e,t)._then(n,undefined,undefined,e,undefined)},e.mapSeries=r}},{}],12:[function(e,t,n){"use strict";function r(e,t){function n(r){return this instanceof n?(f(this,"message","string"==typeof r?r:t),f(this,"name",e),void(Error.captureStackTrace?Error.captureStackTrace(this,this.constructor):Error.call(this))):new n(r)}return l(n,Error),n}function i(e){return this instanceof i?(f(this,"name","OperationalError"),f(this,"message",e),this.cause=e,this.isOperational=!0,void(e instanceof Error?(f(this,"message",e.message),f(this,"stack",e.stack)):Error.captureStackTrace&&Error.captureStackTrace(this,this.constructor))):new i(e)}var o,s,a=e("./es5"),u=a.freeze,c=e("./util"),l=c.inherits,f=c.notEnumerableProp,p=r("Warning","warning"),h=r("CancellationError","cancellation error"),d=r("TimeoutError","timeout error"),_=r("AggregateError","aggregate error");try{o=TypeError,s=RangeError}catch(y){o=r("TypeError","type error"),s=r("RangeError","range error")}for(var v="join pop push shift unshift slice filter forEach some every map indexOf lastIndexOf reduce reduceRight sort reverse".split(" "),g=0;g<v.length;++g)"function"==typeof Array.prototype[v[g]]&&(_.prototype[v[g]]=Array.prototype[v[g]]);a.defineProperty(_.prototype,"length",{value:0,configurable:!1,writable:!0,enumerable:!0}),_.prototype.isOperational=!0;var m=0;_.prototype.toString=function(){var e=Array(4*m+1).join(" "),t="\n"+e+"AggregateError of:\n";m++,e=Array(4*m+1).join(" ");for(var n=0;n<this.length;++n){for(var r=this[n]===this?"[Circular AggregateError]":this[n]+"",i=r.split("\n"),o=0;o<i.length;++o)i[o]=e+i[o];
r=i.join("\n"),t+=r+"\n"}return m--,t},l(i,Error);var b=Error.__BluebirdErrorTypes__;b||(b=u({CancellationError:h,TimeoutError:d,OperationalError:i,RejectionError:i,AggregateError:_}),a.defineProperty(Error,"__BluebirdErrorTypes__",{value:b,writable:!1,enumerable:!1,configurable:!1})),t.exports={Error:Error,TypeError:o,RangeError:s,CancellationError:b.CancellationError,OperationalError:b.OperationalError,TimeoutError:b.TimeoutError,AggregateError:b.AggregateError,Warning:p}},{"./es5":13,"./util":36}],13:[function(e,t,n){var r=function(){"use strict";return this===undefined}();if(r)t.exports={freeze:Object.freeze,defineProperty:Object.defineProperty,getDescriptor:Object.getOwnPropertyDescriptor,keys:Object.keys,names:Object.getOwnPropertyNames,getPrototypeOf:Object.getPrototypeOf,isArray:Array.isArray,isES5:r,propertyIsWritable:function(e,t){var n=Object.getOwnPropertyDescriptor(e,t);return!(n&&!n.writable&&!n.set)}};else{var i={}.hasOwnProperty,o={}.toString,s={}.constructor.prototype,a=function(e){var t=[];for(var n in e)i.call(e,n)&&t.push(n);return t},u=function(e,t){return{value:e[t]}},c=function(e,t,n){return e[t]=n.value,e},l=function(e){return e},f=function(e){try{return Object(e).constructor.prototype}catch(t){return s}},p=function(e){try{return"[object Array]"===o.call(e)}catch(t){return!1}};t.exports={isArray:p,keys:a,names:a,defineProperty:c,getDescriptor:u,freeze:l,getPrototypeOf:f,isES5:r,propertyIsWritable:function(){return!0}}}},{}],14:[function(e,t,n){"use strict";t.exports=function(e,t){var n=e.map;e.prototype.filter=function(e,r){return n(this,e,r,t)},e.filter=function(e,r,i){return n(e,r,i,t)}}},{}],15:[function(e,t,n){"use strict";t.exports=function(t,n){function r(e,t,n){this.promise=e,this.type=t,this.handler=n,this.called=!1,this.cancelPromise=null}function i(e){this.finallyHandler=e}function o(e,t){return null!=e.cancelPromise?(arguments.length>1?e.cancelPromise._reject(t):e.cancelPromise._cancel(),e.cancelPromise=null,!0):!1}function s(){return u.call(this,this.promise._target()._settledValue())}function a(e){return o(this,e)?void 0:(f.e=e,f)}function u(e){var r=this.promise,u=this.handler;if(!this.called){this.called=!0;var c=this.isFinallyHandler()?u.call(r._boundValue()):u.call(r._boundValue(),e);if(c!==undefined){r._setReturnedNonUndefined();var p=n(c,r);if(p instanceof t){if(null!=this.cancelPromise){if(p.isCancelled()){var h=new l("late cancellation observer");return r._attachExtraTrace(h),f.e=h,f}p.isPending()&&p._attachCancellationCallback(new i(this))}return p._then(s,a,undefined,this,undefined)}}}return r.isRejected()?(o(this),f.e=e,f):(o(this),e)}var c=e("./util"),l=t.CancellationError,f=c.errorObj;return r.prototype.isFinallyHandler=function(){return 0===this.type},i.prototype._resultCancelled=function(){o(this.finallyHandler)},t.prototype._passThrough=function(e,t,n,i){return"function"!=typeof e?this.then():this._then(n,i,undefined,new r(this,t,e),undefined)},t.prototype.lastly=t.prototype["finally"]=function(e){return this._passThrough(e,0,u,u)},t.prototype.tap=function(e){return this._passThrough(e,1,u)},r}},{"./util":36}],16:[function(e,t,n){"use strict";t.exports=function(t,n,r,i,o,s){function a(e,n,r){for(var o=0;o<n.length;++o){r._pushContext();var s=h(n[o])(e);if(r._popContext(),s===p){r._pushContext();var a=t.reject(p.e);return r._popContext(),a}var u=i(s,r);if(u instanceof t)return u}return null}function u(e,n,i,o){if(s.cancellation()){var a=new t(r),u=this._finallyPromise=new t(r);this._promise=a.lastly(function(){return u}),a._captureStackTrace(),a._setOnCancel(this)}else{var c=this._promise=new t(r);c._captureStackTrace()}this._stack=o,this._generatorFunction=e,this._receiver=n,this._generator=undefined,this._yieldHandlers="function"==typeof i?[i].concat(d):d,this._yieldedPromise=null,this._cancellationPhase=!1}var c=e("./errors"),l=c.TypeError,f=e("./util"),p=f.errorObj,h=f.tryCatch,d=[];f.inherits(u,o),u.prototype._isResolved=function(){return null===this._promise},u.prototype._cleanup=function(){this._promise=this._generator=null,s.cancellation()&&null!==this._finallyPromise&&(this._finallyPromise._fulfill(),this._finallyPromise=null)},u.prototype._promiseCancelled=function(){if(!this._isResolved()){var e,n="undefined"!=typeof this._generator["return"];if(n)this._promise._pushContext(),e=h(this._generator["return"]).call(this._generator,undefined),this._promise._popContext();else{var r=new t.CancellationError("generator .return() sentinel");t.coroutine.returnSentinel=r,this._promise._attachExtraTrace(r),this._promise._pushContext(),e=h(this._generator["throw"]).call(this._generator,r),this._promise._popContext()}this._cancellationPhase=!0,this._yieldedPromise=null,this._continue(e)}},u.prototype._promiseFulfilled=function(e){this._yieldedPromise=null,this._promise._pushContext();var t=h(this._generator.next).call(this._generator,e);this._promise._popContext(),this._continue(t)},u.prototype._promiseRejected=function(e){this._yieldedPromise=null,this._promise._attachExtraTrace(e),this._promise._pushContext();var t=h(this._generator["throw"]).call(this._generator,e);this._promise._popContext(),this._continue(t)},u.prototype._resultCancelled=function(){if(this._yieldedPromise instanceof t){var e=this._yieldedPromise;this._yieldedPromise=null,e.cancel()}},u.prototype.promise=function(){return this._promise},u.prototype._run=function(){this._generator=this._generatorFunction.call(this._receiver),this._receiver=this._generatorFunction=undefined,this._promiseFulfilled(undefined)},u.prototype._continue=function(e){var n=this._promise;if(e===p)return this._cleanup(),this._cancellationPhase?n.cancel():n._rejectCallback(e.e,!1);var r=e.value;if(e.done===!0)return this._cleanup(),this._cancellationPhase?n.cancel():n._resolveCallback(r);var o=i(r,this._promise);if(!(o instanceof t)&&(o=a(o,this._yieldHandlers,this._promise),null===o))return void this._promiseRejected(new l("A value %s was yielded that could not be treated as a promise\n\n    See http://goo.gl/MqrFmX\n\n".replace("%s",r)+"From coroutine:\n"+this._stack.split("\n").slice(1,-7).join("\n")));o=o._target();var s=o._bitField;0===(50397184&s)?(this._yieldedPromise=o,o._proxy(this,null)):0!==(33554432&s)?this._promiseFulfilled(o._value()):0!==(16777216&s)?this._promiseRejected(o._reason()):this._promiseCancelled()},t.coroutine=function(e,t){if("function"!=typeof e)throw new l("generatorFunction must be a function\n\n    See http://goo.gl/MqrFmX\n");var n=Object(t).yieldHandler,r=u,i=(new Error).stack;return function(){var t=e.apply(this,arguments),o=new r(undefined,undefined,n,i),s=o.promise();return o._generator=t,o._promiseFulfilled(undefined),s}},t.coroutine.addYieldHandler=function(e){if("function"!=typeof e)throw new l("expecting a function but got "+f.classString(e));d.push(e)},t.spawn=function(e){if(s.deprecated("Promise.spawn()","Promise.coroutine()"),"function"!=typeof e)return n("generatorFunction must be a function\n\n    See http://goo.gl/MqrFmX\n");var r=new u(e,this),i=r.promise();return r._run(t.spawn),i}}},{"./errors":12,"./util":36}],17:[function(e,t,n){"use strict";t.exports=function(t,n,r,i){var o=e("./util");o.canEvaluate,o.tryCatch,o.errorObj;t.join=function(){var e,t=arguments.length-1;if(t>0&&"function"==typeof arguments[t]){e=arguments[t];var r}var i=[].slice.call(arguments);e&&i.pop();var r=new n(i).promise();return e!==undefined?r.spread(e):r}}},{"./util":36}],18:[function(e,t,n){"use strict";t.exports=function(t,n,r,i,o,s){function a(e,t,n,r){this.constructor$(e),this._promise._captureStackTrace();var i=c();this._callback=null===i?t:i.bind(t),this._preservedValues=r===o?new Array(this.length()):null,this._limit=n,this._inFlight=0,this._queue=n>=1?[]:h,this._init$(undefined,-2)}function u(e,n,i,o){if("function"!=typeof n)return r("expecting a function but got "+l.classString(n));var s=0;if(i!==undefined){if("object"!=typeof i||null===i)return t.reject(new TypeError("options argument must be an object but it is "+l.classString(i)));if("number"!=typeof i.concurrency)return t.reject(new TypeError("'concurrency' must be a number but it is "+l.classString(i.concurrency)));s=i.concurrency}return s="number"==typeof s&&isFinite(s)&&s>=1?s:0,new a(e,n,s,o).promise()}var c=t._getDomain,l=e("./util"),f=l.tryCatch,p=l.errorObj,h=[];l.inherits(a,n),a.prototype._init=function(){},a.prototype._promiseFulfilled=function(e,n){var r=this._values,o=this.length(),a=this._preservedValues,u=this._limit;if(0>n){if(n=-1*n-1,r[n]=e,u>=1&&(this._inFlight--,this._drainQueue(),this._isResolved()))return!0}else{if(u>=1&&this._inFlight>=u)return r[n]=e,this._queue.push(n),!1;null!==a&&(a[n]=e);var c=this._promise,l=this._callback,h=c._boundValue();c._pushContext();var d=f(l).call(h,e,n,o),_=c._popContext();if(s.checkForgottenReturns(d,_,null!==a?"Promise.filter":"Promise.map",c),d===p)return this._reject(d.e),!0;var y=i(d,this._promise);if(y instanceof t){y=y._target();var v=y._bitField;if(0===(50397184&v))return u>=1&&this._inFlight++,r[n]=y,y._proxy(this,-1*(n+1)),!1;if(0===(33554432&v))return 0!==(16777216&v)?(this._reject(y._reason()),!0):(this._cancel(),!0);d=y._value()}r[n]=d}var g=++this._totalResolved;return g>=o?(null!==a?this._filter(r,a):this._resolve(r),!0):!1},a.prototype._drainQueue=function(){for(var e=this._queue,t=this._limit,n=this._values;e.length>0&&this._inFlight<t;){if(this._isResolved())return;var r=e.pop();this._promiseFulfilled(n[r],r)}},a.prototype._filter=function(e,t){for(var n=t.length,r=new Array(n),i=0,o=0;n>o;++o)e[o]&&(r[i++]=t[o]);r.length=i,this._resolve(r)},a.prototype.preservedValues=function(){return this._preservedValues},t.prototype.map=function(e,t){return u(this,e,t,null)},t.map=function(e,t,n,r){return u(e,t,n,r)}}},{"./util":36}],19:[function(e,t,n){"use strict";t.exports=function(t,n,r,i,o){var s=e("./util"),a=s.tryCatch;t.method=function(e){if("function"!=typeof e)throw new t.TypeError("expecting a function but got "+s.classString(e));return function(){var r=new t(n);r._captureStackTrace(),r._pushContext();var i=a(e).apply(this,arguments),s=r._popContext();return o.checkForgottenReturns(i,s,"Promise.method",r),r._resolveFromSyncValue(i),r}},t.attempt=t["try"]=function(e){if("function"!=typeof e)return i("expecting a function but got "+s.classString(e));var r=new t(n);r._captureStackTrace(),r._pushContext();var u;if(arguments.length>1){o.deprecated("calling Promise.try with more than 1 argument");var c=arguments[1],l=arguments[2];u=s.isArray(c)?a(e).apply(l,c):a(e).call(l,c)}else u=a(e)();var f=r._popContext();return o.checkForgottenReturns(u,f,"Promise.try",r),r._resolveFromSyncValue(u),r},t.prototype._resolveFromSyncValue=function(e){e===s.errorObj?this._rejectCallback(e.e,!1):this._resolveCallback(e,!0)}}},{"./util":36}],20:[function(e,t,n){"use strict";function r(e){return e instanceof Error&&l.getPrototypeOf(e)===Error.prototype}function i(e){var t;if(r(e)){t=new c(e),t.name=e.name,t.message=e.message,t.stack=e.stack;for(var n=l.keys(e),i=0;i<n.length;++i){var o=n[i];f.test(o)||(t[o]=e[o])}return t}return s.markAsOriginatingFromRejection(e),e}function o(e,t){return function(n,r){if(null!==e){if(n){var o=i(a(n));e._attachExtraTrace(o),e._reject(o)}else if(t){var s=[].slice.call(arguments,1);e._fulfill(s)}else e._fulfill(r);e=null}}}var s=e("./util"),a=s.maybeWrapAsError,u=e("./errors"),c=u.OperationalError,l=e("./es5"),f=/^(?:name|message|stack|cause)$/;t.exports=o},{"./errors":12,"./es5":13,"./util":36}],21:[function(e,t,n){"use strict";t.exports=function(t){function n(e,t){var n=this;if(!o.isArray(e))return r.call(n,e,t);var i=a(t).apply(n._boundValue(),[null].concat(e));i===u&&s.throwLater(i.e)}function r(e,t){var n=this,r=n._boundValue(),i=e===undefined?a(t).call(r,null):a(t).call(r,null,e);i===u&&s.throwLater(i.e)}function i(e,t){var n=this;if(!e){var r=new Error(e+"");r.cause=e,e=r}var i=a(t).call(n._boundValue(),e);i===u&&s.throwLater(i.e)}var o=e("./util"),s=t._async,a=o.tryCatch,u=o.errorObj;t.prototype.asCallback=t.prototype.nodeify=function(e,t){if("function"==typeof e){var o=r;t!==undefined&&Object(t).spread&&(o=n),this._then(o,i,undefined,this,e)}return this}}},{"./util":36}],22:[function(e,t,n){"use strict";t.exports=function(){function t(){}function n(e,t){if("function"!=typeof t)throw new v("expecting a function but got "+p.classString(t));if(e.constructor!==r)throw new v("the promise constructor cannot be invoked directly\n\n    See http://goo.gl/MqrFmX\n")}function r(e){this._bitField=0,this._fulfillmentHandler0=undefined,this._rejectionHandler0=undefined,this._promise0=undefined,this._receiver0=undefined,e!==m&&(n(this,e),this._resolveFromExecutor(e)),this._promiseCreated(),this._fireEvent("promiseCreated",this)}function i(e){this.promise._resolveCallback(e)}function o(e){this.promise._rejectCallback(e,!1)}function s(e){var t=new r(m);t._fulfillmentHandler0=e,t._rejectionHandler0=e,t._promise0=e,t._receiver0=e}var a,u=function(){return new v("circular promise resolution chain\n\n    See http://goo.gl/MqrFmX\n")},c=function(){return new r.PromiseInspection(this._target())},l=function(e){return r.reject(new v(e))},f={},p=e("./util");a=p.isNode?function(){var e=process.domain;return e===undefined&&(e=null),e}:function(){return null},p.notEnumerableProp(r,"_getDomain",a);var h=e("./es5"),d=e("./async"),_=new d;h.defineProperty(r,"_async",{value:_});var y=e("./errors"),v=r.TypeError=y.TypeError;r.RangeError=y.RangeError;var g=r.CancellationError=y.CancellationError;r.TimeoutError=y.TimeoutError,r.OperationalError=y.OperationalError,r.RejectionError=y.OperationalError,r.AggregateError=y.AggregateError;var m=function(){},b={},w={},C=e("./thenables")(r,m),E=e("./promise_array")(r,m,C,l,t),j=e("./context")(r),F=j.create,k=e("./debuggability")(r,j),T=(k.CapturedTrace,e("./finally")(r,C)),S=e("./catch_filter")(w),A=e("./nodeback"),P=p.errorObj,x=p.tryCatch;return r.prototype.toString=function(){return"[object Promise]"},r.prototype.caught=r.prototype["catch"]=function(e){var t=arguments.length;if(t>1){var n,r=new Array(t-1),i=0;for(n=0;t-1>n;++n){var o=arguments[n];if(!p.isObject(o))return l("expecting an object but got "+p.classString(o));r[i++]=o}return r.length=i,e=arguments[n],this.then(undefined,S(r,e,this))}return this.then(undefined,e)},r.prototype.reflect=function(){return this._then(c,c,undefined,this,undefined)},r.prototype.then=function(e,t){if(k.warnings()&&arguments.length>0&&"function"!=typeof e&&"function"!=typeof t){var n=".then() only accepts functions but was passed: "+p.classString(e);arguments.length>1&&(n+=", "+p.classString(t)),this._warn(n)}return this._then(e,t,undefined,undefined,undefined)},r.prototype.done=function(e,t){var n=this._then(e,t,undefined,undefined,undefined);n._setIsFinal()},r.prototype.spread=function(e){return"function"!=typeof e?l("expecting a function but got "+p.classString(e)):this.all()._then(e,undefined,undefined,b,undefined)},r.prototype.toJSON=function(){var e={isFulfilled:!1,isRejected:!1,fulfillmentValue:undefined,rejectionReason:undefined};return this.isFulfilled()?(e.fulfillmentValue=this.value(),e.isFulfilled=!0):this.isRejected()&&(e.rejectionReason=this.reason(),e.isRejected=!0),e},r.prototype.all=function(){return arguments.length>0&&this._warn(".all() was passed arguments but it does not take any"),new E(this).promise()},r.prototype.error=function(e){return this.caught(p.originatesFromRejection,e)},r.is=function(e){return e instanceof r},r.fromNode=r.fromCallback=function(e){var t=new r(m);t._captureStackTrace();var n=arguments.length>1?!!Object(arguments[1]).multiArgs:!1,i=x(e)(A(t,n));return i===P&&t._rejectCallback(i.e,!0),t._isFateSealed()||t._setAsyncGuaranteed(),t},r.all=function(e){return new E(e).promise()},r.cast=function(e){var t=C(e);return t instanceof r||(t=new r(m),t._captureStackTrace(),t._setFulfilled(),t._rejectionHandler0=e),t},r.resolve=r.fulfilled=r.cast,r.reject=r.rejected=function(e){var t=new r(m);return t._captureStackTrace(),t._rejectCallback(e,!0),t},r.setScheduler=function(e){if("function"!=typeof e)throw new v("expecting a function but got "+p.classString(e));return _.setScheduler(e)},r.prototype._then=function(e,t,n,i,o){var s=o!==undefined,u=s?o:new r(m),c=this._target(),l=c._bitField;s||(u._propagateFrom(this,3),u._captureStackTrace(),i===undefined&&0!==(2097152&this._bitField)&&(i=0!==(50397184&l)?this._boundValue():c===this?undefined:this._boundTo),this._fireEvent("promiseChained",this,u));var f=a();if(0!==(50397184&l)){var p,h,d=c._settlePromiseCtx;0!==(33554432&l)?(h=c._rejectionHandler0,p=e):0!==(16777216&l)?(h=c._fulfillmentHandler0,p=t,c._unsetRejectionIsUnhandled()):(d=c._settlePromiseLateCancellationObserver,h=new g("late cancellation observer"),c._attachExtraTrace(h),p=t),_.invoke(d,c,{handler:null===f?p:"function"==typeof p&&f.bind(p),promise:u,receiver:i,value:h})}else c._addCallbacks(e,t,u,i,f);return u},r.prototype._length=function(){return 65535&this._bitField},r.prototype._isFateSealed=function(){return 0!==(117506048&this._bitField)},r.prototype._isFollowing=function(){return 67108864===(67108864&this._bitField)},r.prototype._setLength=function(e){this._bitField=-65536&this._bitField|65535&e},r.prototype._setFulfilled=function(){this._bitField=33554432|this._bitField,this._fireEvent("promiseFulfilled",this)},r.prototype._setRejected=function(){this._bitField=16777216|this._bitField,this._fireEvent("promiseRejected",this)},r.prototype._setFollowing=function(){this._bitField=67108864|this._bitField,this._fireEvent("promiseResolved",this)},r.prototype._setIsFinal=function(){this._bitField=4194304|this._bitField},r.prototype._isFinal=function(){return(4194304&this._bitField)>0},r.prototype._unsetCancelled=function(){this._bitField=-65537&this._bitField},r.prototype._setCancelled=function(){this._bitField=65536|this._bitField,this._fireEvent("promiseCancelled",this)},r.prototype._setAsyncGuaranteed=function(){_.hasCustomScheduler()||(this._bitField=134217728|this._bitField)},r.prototype._receiverAt=function(e){var t=0===e?this._receiver0:this[4*e-4+3];return t===f?undefined:t===undefined&&this._isBound()?this._boundValue():t},r.prototype._promiseAt=function(e){return this[4*e-4+2]},r.prototype._fulfillmentHandlerAt=function(e){return this[4*e-4+0]},r.prototype._rejectionHandlerAt=function(e){return this[4*e-4+1]},r.prototype._boundValue=function(){},r.prototype._migrateCallback0=function(e){var t=(e._bitField,e._fulfillmentHandler0),n=e._rejectionHandler0,r=e._promise0,i=e._receiverAt(0);i===undefined&&(i=f),this._addCallbacks(t,n,r,i,null)},r.prototype._migrateCallbackAt=function(e,t){var n=e._fulfillmentHandlerAt(t),r=e._rejectionHandlerAt(t),i=e._promiseAt(t),o=e._receiverAt(t);o===undefined&&(o=f),this._addCallbacks(n,r,i,o,null)},r.prototype._addCallbacks=function(e,t,n,r,i){var o=this._length();if(o>=65531&&(o=0,this._setLength(0)),0===o)this._promise0=n,this._receiver0=r,"function"==typeof e&&(this._fulfillmentHandler0=null===i?e:i.bind(e)),"function"==typeof t&&(this._rejectionHandler0=null===i?t:i.bind(t));else{var s=4*o-4;this[s+2]=n,this[s+3]=r,"function"==typeof e&&(this[s+0]=null===i?e:i.bind(e)),"function"==typeof t&&(this[s+1]=null===i?t:i.bind(t))}return this._setLength(o+1),o},r.prototype._proxy=function(e,t){this._addCallbacks(undefined,undefined,t,e,null)},r.prototype._resolveCallback=function(e,t){if(0===(117506048&this._bitField)){if(e===this)return this._rejectCallback(u(),!1);var n=C(e,this);if(!(n instanceof r))return this._fulfill(e);t&&this._propagateFrom(n,2);var i=n._target();if(i===this)return void this._reject(u());var o=i._bitField;if(0===(50397184&o)){var s=this._length();s>0&&i._migrateCallback0(this);for(var a=1;s>a;++a)i._migrateCallbackAt(this,a);this._setFollowing(),this._setLength(0),this._setFollowee(i)}else if(0!==(33554432&o))this._fulfill(i._value());else if(0!==(16777216&o))this._reject(i._reason());else{var c=new g("late cancellation observer");i._attachExtraTrace(c),this._reject(c)}}},r.prototype._rejectCallback=function(e,t,n){var r=p.ensureErrorObject(e),i=r===e;if(!i&&!n&&k.warnings()){var o="a promise was rejected with a non-error: "+p.classString(e);this._warn(o,!0)}this._attachExtraTrace(r,t?i:!1),this._reject(e)},r.prototype._resolveFromExecutor=function(e){var t=this;this._captureStackTrace(),this._pushContext();var n=!0,r=this._execute(e,function(e){t._resolveCallback(e)},function(e){t._rejectCallback(e,n)});n=!1,this._popContext(),r!==undefined&&t._rejectCallback(r,!0)},r.prototype._settlePromiseFromHandler=function(e,t,n,r){var i=r._bitField;if(0===(65536&i)){r._pushContext();var o;t===b?n&&"number"==typeof n.length?o=x(e).apply(this._boundValue(),n):(o=P,o.e=new v("cannot .spread() a non-array: "+p.classString(n))):o=x(e).call(t,n);var s=r._popContext();i=r._bitField,0===(65536&i)&&(o===w?r._reject(n):o===P?r._rejectCallback(o.e,!1):(k.checkForgottenReturns(o,s,"",r,this),r._resolveCallback(o)))}},r.prototype._target=function(){for(var e=this;e._isFollowing();)e=e._followee();return e},r.prototype._followee=function(){return this._rejectionHandler0},r.prototype._setFollowee=function(e){this._rejectionHandler0=e},r.prototype._settlePromise=function(e,n,i,o){var s=e instanceof r,a=this._bitField,u=0!==(134217728&a);0!==(65536&a)?(s&&e._invokeInternalOnCancel(),i instanceof T&&i.isFinallyHandler()?(i.cancelPromise=e,x(n).call(i,o)===P&&e._reject(P.e)):n===c?e._fulfill(c.call(i)):i instanceof t?i._promiseCancelled(e):s||e instanceof E?e._cancel():i.cancel()):"function"==typeof n?s?(u&&e._setAsyncGuaranteed(),this._settlePromiseFromHandler(n,i,o,e)):n.call(i,o,e):i instanceof t?i._isResolved()||(0!==(33554432&a)?i._promiseFulfilled(o,e):i._promiseRejected(o,e)):s&&(u&&e._setAsyncGuaranteed(),0!==(33554432&a)?e._fulfill(o):e._reject(o))},r.prototype._settlePromiseLateCancellationObserver=function(e){var t=e.handler,n=e.promise,i=e.receiver,o=e.value;"function"==typeof t?n instanceof r?this._settlePromiseFromHandler(t,i,o,n):t.call(i,o,n):n instanceof r&&n._reject(o)},r.prototype._settlePromiseCtx=function(e){this._settlePromise(e.promise,e.handler,e.receiver,e.value)},r.prototype._settlePromise0=function(e,t,n){var r=this._promise0,i=this._receiverAt(0);this._promise0=undefined,this._receiver0=undefined,this._settlePromise(r,e,i,t)},r.prototype._clearCallbackDataAtIndex=function(e){var t=4*e-4;this[t+2]=this[t+3]=this[t+0]=this[t+1]=undefined},r.prototype._fulfill=function(e){var t=this._bitField;if(!((117506048&t)>>>16)){if(e===this){var n=u();return this._attachExtraTrace(n),this._reject(n)}this._setFulfilled(),this._rejectionHandler0=e,(65535&t)>0&&(0!==(134217728&t)?this._settlePromises():_.settlePromises(this))}},r.prototype._reject=function(e){var t=this._bitField;if(!((117506048&t)>>>16))return this._setRejected(),this._fulfillmentHandler0=e,this._isFinal()?_.fatalError(e,p.isNode):void((65535&t)>0?_.settlePromises(this):this._ensurePossibleRejectionHandled())},r.prototype._fulfillPromises=function(e,t){for(var n=1;e>n;n++){var r=this._fulfillmentHandlerAt(n),i=this._promiseAt(n),o=this._receiverAt(n);this._clearCallbackDataAtIndex(n),this._settlePromise(i,r,o,t)}},r.prototype._rejectPromises=function(e,t){for(var n=1;e>n;n++){var r=this._rejectionHandlerAt(n),i=this._promiseAt(n),o=this._receiverAt(n);this._clearCallbackDataAtIndex(n),this._settlePromise(i,r,o,t)}},r.prototype._settlePromises=function(){var e=this._bitField,t=65535&e;if(t>0){if(0!==(16842752&e)){var n=this._fulfillmentHandler0;this._settlePromise0(this._rejectionHandler0,n,e),this._rejectPromises(t,n)}else{var r=this._rejectionHandler0;this._settlePromise0(this._fulfillmentHandler0,r,e),this._fulfillPromises(t,r)}this._setLength(0)}this._clearCancellationData()},r.prototype._settledValue=function(){var e=this._bitField;return 0!==(33554432&e)?this._rejectionHandler0:0!==(16777216&e)?this._fulfillmentHandler0:void 0},r.defer=r.pending=function(){k.deprecated("Promise.defer","new Promise");var e=new r(m);return{promise:e,resolve:i,reject:o}},p.notEnumerableProp(r,"_makeSelfResolutionError",u),e("./method")(r,m,C,l,k),e("./bind")(r,m,C,k),e("./cancel")(r,E,l,k),e("./direct_resolve")(r),e("./synchronous_inspection")(r),e("./join")(r,E,C,m,k),r.Promise=r,r.version="3.4.0",e("./map.js")(r,E,l,C,m,k),e("./call_get.js")(r),e("./using.js")(r,l,C,F,m,k),e("./timers.js")(r,m,k),e("./generators.js")(r,l,m,C,t,k),e("./nodeify.js")(r),e("./promisify.js")(r,m),e("./props.js")(r,E,C,l),e("./race.js")(r,m,C,l),e("./reduce.js")(r,E,l,C,m,k),e("./settle.js")(r,E,k),e("./some.js")(r,E,l),e("./filter.js")(r,m),e("./each.js")(r,m),e("./any.js")(r),p.toFastProperties(r),p.toFastProperties(r.prototype),s({a:1}),s({b:2}),s({c:3}),s(1),s(function(){}),s(undefined),s(!1),s(new r(m)),k.setBounds(d.firstLineError,p.lastLineError),r}},{"./any.js":1,"./async":2,"./bind":3,"./call_get.js":5,"./cancel":6,"./catch_filter":7,"./context":8,"./debuggability":9,"./direct_resolve":10,"./each.js":11,"./errors":12,"./es5":13,"./filter.js":14,"./finally":15,"./generators.js":16,"./join":17,"./map.js":18,"./method":19,"./nodeback":20,"./nodeify.js":21,"./promise_array":23,"./promisify.js":24,"./props.js":25,"./race.js":27,"./reduce.js":28,"./settle.js":30,"./some.js":31,"./synchronous_inspection":32,"./thenables":33,"./timers.js":34,"./using.js":35,"./util":36}],23:[function(e,t,n){"use strict";t.exports=function(t,n,r,i,o){function s(e){switch(e){case-2:return[];case-3:return{}}}function a(e){var r=this._promise=new t(n);e instanceof t&&r._propagateFrom(e,3),r._setOnCancel(this),this._values=e,this._length=0,this._totalResolved=0,this._init(undefined,-2)}var u=e("./util");u.isArray;return u.inherits(a,o),a.prototype.length=function(){return this._length},a.prototype.promise=function(){return this._promise},a.prototype._init=function c(e,n){var o=r(this._values,this._promise);if(o instanceof t){o=o._target();var a=o._bitField;if(this._values=o,0===(50397184&a))return this._promise._setAsyncGuaranteed(),o._then(c,this._reject,undefined,this,n);if(0===(33554432&a))return 0!==(16777216&a)?this._reject(o._reason()):this._cancel();o=o._value()}if(o=u.asArray(o),null===o){var l=i("expecting an array or an iterable object but got "+u.classString(o)).reason();return void this._promise._rejectCallback(l,!1)}return 0===o.length?void(-5===n?this._resolveEmptyArray():this._resolve(s(n))):void this._iterate(o)},a.prototype._iterate=function(e){var n=this.getActualLength(e.length);this._length=n,this._values=this.shouldCopyValues()?new Array(n):this._values;for(var i=this._promise,o=!1,s=null,a=0;n>a;++a){var u=r(e[a],i);u instanceof t?(u=u._target(),s=u._bitField):s=null,o?null!==s&&u.suppressUnhandledRejections():null!==s?0===(50397184&s)?(u._proxy(this,a),this._values[a]=u):o=0!==(33554432&s)?this._promiseFulfilled(u._value(),a):0!==(16777216&s)?this._promiseRejected(u._reason(),a):this._promiseCancelled(a):o=this._promiseFulfilled(u,a)}o||i._setAsyncGuaranteed()},a.prototype._isResolved=function(){return null===this._values},a.prototype._resolve=function(e){this._values=null,this._promise._fulfill(e)},a.prototype._cancel=function(){!this._isResolved()&&this._promise.isCancellable()&&(this._values=null,this._promise._cancel())},a.prototype._reject=function(e){this._values=null,this._promise._rejectCallback(e,!1)},a.prototype._promiseFulfilled=function(e,t){this._values[t]=e;var n=++this._totalResolved;return n>=this._length?(this._resolve(this._values),!0):!1},a.prototype._promiseCancelled=function(){return this._cancel(),!0},a.prototype._promiseRejected=function(e){return this._totalResolved++,this._reject(e),!0},a.prototype._resultCancelled=function(){if(!this._isResolved()){var e=this._values;if(this._cancel(),e instanceof t)e.cancel();else for(var n=0;n<e.length;++n)e[n]instanceof t&&e[n].cancel()}},a.prototype.shouldCopyValues=function(){return!0},a.prototype.getActualLength=function(e){return e},a}},{"./util":36}],24:[function(e,t,n){"use strict";t.exports=function(t,n){function r(e){return!C.test(e)}function i(e){try{return e.__isPromisified__===!0}catch(t){return!1}}function o(e,t,n){var r=h.getDataPropertyOrDefault(e,t+n,b);return r?i(r):!1}function s(e,t,n){for(var r=0;r<e.length;r+=2){var i=e[r];if(n.test(i))for(var o=i.replace(n,""),s=0;s<e.length;s+=2)if(e[s]===o)throw new g("Cannot promisify an API that has normal methods with '%s'-suffix\n\n    See http://goo.gl/MqrFmX\n".replace("%s",t))}}function a(e,t,n,r){for(var a=h.inheritedDataKeys(e),u=[],c=0;c<a.length;++c){var l=a[c],f=e[l],p=r===E?!0:E(l,f,e);"function"!=typeof f||i(f)||o(e,l,t)||!r(l,f,e,p)||u.push(l,f)}return s(u,t,n),u}function u(e,r,i,o,s,a){function u(){var i=r;r===p&&(i=this);var o=new t(n);o._captureStackTrace();var s="string"==typeof l&&this!==c?this[l]:e,u=d(o,a);try{s.apply(i,_(arguments,u))}catch(f){o._rejectCallback(y(f),!0,!0)}return o._isFateSealed()||o._setAsyncGuaranteed(),o}var c=function(){return this}(),l=e;return"string"==typeof l&&(e=o),h.notEnumerableProp(u,"__isPromisified__",!0),u}function c(e,t,n,r,i){for(var o=new RegExp(j(t)+"$"),s=a(e,t,o,n),u=0,c=s.length;c>u;u+=2){var l=s[u],f=s[u+1],d=l+t;if(r===F)e[d]=F(l,p,l,f,t,i);else{var _=r(f,function(){return F(l,p,l,f,t,i)});h.notEnumerableProp(_,"__isPromisified__",!0),e[d]=_}}return h.toFastProperties(e),e}function l(e,t,n){return F(e,t,undefined,e,null,n)}var f,p={},h=e("./util"),d=e("./nodeback"),_=h.withAppended,y=h.maybeWrapAsError,v=h.canEvaluate,g=e("./errors").TypeError,m="Async",b={__isPromisified__:!0},w=["arity","length","name","arguments","caller","callee","prototype","__isPromisified__"],C=new RegExp("^(?:"+w.join("|")+")$"),E=function(e){return h.isIdentifier(e)&&"_"!==e.charAt(0)&&"constructor"!==e},j=function(e){return e.replace(/([$])/,"\\$")},F=v?f:u;t.promisify=function(e,t){if("function"!=typeof e)throw new g("expecting a function but got "+h.classString(e));if(i(e))return e;t=Object(t);var n=t.context===undefined?p:t.context,o=!!t.multiArgs,s=l(e,n,o);return h.copyDescriptors(e,s,r),s},t.promisifyAll=function(e,t){if("function"!=typeof e&&"object"!=typeof e)throw new g("the target of promisifyAll must be an object or a function\n\n    See http://goo.gl/MqrFmX\n");t=Object(t);var n=!!t.multiArgs,r=t.suffix;"string"!=typeof r&&(r=m);var i=t.filter;"function"!=typeof i&&(i=E);var o=t.promisifier;if("function"!=typeof o&&(o=F),!h.isIdentifier(r))throw new RangeError("suffix must be a valid identifier\n\n    See http://goo.gl/MqrFmX\n");for(var s=h.inheritedDataKeys(e),a=0;a<s.length;++a){var u=e[s[a]];"constructor"!==s[a]&&h.isClass(u)&&(c(u.prototype,r,i,o,n),c(u,r,i,o,n))}return c(e,r,i,o,n)}}},{"./errors":12,"./nodeback":20,"./util":36}],25:[function(e,t,n){"use strict";t.exports=function(t,n,r,i){function o(e){var t,n=!1;if(a!==undefined&&e instanceof a)t=f(e),n=!0;else{var r=l.keys(e),i=r.length;t=new Array(2*i);for(var o=0;i>o;++o){var s=r[o];t[o]=e[s],t[o+i]=s}}this.constructor$(t),this._isMap=n,this._init$(undefined,-3)}function s(e){var n,s=r(e);return c(s)?(n=s instanceof t?s._then(t.props,undefined,undefined,undefined,undefined):new o(s).promise(),s instanceof t&&n._propagateFrom(s,2),n):i("cannot await properties of a non-object\n\n    See http://goo.gl/MqrFmX\n")}var a,u=e("./util"),c=u.isObject,l=e("./es5");"function"==typeof Map&&(a=Map);var f=function(){function e(e,r){this[t]=e,this[t+n]=r,t++}var t=0,n=0;return function(r){n=r.size,t=0;var i=new Array(2*r.size);return r.forEach(e,i),i}}(),p=function(e){for(var t=new a,n=e.length/2|0,r=0;n>r;++r){var i=e[n+r],o=e[r];t.set(i,o)}return t};u.inherits(o,n),o.prototype._init=function(){},o.prototype._promiseFulfilled=function(e,t){this._values[t]=e;var n=++this._totalResolved;if(n>=this._length){var r;if(this._isMap)r=p(this._values);else{r={};for(var i=this.length(),o=0,s=this.length();s>o;++o)r[this._values[o+i]]=this._values[o]}return this._resolve(r),!0}return!1},o.prototype.shouldCopyValues=function(){return!1},o.prototype.getActualLength=function(e){return e>>1},t.prototype.props=function(){return s(this)},t.props=function(e){
return s(e)}}},{"./es5":13,"./util":36}],26:[function(e,t,n){"use strict";function r(e,t,n,r,i){for(var o=0;i>o;++o)n[o+r]=e[o+t],e[o+t]=void 0}function i(e){this._capacity=e,this._length=0,this._front=0}i.prototype._willBeOverCapacity=function(e){return this._capacity<e},i.prototype._pushOne=function(e){var t=this.length();this._checkCapacity(t+1);var n=this._front+t&this._capacity-1;this[n]=e,this._length=t+1},i.prototype._unshiftOne=function(e){var t=this._capacity;this._checkCapacity(this.length()+1);var n=this._front,r=(n-1&t-1^t)-t;this[r]=e,this._front=r,this._length=this.length()+1},i.prototype.unshift=function(e,t,n){this._unshiftOne(n),this._unshiftOne(t),this._unshiftOne(e)},i.prototype.push=function(e,t,n){var r=this.length()+3;if(this._willBeOverCapacity(r))return this._pushOne(e),this._pushOne(t),void this._pushOne(n);var i=this._front+r-3;this._checkCapacity(r);var o=this._capacity-1;this[i+0&o]=e,this[i+1&o]=t,this[i+2&o]=n,this._length=r},i.prototype.shift=function(){var e=this._front,t=this[e];return this[e]=undefined,this._front=e+1&this._capacity-1,this._length--,t},i.prototype.length=function(){return this._length},i.prototype._checkCapacity=function(e){this._capacity<e&&this._resizeTo(this._capacity<<1)},i.prototype._resizeTo=function(e){var t=this._capacity;this._capacity=e;var n=this._front,i=this._length,o=n+i&t-1;r(this,0,this,t,o)},t.exports=i},{}],27:[function(e,t,n){"use strict";t.exports=function(t,n,r,i){function o(e,o){var u=r(e);if(u instanceof t)return a(u);if(e=s.asArray(e),null===e)return i("expecting an array or an iterable object but got "+s.classString(e));var c=new t(n);o!==undefined&&c._propagateFrom(o,3);for(var l=c._fulfill,f=c._reject,p=0,h=e.length;h>p;++p){var d=e[p];(d!==undefined||p in e)&&t.cast(d)._then(l,f,undefined,c,null)}return c}var s=e("./util"),a=function(e){return e.then(function(t){return o(t,e)})};t.race=function(e){return o(e,undefined)},t.prototype.race=function(){return o(this,undefined)}}},{"./util":36}],28:[function(e,t,n){"use strict";t.exports=function(t,n,r,i,o,s){function a(e,n,r,i){this.constructor$(e);var s=p();this._fn=null===s?n:s.bind(n),r!==undefined&&(r=t.resolve(r),r._attachCancellationCallback(this)),this._initialValue=r,this._currentCancellable=null,this._eachValues=i===o?[]:undefined,this._promise._captureStackTrace(),this._init$(undefined,-5)}function u(e,t){this.isFulfilled()?t._resolve(e):t._reject(e)}function c(e,t,n,i){if("function"!=typeof t)return r("expecting a function but got "+h.classString(t));var o=new a(e,t,n,i);return o.promise()}function l(e){this.accum=e,this.array._gotAccum(e);var n=i(this.value,this.array._promise);return n instanceof t?(this.array._currentCancellable=n,n._then(f,undefined,undefined,this,undefined)):f.call(this,n)}function f(e){var n=this.array,r=n._promise,i=d(n._fn);r._pushContext();var o;o=n._eachValues!==undefined?i.call(r._boundValue(),e,this.index,this.length):i.call(r._boundValue(),this.accum,e,this.index,this.length),o instanceof t&&(n._currentCancellable=o);var a=r._popContext();return s.checkForgottenReturns(o,a,n._eachValues!==undefined?"Promise.each":"Promise.reduce",r),o}var p=t._getDomain,h=e("./util"),d=h.tryCatch;h.inherits(a,n),a.prototype._gotAccum=function(e){this._eachValues!==undefined&&e!==o&&this._eachValues.push(e)},a.prototype._eachComplete=function(e){return this._eachValues.push(e),this._eachValues},a.prototype._init=function(){},a.prototype._resolveEmptyArray=function(){this._resolve(this._eachValues!==undefined?this._eachValues:this._initialValue)},a.prototype.shouldCopyValues=function(){return!1},a.prototype._resolve=function(e){this._promise._resolveCallback(e),this._values=null},a.prototype._resultCancelled=function(e){return e===this._initialValue?this._cancel():void(this._isResolved()||(this._resultCancelled$(),this._currentCancellable instanceof t&&this._currentCancellable.cancel(),this._initialValue instanceof t&&this._initialValue.cancel()))},a.prototype._iterate=function(e){this._values=e;var n,r,i=e.length;if(this._initialValue!==undefined?(n=this._initialValue,r=0):(n=t.resolve(e[0]),r=1),this._currentCancellable=n,!n.isRejected())for(;i>r;++r){var o={accum:null,value:e[r],index:r,length:i,array:this};n=n._then(l,undefined,undefined,o,undefined)}this._eachValues!==undefined&&(n=n._then(this._eachComplete,undefined,undefined,this,undefined)),n._then(u,u,undefined,n,this)},t.prototype.reduce=function(e,t){return c(this,e,t,null)},t.reduce=function(e,t,n,r){return c(e,t,n,r)}}},{"./util":36}],29:[function(e,t,n){"use strict";var r,i=e("./util"),o=function(){throw new Error("No async scheduler available\n\n    See http://goo.gl/MqrFmX\n")},s=i.getNativePromise();if(i.isNode&&"undefined"==typeof MutationObserver){var a=global.setImmediate,u=process.nextTick;r=i.isRecentNode?function(e){a.call(global,e)}:function(e){u.call(process,e)}}else if("function"==typeof s){var c=s.resolve();r=function(e){c.then(e)}}else r="undefined"==typeof MutationObserver||"undefined"!=typeof window&&window.navigator&&window.navigator.standalone?"undefined"!=typeof setImmediate?function(e){setImmediate(e)}:"undefined"!=typeof setTimeout?function(e){setTimeout(e,0)}:o:function(){var e=document.createElement("div"),t={attributes:!0},n=!1,r=document.createElement("div"),i=new MutationObserver(function(){e.classList.toggle("foo"),n=!1});i.observe(r,t);var o=function(){n||(n=!0,r.classList.toggle("foo"))};return function(n){var r=new MutationObserver(function(){r.disconnect(),n()});r.observe(e,t),o()}}();t.exports=r},{"./util":36}],30:[function(e,t,n){"use strict";t.exports=function(t,n,r){function i(e){this.constructor$(e)}var o=t.PromiseInspection,s=e("./util");s.inherits(i,n),i.prototype._promiseResolved=function(e,t){this._values[e]=t;var n=++this._totalResolved;return n>=this._length?(this._resolve(this._values),!0):!1},i.prototype._promiseFulfilled=function(e,t){var n=new o;return n._bitField=33554432,n._settledValueField=e,this._promiseResolved(t,n)},i.prototype._promiseRejected=function(e,t){var n=new o;return n._bitField=16777216,n._settledValueField=e,this._promiseResolved(t,n)},t.settle=function(e){return r.deprecated(".settle()",".reflect()"),new i(e).promise()},t.prototype.settle=function(){return t.settle(this)}}},{"./util":36}],31:[function(e,t,n){"use strict";t.exports=function(t,n,r){function i(e){this.constructor$(e),this._howMany=0,this._unwrap=!1,this._initialized=!1}function o(e,t){if((0|t)!==t||0>t)return r("expecting a positive integer\n\n    See http://goo.gl/MqrFmX\n");var n=new i(e),o=n.promise();return n.setHowMany(t),n.init(),o}var s=e("./util"),a=e("./errors").RangeError,u=e("./errors").AggregateError,c=s.isArray,l={};s.inherits(i,n),i.prototype._init=function(){if(this._initialized){if(0===this._howMany)return void this._resolve([]);this._init$(undefined,-5);var e=c(this._values);!this._isResolved()&&e&&this._howMany>this._canPossiblyFulfill()&&this._reject(this._getRangeError(this.length()))}},i.prototype.init=function(){this._initialized=!0,this._init()},i.prototype.setUnwrap=function(){this._unwrap=!0},i.prototype.howMany=function(){return this._howMany},i.prototype.setHowMany=function(e){this._howMany=e},i.prototype._promiseFulfilled=function(e){return this._addFulfilled(e),this._fulfilled()===this.howMany()?(this._values.length=this.howMany(),1===this.howMany()&&this._unwrap?this._resolve(this._values[0]):this._resolve(this._values),!0):!1},i.prototype._promiseRejected=function(e){return this._addRejected(e),this._checkOutcome()},i.prototype._promiseCancelled=function(){return this._values instanceof t||null==this._values?this._cancel():(this._addRejected(l),this._checkOutcome())},i.prototype._checkOutcome=function(){if(this.howMany()>this._canPossiblyFulfill()){for(var e=new u,t=this.length();t<this._values.length;++t)this._values[t]!==l&&e.push(this._values[t]);return e.length>0?this._reject(e):this._cancel(),!0}return!1},i.prototype._fulfilled=function(){return this._totalResolved},i.prototype._rejected=function(){return this._values.length-this.length()},i.prototype._addRejected=function(e){this._values.push(e)},i.prototype._addFulfilled=function(e){this._values[this._totalResolved++]=e},i.prototype._canPossiblyFulfill=function(){return this.length()-this._rejected()},i.prototype._getRangeError=function(e){var t="Input array must contain at least "+this._howMany+" items but contains only "+e+" items";return new a(t)},i.prototype._resolveEmptyArray=function(){this._reject(this._getRangeError(0))},t.some=function(e,t){return o(e,t)},t.prototype.some=function(e){return o(this,e)},t._SomePromiseArray=i}},{"./errors":12,"./util":36}],32:[function(e,t,n){"use strict";t.exports=function(e){function t(e){e!==undefined?(e=e._target(),this._bitField=e._bitField,this._settledValueField=e._isFateSealed()?e._settledValue():undefined):(this._bitField=0,this._settledValueField=undefined)}t.prototype._settledValue=function(){return this._settledValueField};var n=t.prototype.value=function(){if(!this.isFulfilled())throw new TypeError("cannot get fulfillment value of a non-fulfilled promise\n\n    See http://goo.gl/MqrFmX\n");return this._settledValue()},r=t.prototype.error=t.prototype.reason=function(){if(!this.isRejected())throw new TypeError("cannot get rejection reason of a non-rejected promise\n\n    See http://goo.gl/MqrFmX\n");return this._settledValue()},i=t.prototype.isFulfilled=function(){return 0!==(33554432&this._bitField)},o=t.prototype.isRejected=function(){return 0!==(16777216&this._bitField)},s=t.prototype.isPending=function(){return 0===(50397184&this._bitField)},a=t.prototype.isResolved=function(){return 0!==(50331648&this._bitField)};t.prototype.isCancelled=e.prototype._isCancelled=function(){return 65536===(65536&this._bitField)},e.prototype.isCancelled=function(){return this._target()._isCancelled()},e.prototype.isPending=function(){return s.call(this._target())},e.prototype.isRejected=function(){return o.call(this._target())},e.prototype.isFulfilled=function(){return i.call(this._target())},e.prototype.isResolved=function(){return a.call(this._target())},e.prototype.value=function(){return n.call(this._target())},e.prototype.reason=function(){var e=this._target();return e._unsetRejectionIsUnhandled(),r.call(e)},e.prototype._value=function(){return this._settledValue()},e.prototype._reason=function(){return this._unsetRejectionIsUnhandled(),this._settledValue()},e.PromiseInspection=t}},{}],33:[function(e,t,n){"use strict";t.exports=function(t,n){function r(e,r){if(l(e)){if(e instanceof t)return e;var i=o(e);if(i===c){r&&r._pushContext();var u=t.reject(i.e);return r&&r._popContext(),u}if("function"==typeof i){if(s(e)){var u=new t(n);return e._then(u._fulfill,u._reject,undefined,u,null),u}return a(e,i,r)}}return e}function i(e){return e.then}function o(e){try{return i(e)}catch(t){return c.e=t,c}}function s(e){try{return f.call(e,"_promise0")}catch(t){return!1}}function a(e,r,i){function o(e){a&&(a._resolveCallback(e),a=null)}function s(e){a&&(a._rejectCallback(e,f,!0),a=null)}var a=new t(n),l=a;i&&i._pushContext(),a._captureStackTrace(),i&&i._popContext();var f=!0,p=u.tryCatch(r).call(e,o,s);return f=!1,a&&p===c&&(a._rejectCallback(p.e,!0,!0),a=null),l}var u=e("./util"),c=u.errorObj,l=u.isObject,f={}.hasOwnProperty;return r}},{"./util":36}],34:[function(e,t,n){"use strict";t.exports=function(t,n,r){function i(e){this.handle=e}function o(e){return clearTimeout(this.handle),e}function s(e){throw clearTimeout(this.handle),e}var a=e("./util"),u=t.TimeoutError;i.prototype._resultCancelled=function(){clearTimeout(this.handle)};var c=function(e){return l(+this).thenReturn(e)},l=t.delay=function(e,o){var s,a;return o!==undefined?(s=t.resolve(o)._then(c,null,null,e,undefined),r.cancellation()&&o instanceof t&&s._setOnCancel(o)):(s=new t(n),a=setTimeout(function(){s._fulfill()},+e),r.cancellation()&&s._setOnCancel(new i(a))),s._setAsyncGuaranteed(),s};t.prototype.delay=function(e){return l(e,this)};var f=function(e,t,n){var r;r="string"!=typeof t?t instanceof Error?t:new u("operation timed out"):new u(t),a.markAsOriginatingFromRejection(r),e._attachExtraTrace(r),e._reject(r),null!=n&&n.cancel()};t.prototype.timeout=function(e,t){e=+e;var n,a,u=new i(setTimeout(function(){n.isPending()&&f(n,t,a)},e));return r.cancellation()?(a=this.then(),n=a._then(o,s,undefined,u,undefined),n._setOnCancel(u)):n=this._then(o,s,undefined,u,undefined),n}}},{"./util":36}],35:[function(e,t,n){"use strict";t.exports=function(t,n,r,i,o,s){function a(e){setTimeout(function(){throw e},0)}function u(e){var t=r(e);return t!==e&&"function"==typeof e._isDisposable&&"function"==typeof e._getDisposer&&e._isDisposable()&&t._setDisposable(e._getDisposer()),t}function c(e,n){function i(){if(s>=c)return l._fulfill();var o=u(e[s++]);if(o instanceof t&&o._isDisposable()){try{o=r(o._getDisposer().tryDispose(n),e.promise)}catch(f){return a(f)}if(o instanceof t)return o._then(i,a,null,null,null)}i()}var s=0,c=e.length,l=new t(o);return i(),l}function l(e,t,n){this._data=e,this._promise=t,this._context=n}function f(e,t,n){this.constructor$(e,t,n)}function p(e){return l.isDisposer(e)?(this.resources[this.index]._setDisposable(e),e.promise()):e}function h(e){this.length=e,this.promise=null,this[e-1]=null}var d=e("./util"),_=e("./errors").TypeError,y=e("./util").inherits,v=d.errorObj,g=d.tryCatch,m={};l.prototype.data=function(){return this._data},l.prototype.promise=function(){return this._promise},l.prototype.resource=function(){return this.promise().isFulfilled()?this.promise().value():m},l.prototype.tryDispose=function(e){var t=this.resource(),n=this._context;n!==undefined&&n._pushContext();var r=t!==m?this.doDispose(t,e):null;return n!==undefined&&n._popContext(),this._promise._unsetDisposable(),this._data=null,r},l.isDisposer=function(e){return null!=e&&"function"==typeof e.resource&&"function"==typeof e.tryDispose},y(f,l),f.prototype.doDispose=function(e,t){var n=this.data();return n.call(e,e,t)},h.prototype._resultCancelled=function(){for(var e=this.length,n=0;e>n;++n){var r=this[n];r instanceof t&&r.cancel()}},t.using=function(){var e=arguments.length;if(2>e)return n("you must pass at least 2 arguments to Promise.using");var i=arguments[e-1];if("function"!=typeof i)return n("expecting a function but got "+d.classString(i));var o,a=!0;2===e&&Array.isArray(arguments[0])?(o=arguments[0],e=o.length,a=!1):(o=arguments,e--);for(var u=new h(e),f=0;e>f;++f){var _=o[f];if(l.isDisposer(_)){var y=_;_=_.promise(),_._setDisposable(y)}else{var m=r(_);m instanceof t&&(_=m._then(p,null,null,{resources:u,index:f},undefined))}u[f]=_}for(var b=new Array(u.length),f=0;f<b.length;++f)b[f]=t.resolve(u[f]).reflect();var w=t.all(b).then(function(e){for(var t=0;t<e.length;++t){var n=e[t];if(n.isRejected())return v.e=n.error(),v;if(!n.isFulfilled())return void w.cancel();e[t]=n.value()}C._pushContext(),i=g(i);var r=a?i.apply(undefined,e):i(e),o=C._popContext();return s.checkForgottenReturns(r,o,"Promise.using",C),r}),C=w.lastly(function(){var e=new t.PromiseInspection(w);return c(u,e)});return u.promise=C,C._setOnCancel(u),C},t.prototype._setDisposable=function(e){this._bitField=131072|this._bitField,this._disposer=e},t.prototype._isDisposable=function(){return(131072&this._bitField)>0},t.prototype._getDisposer=function(){return this._disposer},t.prototype._unsetDisposable=function(){this._bitField=-131073&this._bitField,this._disposer=undefined},t.prototype.disposer=function(e){if("function"==typeof e)return new f(e,this,i());throw new _}}},{"./errors":12,"./util":36}],36:[function(e,t,n){"use strict";function r(){try{var e=S;return S=null,e.apply(this,arguments)}catch(t){return T.e=t,T}}function i(e){return S=e,r}function o(e){return null==e||e===!0||e===!1||"string"==typeof e||"number"==typeof e}function s(e){return"function"==typeof e||"object"==typeof e&&null!==e}function a(e){return o(e)?new Error(y(e)):e}function u(e,t){var n,r=e.length,i=new Array(r+1);for(n=0;r>n;++n)i[n]=e[n];return i[n]=t,i}function c(e,t,n){if(!F.isES5)return{}.hasOwnProperty.call(e,t)?e[t]:undefined;var r=Object.getOwnPropertyDescriptor(e,t);return null!=r?null==r.get&&null==r.set?r.value:n:void 0}function l(e,t,n){if(o(e))return e;var r={value:n,configurable:!0,enumerable:!1,writable:!0};return F.defineProperty(e,t,r),e}function f(e){throw e}function p(e){try{if("function"==typeof e){var t=F.names(e.prototype),n=F.isES5&&t.length>1,r=t.length>0&&!(1===t.length&&"constructor"===t[0]),i=O.test(e+"")&&F.names(e).length>0;if(n||r||i)return!0}return!1}catch(o){return!1}}function h(e){function t(){}t.prototype=e;for(var n=8;n--;)new t;return e}function d(e){return R.test(e)}function _(e,t,n){for(var r=new Array(e),i=0;e>i;++i)r[i]=t+i+n;return r}function y(e){try{return e+""}catch(t){return"[no string representation]"}}function v(e){return null!==e&&"object"==typeof e&&"string"==typeof e.message&&"string"==typeof e.name}function g(e){try{l(e,"isOperational",!0)}catch(t){}}function m(e){return null==e?!1:e instanceof Error.__BluebirdErrorTypes__.OperationalError||e.isOperational===!0}function b(e){return v(e)&&F.propertyIsWritable(e,"stack")}function w(e){return{}.toString.call(e)}function C(e,t,n){for(var r=F.names(e),i=0;i<r.length;++i){var o=r[i];if(n(o))try{F.defineProperty(t,o,F.getDescriptor(e,o))}catch(s){}}}function E(e,t){return L?process.env[e]:t}function j(){if("function"==typeof Promise)try{var e=new Promise(function(){});if("[object Promise]"==={}.toString.call(e))return Promise}catch(t){}}var F=e("./es5"),k="undefined"==typeof navigator,T={e:{}},S,A="undefined"!=typeof self?self:"undefined"!=typeof window?window:"undefined"!=typeof global?global:this!==undefined?this:null,P=function(e,t){function n(){this.constructor=e,this.constructor$=t;for(var n in t.prototype)r.call(t.prototype,n)&&"$"!==n.charAt(n.length-1)&&(this[n+"$"]=t.prototype[n])}var r={}.hasOwnProperty;return n.prototype=t.prototype,e.prototype=new n,e.prototype},x=function(){var e=[Array.prototype,Object.prototype,Function.prototype],t=function(t){for(var n=0;n<e.length;++n)if(e[n]===t)return!0;return!1};if(F.isES5){var n=Object.getOwnPropertyNames;return function(e){for(var r=[],i=Object.create(null);null!=e&&!t(e);){var o;try{o=n(e)}catch(s){return r}for(var a=0;a<o.length;++a){var u=o[a];if(!i[u]){i[u]=!0;var c=Object.getOwnPropertyDescriptor(e,u);null!=c&&null==c.get&&null==c.set&&r.push(u)}}e=F.getPrototypeOf(e)}return r}}var r={}.hasOwnProperty;return function(n){if(t(n))return[];var i=[];e:for(var o in n)if(r.call(n,o))i.push(o);else{for(var s=0;s<e.length;++s)if(r.call(e[s],o))continue e;i.push(o)}return i}}(),O=/this\s*\.\s*\S+\s*=/,R=/^[a-z$_][a-z$_0-9]*$/i,V=function(){return"stack"in new Error?function(e){return b(e)?e:new Error(y(e))}:function(e){if(b(e))return e;try{throw new Error(y(e))}catch(t){return t}}}(),I=function(e){return F.isArray(e)?e:null};if("undefined"!=typeof Symbol&&Symbol.iterator){var D="function"==typeof Array.from?function(e){return Array.from(e)}:function(e){for(var t,n=[],r=e[Symbol.iterator]();!(t=r.next()).done;)n.push(t.value);return n};I=function(e){return F.isArray(e)?e:null!=e&&"function"==typeof e[Symbol.iterator]?D(e):null}}var L="undefined"!=typeof process&&"[object process]"===w(process).toLowerCase(),N={isClass:p,isIdentifier:d,inheritedDataKeys:x,getDataPropertyOrDefault:c,thrower:f,isArray:F.isArray,asArray:I,notEnumerableProp:l,isPrimitive:o,isObject:s,isError:v,canEvaluate:k,errorObj:T,tryCatch:i,inherits:P,withAppended:u,maybeWrapAsError:a,toFastProperties:h,filledRange:_,toString:y,canAttachTrace:b,ensureErrorObject:V,originatesFromRejection:m,markAsOriginatingFromRejection:g,classString:w,copyDescriptors:C,hasDevTools:"undefined"!=typeof chrome&&chrome&&"function"==typeof chrome.loadTimes,isNode:L,env:E,global:A,getNativePromise:j};N.isRecentNode=N.isNode&&function(){var e=process.versions.node.split(".").map(Number);return 0===e[0]&&e[1]>10||e[0]>0}(),N.isNode&&N.toFastProperties(process);try{throw new Error}catch(M){N.lastLineError=M}t.exports=N},{"./es5":13}]},{},[4])(4)}),"undefined"!=typeof window&&null!==window?window.P=window.Promise:"undefined"!=typeof self&&null!==self&&(self.P=self.Promise),FlashClient.prototype.init=function(e,t,n){if(e&&!this.checkUnitSource(e))throw new Error("unit not SWF");this.addWrapperEl(),this.initWrapper(n),this.embedSWF()},FlashClient.prototype.checkUnitSource=function(e){return-1!=e.indexOf(".swf")},FlashClient.prototype.embedSWF=function(){try{swfobject.embedSWF(this.unitSrc,this.sdkUnique,this.options.width,this.options.height,this.flashVersion,undefined,this.flashvars(),this.params,{})}catch(e){console.error(e)}},FlashClient.prototype.initWrapper=function(e){try{this.eventManager=new Wrapper(this.options.aid,this.options.width,this.options.height,this.options.sid,e).wrap(this.id)}catch(t){console.error(t)}},FlashClient.prototype.addWrapperEl=function(){var e=document.createElement("div");this.sdkUnique="SdkIntegration"+this.id,e.className="flash-blocker",e.innerHTML='<div id="'+this.sdkUnique+'"></div>',this.options.containerEl.appendChild(e)},FlashClient.prototype.flashvars=function(){return{onReady:"window.VpaidflashWrappers["+this.id+"].startFlashWrapper"}};var getFlashVersion=function(){var e,t,n="Shockwave",r="Flash",i=n+" "+r,o=n+r+"."+n+r,s="application/x-shockwave-flash",a=navigator,u=parseFloat,c=a.plugins,l=a.mimeTypes;if(c&&"object"==typeof c[i]){if(e=c[i].description,e&&(!l||!l[s]||l[s].enabledPlugin))return u(e.replace(/^.*\s+(\S+)\s+\S+$/,"$1"))}else if(window.ActiveXObject)try{if(t=new ActiveXObject(o),t&&(e=t.GetVariable("$version")))return u(e.replace(/^\S+\s+(\d+),(\d+).*$/i,"$1.$2"))}catch(f){}return-1};Wrapper.prototype.wrap=function(e){var t=this.getConfig(e),n=new EventManager,r=this.width,i=this.height;return window.VpaidflashWrappers||(window.VpaidflashWrappers={}),window.VpaidflashWrappers[e]={},window.VpaidflashWrappers[e]={adLoadedClosure:function(){n.trigger("loaded"),window["SdkIntegration"+e].startAd()},adErrorClosure:function(){n.trigger("error")},adCompleteClosure:function(){n.trigger("complete")},pausedClosure:function(){n.trigger("paused")},resumedClosure:function(){n.trigger("resumed")},muteClosure:function(){n.trigger("mute")},unmuteClosure:function(){n.trigger("unmute")},adStartedClosure:function(){n.trigger("started")},startFlashWrapper:function(){var n=window["SdkIntegration"+e];n.width=r,n.height=i,n.loadAd(t)}},n},Wrapper.prototype.getConfig=function(e){var t="window.VpaidflashWrappers["+e+"]";return JSON.stringify({adCompleteClosure:t+".adCompleteClosure",adStartedClosure:t+".adStartedClosure",adLoadedClosure:t+".adLoadedClosure",adErrorClosure:t+".adErrorClosure",resumedClosure:t+".resumedClosure",pausedClosure:t+".pausedClosure",unmuteClosure:t+".unmuteClosure",muteClosure:t+".muteClosure",volume:1,width:this.width,height:this.height,vastUrl:this.getVastUrl()})},Wrapper.prototype.getVastUrl=function(){return this.configUrl||"//vast.videe.tv/vast-proxy/?aid="+this.aid+"&content_page_url="+this.host+"&player_height="+this.height+"&player_width="+this.width+"&sid="+this.sid+"&cb="+this.cd};var swfobject=function(){function e(){if(!q&&document.getElementsByTagName("body")[0]){try{var e,t=v("span");t.style.display="none",e=N.getElementsByTagName("body")[0].appendChild(t),e.parentNode.removeChild(e),e=null,t=null}catch(n){return}q=!0;for(var r=H.length,i=0;r>i;i++)H[i]()}}function t(e){q?e():H[H.length]=e}function n(e){if(typeof L.addEventListener!=P)L.addEventListener("load",e,!1);else if(typeof N.addEventListener!=P)N.addEventListener("load",e,!1);else if(typeof L.attachEvent!=P)m(L,"onload",e);else if("function"==typeof L.onload){var t=L.onload;L.onload=function(){t(),e()}}else L.onload=e}function r(){var e=N.getElementsByTagName("body")[0],t=v(x);t.setAttribute("style","visibility: hidden;"),t.setAttribute("type",V);var n=e.appendChild(t);if(n){var r=0;!function o(){if(typeof n.GetVariable!=P)try{var s=n.GetVariable("$version");s&&(s=s.split(" ")[1].split(","),G.pv=[g(s[0]),g(s[1]),g(s[2])])}catch(a){G.pv=[8,0,0]}else if(10>r)return r++,void setTimeout(o,10);e.removeChild(t),n=null,i()}()}else i()}function i(){var e=B.length;if(e>0)for(var t=0;e>t;t++){var n=B[t].id,r=B[t].callbackFn,i={success:!1,id:n};if(G.pv[0]>0){var c=y(n);if(c)if(!b(B[t].swfVersion)||G.wk&&G.wk<312)if(B[t].expressInstall&&s()){var l={};l.data=B[t].expressInstall,l.width=c.getAttribute("width")||"0",l.height=c.getAttribute("height")||"0",c.getAttribute("class")&&(l.styleclass=c.getAttribute("class")),c.getAttribute("align")&&(l.align=c.getAttribute("align"));for(var f={},p=c.getElementsByTagName("param"),h=p.length,d=0;h>d;d++)"movie"!=p[d].getAttribute("name").toLowerCase()&&(f[p[d].getAttribute("name")]=p[d].getAttribute("value"));a(l,f,n,r)}else u(c),r&&r(i);else C(n,!0),r&&(i.success=!0,i.ref=o(n),i.id=n,r(i))}else if(C(n,!0),r){var _=o(n);_&&typeof _.SetVariable!=P&&(i.success=!0,i.ref=_,i.id=_.id),r(i)}}}function o(e){var t=null,n=y(e);return n&&"OBJECT"===n.nodeName.toUpperCase()&&(t=typeof n.SetVariable!==P?n:n.getElementsByTagName(x)[0]||n),t}function s(){return!Q&&b("6.0.65")&&(G.win||G.mac)&&!(G.wk&&G.wk<312)}function a(e,t,n,r){var i=y(n);if(n=_(n),Q=!0,k=r||null,T={success:!1,id:n},i){"OBJECT"==i.nodeName.toUpperCase()?(j=c(i),F=null):(j=i,F=n),e.id=I,(typeof e.width==P||!/%$/.test(e.width)&&g(e.width)<310)&&(e.width="310"),(typeof e.height==P||!/%$/.test(e.height)&&g(e.height)<137)&&(e.height="137");var o=G.ie?"ActiveX":"PlugIn",s="MMredirectURL="+encodeURIComponent(L.location.toString().replace(/&/g,"%26"))+"&MMplayerType="+o+"&MMdoctitle="+encodeURIComponent(N.title.slice(0,47)+" - Flash Player Installation");if(typeof t.flashvars!=P?t.flashvars+="&"+s:t.flashvars=s,G.ie&&4!=i.readyState){var a=v("div");n+="SWFObjectNew",a.setAttribute("id",n),i.parentNode.insertBefore(a,i),i.style.display="none",h(i)}f(e,t,n)}}function u(e){if(G.ie&&4!=e.readyState){e.style.display="none";var t=v("div");e.parentNode.insertBefore(t,e),t.parentNode.replaceChild(c(e),t),h(e)}else e.parentNode.replaceChild(c(e),e)}function c(e){var t=v("div");if(G.win&&G.ie)t.innerHTML=e.innerHTML;else{var n=e.getElementsByTagName(x)[0];if(n){var r=n.childNodes;if(r)for(var i=r.length,o=0;i>o;o++)1==r[o].nodeType&&"PARAM"==r[o].nodeName||8==r[o].nodeType||t.appendChild(r[o].cloneNode(!0))}}return t}function l(e,t){var n=v("div");return n.innerHTML="<object classid='clsid:D27CDB6E-AE6D-11cf-96B8-444553540000'><param name='movie' value='"+e+"'>"+t+"</object>",n.firstChild}function f(e,t,n){var r,i=y(n);if(n=_(n),G.wk&&G.wk<312)return r;if(i){var o,s,a,u=v(G.ie?"div":x);typeof e.id==P&&(e.id=n);for(a in t)t.hasOwnProperty(a)&&"movie"!==a.toLowerCase()&&p(u,a,t[a]);G.ie&&(u=l(e.data,u.innerHTML));for(o in e)e.hasOwnProperty(o)&&(s=o.toLowerCase(),"styleclass"===s?u.setAttribute("class",e[o]):"classid"!==s&&"data"!==s&&u.setAttribute(o,e[o]));G.ie?$[$.length]=e.id:(u.setAttribute("type",V),u.setAttribute("data",e.data)),i.parentNode.replaceChild(u,i),r=u}return r}function p(e,t,n){var r=v("param");r.setAttribute("name",t),r.setAttribute("value",n),e.appendChild(r)}function h(e){var t=y(e);t&&"OBJECT"==t.nodeName.toUpperCase()&&(G.ie?(t.style.display="none",function n(){if(4==t.readyState){for(var e in t)"function"==typeof t[e]&&(t[e]=null);t.parentNode.removeChild(t)}else setTimeout(n,10)}()):t.parentNode.removeChild(t))}function d(e){return e&&e.nodeType&&1===e.nodeType}function _(e){return d(e)?e.id:e}function y(e){if(d(e))return e;var t=null;try{t=N.getElementById(e)}catch(n){}return t}function v(e){return N.createElement(e)}function g(e){return parseInt(e,10)}function m(e,t,n){e.attachEvent(t,n),W[W.length]=[e,t,n]}function b(e){e+="";var t=G.pv,n=e.split(".");return n[0]=g(n[0]),n[1]=g(n[1])||0,n[2]=g(n[2])||0,t[0]>n[0]||t[0]==n[0]&&t[1]>n[1]||t[0]==n[0]&&t[1]==n[1]&&t[2]>=n[2]}function w(e,t,n,r){var i=N.getElementsByTagName("head")[0];if(i){var o="string"==typeof n?n:"screen";if(r&&(S=null,A=null),!S||A!=o){var s=v("style");s.setAttribute("type","text/css"),s.setAttribute("media",o),S=i.appendChild(s),G.ie&&typeof N.styleSheets!=P&&N.styleSheets.length>0&&(S=N.styleSheets[N.styleSheets.length-1]),A=o}S&&(typeof S.addRule!=P?S.addRule(e,t):typeof N.createTextNode!=P&&S.appendChild(N.createTextNode(e+" {"+t+"}")))}}function C(e,t){if(X){var n=t?"visible":"hidden",r=y(e);q&&r?r.style.visibility=n:"string"==typeof e&&w("#"+e,"visibility:"+n)}}function E(e){var t=/[\\\"<>\.;]/,n=null!=t.exec(e);return n&&typeof encodeURIComponent!=P?encodeURIComponent(e):e}var j,F,k,T,S,A,P="undefined",x="object",O="Shockwave Flash",R="ShockwaveFlash.ShockwaveFlash",V="application/x-shockwave-flash",I="SWFObjectExprInst",D="onreadystatechange",L=window,N=document,M=navigator,U=!1,H=[],B=[],$=[],W=[],q=!1,Q=!1,X=!0,J=!1,G=function(){var e=typeof N.getElementById!=P&&typeof N.getElementsByTagName!=P&&typeof N.createElement!=P,t=M.userAgent.toLowerCase(),n=M.platform.toLowerCase(),r=n?/win/.test(n):/win/.test(t),i=n?/mac/.test(n):/mac/.test(t),o=/webkit/.test(t)?parseFloat(t.replace(/^.*webkit\/(\d+(\.\d+)?).*$/,"$1")):!1,s="Microsoft Internet Explorer"===M.appName,a=[0,0,0],u=null;if(typeof M.plugins!=P&&typeof M.plugins[O]==x)u=M.plugins[O].description,u&&typeof M.mimeTypes!=P&&M.mimeTypes[V]&&M.mimeTypes[V].enabledPlugin&&(U=!0,s=!1,u=u.replace(/^.*\s+(\S+\s+\S+$)/,"$1"),a[0]=g(u.replace(/^(.*)\..*$/,"$1")),a[1]=g(u.replace(/^.*\.(.*)\s.*$/,"$1")),a[2]=/[a-zA-Z]/.test(u)?g(u.replace(/^.*[a-zA-Z]+(.*)$/,"$1")):0);else if(typeof L.ActiveXObject!=P)try{var c=new ActiveXObject(R);c&&(u=c.GetVariable("$version"),u&&(s=!0,u=u.split(" ")[1].split(","),a=[g(u[0]),g(u[1]),g(u[2])]))}catch(l){}return{w3:e,pv:a,wk:o,ie:s,win:r,mac:i}}();(function(){G.w3&&((typeof N.readyState!=P&&("complete"===N.readyState||"interactive"===N.readyState)||typeof N.readyState==P&&(N.getElementsByTagName("body")[0]||N.body))&&e(),q||(typeof N.addEventListener!=P&&N.addEventListener("DOMContentLoaded",e,!1),G.ie&&(N.attachEvent(D,function t(){"complete"==N.readyState&&(N.detachEvent(D,t),e())}),L==top&&!function n(){if(!q){try{N.documentElement.doScroll("left")}catch(t){return void setTimeout(n,0)}e()}}()),G.wk&&!function r(){return q?void 0:/loaded|complete/.test(N.readyState)?void e():void setTimeout(r,0)}()))})();H[0]=function(){U?r():i()};(function(){G.ie&&window.attachEvent("onunload",function(){for(var e=W.length,t=0;e>t;t++)W[t][0].detachEvent(W[t][1],W[t][2]);for(var n=$.length,r=0;n>r;r++)h($[r]);for(var i in G)G[i]=null;G=null;for(var o in swfobject)swfobject[o]=null;swfobject=null})})();return{registerObject:function(e,t,n,r){if(G.w3&&e&&t){var i={};i.id=e,i.swfVersion=t,i.expressInstall=n,i.callbackFn=r,B[B.length]=i,C(e,!1)}else r&&r({success:!1,id:e})},getObjectById:function(e){return G.w3?o(e):void 0},embedSWF:function(e,n,r,i,o,u,c,l,p,h){var d=_(n),y={success:!1,id:d};G.w3&&!(G.wk&&G.wk<312)&&e&&n&&r&&i&&o?(C(d,!1),t(function(){r+="",i+="";var t={};if(p&&typeof p===x)for(var _ in p)t[_]=p[_];t.data=e,t.width=r,t.height=i;var v={};if(l&&typeof l===x)for(var g in l)v[g]=l[g];if(c&&typeof c===x)for(var m in c)if(c.hasOwnProperty(m)){var w=J?encodeURIComponent(m):m,E=J?encodeURIComponent(c[m]):c[m];typeof v.flashvars!=P?v.flashvars+="&"+w+"="+E:v.flashvars=w+"="+E}if(b(o)){var j=f(t,v,n);t.id==d&&C(d,!0),y.success=!0,y.ref=j,y.id=j.id}else{if(u&&s())return t.data=u,void a(t,v,n,h);C(d,!0)}h&&h(y)})):h&&h(y)},switchOffAutoHideShow:function(){X=!1},enableUriEncoding:function(e){J=typeof e===P?!0:e},ua:G,getFlashPlayerVersion:function(){return{major:G.pv[0],minor:G.pv[1],release:G.pv[2]}},hasFlashPlayerVersion:b,createSWF:function(e,t,n){return G.w3?f(e,t,n):undefined},showExpressInstall:function(e,t,n,r){G.w3&&s()&&a(e,t,n,r)},removeSWF:function(e){G.w3&&h(e)},createCSS:function(e,t,n,r){G.w3&&w(e,t,n,r)},addDomLoadEvent:t,addLoadEvent:n,getQueryParamValue:function(e){var t=N.location.search||N.location.hash;if(t){if(/\?/.test(t)&&(t=t.split("?")[1]),null==e)return E(t);for(var n=t.split("&"),r=0;r<n.length;r++)if(n[r].substring(0,n[r].indexOf("="))==e)return E(n[r].substring(n[r].indexOf("=")+1));
}return""},expressInstallCallback:function(){if(Q){var e=y(I);e&&j&&(e.parentNode.replaceChild(j,e),F&&(C(F,!0),G.ie&&(j.style.display="block")),k&&k(T)),Q=!1}},version:"2.3"}}();JsClient.prototype.embed=function(){return[new Promise(function(e,t){this.iframe().addEventListener("load",function(){this.iFwindow=this.iframe().contentWindow,this.videoAdLayer().appendChild(this.videoTag()),this.iFwindow.document.body.appendChild(this.videoAdLayer()),this.iFwindow.document.body.appendChild(this.script()),this.iFwindow.document.body.style.margin=0,e()}.bind(this))}.bind(this)),new Promise(function(e,t){this.script().addEventListener("load",function(){e()},!1)}.bind(this))]},JsClient.prototype.init=function(e,t){if(!e||!t)throw new Error("Set correct options");if(!this.videoTag().canPlayType)throw new Error("HTML5 video not support");this.VpaidSource=e,this.configUrl=t,Promise.all(this.embed()).then(function(){this.VPAID=this.iFwindow.getVPAIDAd(),this.initVPAID()}.bind(this)).caught(function(e){console.error(e)}),this.options.containerEl.appendChild(this.iframe())},JsClient.prototype.initVPAID=function(){var e=this.eventManager;this.VPAID.subscribe(function(){this.VPAID.startAd(),e.trigger("loaded")}.bind(this),"AdLoaded"),this.VPAID.subscribe(function(){e.trigger("started")},"AdStarted"),this.VPAID.subscribe(function(){e.trigger("paused")},"AdPaused"),this.VPAID.subscribe(function(t){e.trigger("error",t)},"AdError"),this.VPAID.subscribe(function(){e.trigger("complete"),this.destroy()}.bind(this),"AdVideoComplete"),this.VPAID.handshakeVersion(2),this.VPAID.initAd(this.options.width,this.options.height,"normal",0,this.configUrl,{videoSlotCanAutoPlay:!0,videoSlot:this.videoTag(),slot:this.videoAdLayer()})},JsClient.prototype.videoTag=function(){return this._videoTag?this._videoTag:(this._videoTag=document.createElement("video"),this._videoTag.setAttribute("width","100%"),this._videoTag.setAttribute("height","100%"),this._videoTag.style.position="absolute",this._videoTag)},JsClient.prototype.videoAdLayer=function(){return this._videoAdLayer?this._videoAdLayer:(this._videoAdLayer=document.createElement("div"),this._videoAdLayer)},JsClient.prototype.script=function(){return this._scriptTag?this._scriptTag:(this._scriptTag=document.createElement("script"),this._scriptTag.setAttribute("type","text/javascript"),this._scriptTag.setAttribute("src",this.VpaidSource),this._scriptTag.setAttribute("async",""),this._scriptTag)},JsClient.prototype.iframe=function(){return this._iFrame?this._iFrame:(this._iFrame=document.createElement("iFrame"),this._iFrame.src="about:blank",this._iFrame.width=this.options.width,this._iFrame.height=this.options.height,this._iFrame.style.border="none",this._iFrame)},JsClient.prototype.destroy=function(){this.VPAID.stopAd(),delete this.VPAID,this._iFrame.parentNode.removeChild(this._iFrame),delete this._videoAdLayer,delete this._scriptTag,delete this._videoTag,delete this._iFrame}}(window);
//# sourceMappingURL=data:application/json;base64,
